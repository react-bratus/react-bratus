{"version":3,"sources":["api/index.js","contexts/HighlightedComponentsContext.js","utils/constants/constants.js","contexts/ComponentBackgroundContext.js","utils/constants/units.js","utils/functions/rgbaToHex.js","components/ComponentNode/ComponentNode.sc.js","components/ComponentNode/ComponentNode.jsx","components/ComponentTree/ComponentTree.sc.js","utils/functions/graphUtils.js","components/ComponentTree/private/LayoutButtons.jsx","components/ComponentTree/ComponentTree.jsx","hooks/useStickyState.js","components/ComponentDetails/ComponentDetails.sc.js","components/ComponentDetails/ComponentDetails.jsx","components/HelpPanel/private/EdgesSection.tsx","components/HelpPanel/HelpPanel.sc.js","components/HelpPanel/private/LinksSection.tsx","components/HelpPanel/private/NodesSection.tsx","components/HelpPanel/private/PreferencesSection.tsx","components/HelpPanel/HelpPanel.tsx","components/Minimap/MiniMapNode.tsx","components/Minimap/MiniMap.tsx","components/Minimap/Minimap.sc.js","components/NavigationPanel/NavigationPanel.sc.js","components/NavigationPanel/private/ActionButtons/ActionButtons.sc.js","components/NavigationPanel/private/ActionButtons/NavigationPrimaryActions.jsx","components/NavigationPanel/private/ActionButtons/NavigationGitHubActions.jsx","components/NavigationPanel/private/Experimental/NavExperimentalActions.jsx","components/NavigationPanel/private/SubMenuSections/NavSearchComponent.jsx","components/NavigationPanel/private/SubMenuSections/NavNodeVisualizationOptions.jsx","components/NavigationPanel/NavigationPanel.jsx","components/DefaultLayoutPage/DefaultLayout.sc.js","components/DefaultLayoutPage/DefaultLayout.jsx","App.js","utils/functions/nodes-and-edges.js","utils/functions/browser-notification.js","providers/ComponentBackgroundProvider.js","providers/HighlightedComponentsProvider.js","providers/Providers.tsx","reportWebVitals.js","index.js"],"names":["recompile","fetch","method","HighlightedComponentsContext","createContext","highlightedComponents","GraphLabels","HandleLabels","DropDownLabels","DetailsLabels","title","text","stext","BackgroundLabels","defaultOpenKeys","HelpPanelLabels","size","header","img","color","key","white","default","conditional","router","help","tree","repo","repoUrl","changeLog","changelogUrl","demo","demoUrl","ButtonLabels","show","hide","UrlLabels","NavigationLabels","ComponentBackgroundContext","mode","locReference","baseUnit","nodeWidth","baseNodeHeight","trim","str","replace","StyledNode","styled","div","linesOfCode","componentBackground","treeLayoutDirection","isHighlighted","bgColor","fontColor","StyledTitle","Title","StyledNodeContent","Col","ComponentNode","node","nodeName","nameLength","useContext","GraphDirectionContext","getBgColor","ColorHash","lightness","hue","min","max","hex","data","label","rgba","inParts","substring","indexOf","split","r","parseInt","g","b","a","parseFloat","length","toFixed","outParts","toString","Math","round","forEach","part","i","join","rgbaToHex","getFontColor","charAt","layoutTargetHandlePosition","layoutSourceHandlePosition","truncatedNodeName","slice","concat","some","component","id","match","componentName","onDoubleClick","onShowNodeDetail","inDegree","type","position","level","outDegree","LayoutButtonsWrapper","StyledFontAwesomeIcon","FontAwesomeIcon","LayoutButton","Button","ZoomControlButtons","Controls","dagreGraph","dagre","graphlib","Graph","setDefaultEdgeLabel","getLayoutedGraphElements","nodesAndEdges","setTreeLayoutDirection","setGraph","rankdir","isVerticalLayout","graphElement","isNode","setNode","width","height","isEdge","setEdge","source","target","layout","map","nodeWithPosition","targetPosition","sourcePosition","x","random","y","LayoutButtons","layoutedNodesAndEdges","setLayoutedNodesAndEdges","reactFlowInstance","useZoomPanHelper","onChangeTreeLayout","useCallback","els","shape","onClick","setTimeout","fitView","duration","icon","faGripHorizontal","faGripVertical","React","ComponentTree","componentLabelFilter","componentNumberFilter","isSubtreeMode","useState","useEffect","filterByName","rootComponentLabel","setFilteredNodesAndEdges","number","filter","obj","timesUsed","filteredNodesAndEdges","array","filterName","includes","setHighlightedComponents","renderedElementsToPosition","setRenderedElementsToPosition","console","log","Provider","value","onLoad","elements","nodeTypes","reactComponent","onNodeMouseEnter","_e","_node","locked","search","highlightComponent","onNodeMouseLeave","index","findIndex","splice","removeHighlight","onPaneClick","panOnScroll","minZoom","defaultZoom","useStickyState","defaultValue","stickyValue","window","localStorage","getItem","JSON","parse","setValue","setItem","stringify","ComponentDetailsRow","Row","ComponentDetails","nodeDetail","visible","LoadingOutlined","spin","copyable","href","path","style","vscDarkPlus","showLineNumbers","language","code","Panel","Collapse","EdgesSection","defaultActiveKey","src","Link","Typography","VerticalDivider","Divider","CheckboxWrapper","StyledLink","StyledLi","li","StyledUl","ul","LinksSection","GithubOutlined","ReadOutlined","YoutubeOutlined","NodesSection","PreferencesSection","isHelpHiddenOnStartUp","setIsHelpHiddenOnStartUp","isVerticalTreeLayoutAsDefault","setVerticalTreeLayoutAsDefault","checked","onChange","e","HelpPanel","isHelpVisible","setIsHelpVisible","onClose","bodyStyle","paddingBottom","MiniMapNode","strokeColor","strokeWidth","className","borderRadius","shapeRendering","background","backgroundColor","fill","String","cc","rx","ry","stroke","displayName","rectToBox","x2","y2","getBoundsofRects","rect1","rect2","boxToRect","box1","box2","useGesture","createUseGesture","dragAction","wheelAction","MiniMap","nodeStrokeColor","nodeColor","nodeClassName","nodeBorderRadius","nodeStrokeWidth","maskColor","containerWidth","useStoreState","s","containerHeight","transform","tX","tY","tScale","nodes","mapClasses","elementWidth","Number","elementHeight","nodeColorFunc","Function","nodeStrokeColorFunc","nodeClassNameFunc","hasNodes","bb","getRectOfNodes","viewBB","boundingRect","scaledWidth","scaledHeight","viewScale","viewWidth","viewHeight","offset","maxZoom","rectRef","useRef","onDrag","delta","zoom","onWheel","event","clientX","clientY","deltaY","active","sign","current","getBoundingClientRect","bind","viewBox","isHidden","__rf","ref","fillRule","touchAction","StyledMiniMap","NavigationSider","Sider","AppTitle","StyledSubMenu","SubMenu","navigationDropdownStyles","css","DropdownInput","Select","BaselineInputWrapper","TreeComponentDropdown","TreeSelect","SubtreeSwitchWrapper","StyledDropDownSelect","maxHeight","maxWidth","minWidth","overflow","StyledMenuDivider","MenuDivider","SearchNodeExplanationText","Text","SubtreeModeText","TimesUsedInputGroup","Input","Group","TimesUsedButton","navigationButtonsWrapperStyles","PrimaryActionsWrapper","GitHubActionsWrapper","RecompileActionsWrapper","ActionButton","NavigationPrimaryActions","ReloadOutlined","then","location","reload","catch","error","QuestionCircleOutlined","NavigationGitHubActions","ghost","NavExperimentalActions","customRootComponents","setCustomRootComponents","triggerCustomConfiguration","newRoots","customRootComponenets","headers","body","rootComponents","compact","name","NavSearchComponent","setComponentLabelFilter","setComponentNumberFilter","setIsSubtreeMode","setCenter","onFilterSwitchToggle","initialNodesContext","setSearchField","InitialNodesContext","store","searchField","searchOptions","setSearchOptions","undefined","numberForFilter","setNumberForFilter","getParentId","idSplit","pop","isLeaf","pId","defaultChecked","FilterOutlined","showSearch","dropdownStyle","placeholder","treeDataSimpleMode","treeDefaultExpandAll","treeData","arr","focusNode","NavNodeVisualizationOptions","setComponentBackground","Option","addonBefore","NavigationPanel","isNavCollapsed","collapsed","collapsedWidth","theme","FileSearchOutlined","BgColorsOutlined","InteractionOutlined","ExperimentOutlined","MainContentWrapper","Layout","NavigationTriggerButton","navigationWidth","MinimapTriggerButton","isMinimapVisible","DefaultLayout","children","setNodeDetail","setIsNavCollapsed","setisMinimapVisible","LeftCircleOutlined","rotate","closable","keyboard","isMinimapNodeHighlighted","App","setNodesAndEdges","initialNodes","setInitialNodes","treeLayoutOnCompile","res","json","getNodes","edges","edge","labelBgPadding","labelBgBorderRadius","labelBgStyle","fillOpacity","labelStyle","getEdges","Date","now","btn","notification","close","message","description","triggerBrowserWarning","spinning","ComponentBackgroundProvider","HighlightedComponentsProvider","Providers","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAIaA,EAAY,WACvB,OAAOC,MAAM,kCAAmC,CAC9CC,OAAQ,U,eCAGC,EAJsBC,wBAAc,CACjDC,sBAAuB,K,kBCHZC,EACE,KADFA,EAEE,KAGFC,EACL,OADKA,EAEJ,QAFIA,EAGH,SAHGA,EAIN,MAJMA,EAKH,SALGA,EAMH,SAGGC,EACJ,QADIA,EAEL,mCAFKA,EAGJ,8BAGIC,EACL,CACJC,MAAO,YACPC,KAAM,0BACNC,MAAO,UAJEH,EAML,OANKA,EAOL,OAGKI,EACL,oBADKA,EAEN,gBAFMA,EAGJ,QAGIC,EAAkB,CAC7B,mBACA,qBACA,sBAGWC,EACJ,SADIA,EAEH,wCAFGA,EAGF,qEAHEA,EAIJ,CACLL,MAAO,6BACPC,KAAM,iJACNK,KAAM,CACJC,OAAQ,2CACRN,KAAM,+HACNO,IAAK,kCAEPC,MAAO,CACLF,OAAQ,sCACRN,KAAM,qJACNO,IAAK,kCACLE,IAAK,qBAEPC,MAAO,CACLJ,OAAQ,QACRN,KAAM,iHACNO,IAAK,uBArBEH,EAwBJ,CACLL,MAAO,aACPC,KAAM,2KACNW,QAAS,CACPL,OAAQ,iCACRN,KAAM,iFACNO,IAAK,uBACLE,IAAK,iBAEPG,YAAa,CACXN,OAAQ,oCACRN,KAAM,6RACNO,IAAK,4BAEPM,OAAQ,CACNP,OAAQ,sCACRN,KAAM,gIACNO,IAAK,wBAzCEH,EA4CL,CACJL,MAAO,cACPe,KAAM,wBACNC,KAAM,iCACNN,IAAK,eAhDIL,EAkDJ,CACLL,MAAO,eACPiB,KAAM,cACNC,QAAS,+CACTC,UAAW,YACXC,aAAc,yDACdC,KAAM,cACNC,QAAS,+CAIAC,EACD,kBADCA,EAEC,oBAFDA,EAGD,gBAHCA,EAIN,aAJMA,EAKF,sBALEA,EAMA,oBANAA,GAOL,cAPKA,GAQN,CACHC,KAAM,WACNC,KAAM,YAVGF,GAYN,CACHC,KAAM,WACNC,KAAM,YAIGC,GAET,wIAFSA,GAGN,wHAHMA,GAKT,+HAGSC,GACJ,eADIA,GAEH,CACN3B,MAAO,uBACPU,IAAK,oBAJIiB,GAML,CACJ3B,MAAO,6BACPU,IAAK,sBARIiB,GAUF,CACP3B,MAAO,UACPU,IAAK,sBAZIiB,GAcH,CACN3B,MAAO,aACPU,IAAK,kBCzIMkB,GALoBlC,wBAAc,CAC/CmC,KAAM1B,EACN2B,aAAc,MCLHC,GAAW,GAGXC,GAAY,IACZC,GAAiB,ICyBxBC,GAAO,SAACC,GACZ,OAAOA,EAAIC,QAAQ,cAAe,K,gDClBvBC,GAAaC,KAAOC,IAAV,4MACX,YAAgE,IAA7DC,EAA4D,EAA5DA,YAAaC,EAA+C,EAA/CA,oBAAqBC,EAA0B,EAA1BA,oBAC7C,OAAID,EAAoBZ,OAAS1B,GAC3BuC,IAAwB9C,EACpB,GAAN,OFVgCqC,kBEUKO,EAArC,MAGG,UAEA,YAAgE,IAA7DA,EAA4D,EAA5DA,YAAaC,EAA+C,EAA/CA,oBAAqBC,EAA0B,EAA1BA,oBAC5C,OAAID,EAAoBZ,OAAS1B,GAC3BuC,IAAwB9C,EACpB,GAAN,OAAUoC,GAAYQ,EAAtB,MAGE,GAAN,OAAUR,GAAV,QAESD,IAED,YACR,OAD+B,EAApBY,cACY,oBAAsB,qBAEjC,YACZ,OADmC,EAApBA,cACQ,2CAA6C,UAElD,qBAAGC,WACd,qBAAGC,aAIDC,GAAcR,aAAOS,KAAPT,CAAH,mIACb,qBAAG7B,SAODuC,GAAoBV,aAAOW,KAAPX,CAAH,+I,QCqEfY,GAxGO,SAACC,GACrB,IA8D0BC,EAAUC,EA9D5B1D,EAA0B2D,qBAAW7D,GAArCE,sBAEA8C,EAAwBa,qBAAW1B,IAAnCa,oBAGFC,EAAsBY,qBAAWC,IAWjCC,EAAa,WACjB,OAAIf,EAAoBZ,OAAS1B,EACnB,IAAIsD,IAAU,CACxBC,UAAW,GACXC,IAAK,CAAEC,IAAK,EAAGC,IAAK,OACnBC,IAAIX,EAAKY,KAAKC,OAERvB,EAAoBZ,OAAS1B,EFtCnB,SAAC8D,GACxB,IAAIC,EAAUD,EAAKE,UAAUF,EAAKG,QAAQ,MAAMC,MAAM,KACpDC,EAAIC,SAASrC,GAAKgC,EAAQ,GAAGC,UAAU,IAAK,IAC5CK,EAAID,SAASrC,GAAKgC,EAAQ,IAAK,IAC/BO,EAAIF,SAASrC,GAAKgC,EAAQ,IAAK,IAC/BQ,EAAIC,WACFzC,GAAKgC,EAAQ,GAAGC,UAAU,EAAGD,EAAQ,GAAGU,OAAS,KACjDC,QAAQ,GAERC,EAAW,CACbR,EAAES,SAAS,IACXP,EAAEO,SAAS,IACXN,EAAEM,SAAS,IACXC,KAAKC,MAAU,IAAJP,GACRK,SAAS,IACTZ,UAAU,EAAG,IAUlB,OANAW,EAASI,SAAQ,SAAUC,EAAMC,GACX,IAAhBD,EAAKP,SACPE,EAASM,GAAK,IAAMD,MAIjB,IAAML,EAASO,KAAK,IEchBC,CAAU,kBAAD,OAEZnC,EAAKY,KAAKvB,YAAcC,EAAoBX,aAAe,EACvD,EACAqB,EAAKY,KAAKvB,YAAcC,EAAoBX,aAJpC,MAQT,aAKLyD,EAAe,WACnB,IAAM3C,EAAUY,IACV/C,EACkB,MAAtBmC,EAAQ4C,OAAO,GACX5C,EAAQuB,UAA6B,IAAnBvB,EAAQgC,OAAe,EAAI,EAAG,GAChDhC,EAIN,MAAW,KAHD2B,SAAS9D,EAAM0D,UAAU,EAAG,GAAI,IAGnB,KAFbI,SAAS9D,EAAM0D,UAAU,EAAG,GAAI,IAEP,KADzBI,SAAS9D,EAAM0D,UAAU,EAAG,GAAI,IACC,IAAM,OAAS,QAKtDsB,EACJ/C,IAAwB9C,EACpBC,EACAA,EAEA6F,EACJhD,IAAwB9C,EACpBC,EACAA,EASA8F,GANoBvC,EAMiBD,EAAKY,KAAKC,MANjBX,EHzER,GG0EnBD,EAASwB,OAASvB,EACrBD,EAASwC,MAAM,EAAGvC,EAAa,GAAGwC,OAAO,OACzCzC,GAKN,OACE,gBAACf,GAAD,CACEG,YAAaW,EAAKY,KAAKvB,YACvBC,oBAAqBA,EACrBC,oBAAqBA,EACrBC,cAnEKhD,EAAsBmG,MAAK,SAACC,GAAD,OAChC5C,EAAK6C,GAAGC,MAAR,UACKF,EAAUG,cADf,gBACoCH,EAAUG,cAD9C,SAmEAtD,QAASY,EACTX,UAAW0C,IACXY,cAAe,kBAAMhD,EAAKY,KAAKqC,iBAAiBjD,IAPlD,UASGA,EAAKY,KAAKsC,SAAW,GACpB,eAAC,IAAD,CACEC,KAAMzG,EACN0G,SAAUd,IAId,eAACzC,GAAD,UACE,eAACF,GAAD,CAAarC,MAAO8E,EAAciB,MAAO,EAAzC,SACGb,MAIJxC,EAAKY,KAAK0C,UAAY,GACrB,eAAC,IAAD,CACEH,KAAMzG,EACN0G,SAAUb,Q,8BC3GPgB,GAAuBpE,KAAOC,IAAV,6DAKpBoE,GAAwBrE,aAAOsE,KAAPtE,CAAH,kDAKrBuE,GAAevE,aAAOwE,KAAPxE,CAAH,iFAMZyE,GAAqBzE,aAAO0E,IAAP1E,CAAH,8C,qBCbzB2E,GAAa,IAAIC,KAAMC,SAASC,MAGtCH,GAAWI,qBAAoB,iBAAO,MAU/B,I,kBAAMC,GAA2B,SACtCC,GAII,IAHJ7E,EAGG,uDAHmB9C,EACtB4H,EAEG,uDAFsB,aACzB/E,EACG,uCAEHwE,GAAWQ,SAAS,CAAEC,QAAShF,IAE/B,IAAMiF,EAAmBjF,IAAwB9C,EA4CjD,OA1CA2H,EAAcrC,SAAQ,SAAC0C,GACjBC,YAAOD,KACLlF,IAAwB9C,IACtB6C,EAAoBZ,OAAS1B,EAC/B8G,GAAWa,QAAQF,EAAa5B,GAAI,CAClC+B,MAAO/F,GACPgG,OACE/F,IACA2F,EAAa7D,KAAKvB,cAGtByE,GAAWa,QAAQF,EAAa5B,GAAI,CAClC+B,MAAO/F,GACPgG,OAAQ/F,OAKVS,GAAuB9C,IACrB6C,EAAoBZ,OAAS1B,GAC/B8G,GAAWa,QAAQF,EAAa5B,GAAI,CAClC+B,MAAO/F,IACPgG,OAAQ/F,GAAiB2F,EAAa7D,KAAKvB,cAG/CyE,GAAWa,QAAQF,EAAa5B,GAAI,CAClC+B,MAAO/F,IACPgG,OAAQ/F,OAKVgG,YAAOL,IACTX,GAAWiB,QAAQN,EAAaO,OAAQP,EAAaQ,WAIzDlB,KAAMmB,OAAOpB,IAGbO,EAAuB9E,GAEhB6E,EAAce,KAAI,SAACV,GACxB,GAAIC,YAAOD,GAAe,CACxB,IAAMW,EAAmBtB,GAAW9D,KAAKyE,EAAa5B,IAGtD4B,EAAaY,eAAiBb,EAAmB,OAAS,MAC1DC,EAAaa,eAAiBd,EAAmB,QAAU,SAEvDjF,IAAwB9C,IACtB6C,EAAoBZ,OAAS1B,EAC/ByH,EAAarB,SAAW,CACtBmC,EAAGH,EAAiBG,EAAI1G,GAAYgD,KAAK2D,SAAW,IACpDC,EAAGL,EAAiBK,GAAK,GAAKhB,EAAa7D,KAAKvB,aAAe,GAGjEoF,EAAarB,SAAW,CACtBmC,EAAGH,EAAiBG,EAAI1G,GACxB4G,EAAGL,EAAiBK,EAAI3G,KAK1BS,IAAwB9C,IACtB6C,EAAoBZ,OAAS1B,EAC/ByH,EAAarB,SAAW,CACtBmC,EACEH,EAAiBG,GAChB1G,GAAY4F,EAAa7D,KAAKvB,aAAe,EAChDoG,EAAGL,EAAiBK,EAAI3G,GAAiB+C,KAAK2D,SAAW,KAG3Df,EAAarB,SAAW,CACtBmC,EACEH,EAAiBG,EAChB1G,IACDgD,KAAK2D,SAAW,IAClBC,EAAGL,EAAiBK,IAM5B,OAAOhB,MCzCIiB,GA3Dc,SAAC,GAIvB,IAHLC,EAGI,EAHJA,sBACAC,EAEI,EAFJA,yBACAvB,EACI,EADJA,uBAGMwB,EAAoBC,cAElBxG,EAAwBa,qBAAW1B,IAAnCa,oBAGFyG,EAAqBC,uBACzB,SAACzG,GACC,IAAM0G,EAAM9B,GACVwB,EACApG,EACA8E,EACA/E,GAEFsG,EAAyBK,KAE3B,CAACN,IAGH,OACE,gBAACpC,GAAD,WACE,gBAACG,GAAD,CACEwC,MAAM,QACN/C,KAAK,UACLhG,KAAK,SACLgJ,QAAS,WACPJ,EAAmBtJ,GACnB2J,YAAW,WACTP,EAAkBQ,QAAQ,CAAEC,SAAU,QACrC,IARP,UAWGlI,EACD,eAACoF,GAAD,CAAuB+C,KAAMC,UAG/B,gBAAC9C,GAAD,CACEwC,MAAM,QACN/C,KAAK,UACLhG,KAAK,SACLgJ,QAAS,WACPJ,EAAmBtJ,GACnB2J,YAAW,WACTP,EAAkBQ,QAAQ,CAAEC,SAAU,QACrC,IARP,UAWGlI,EACD,eAACoF,GAAD,CAAuB+C,KAAME,cC5DxBrG,GAAwBsG,IAAMnK,cAAc,MAyK1CoK,GAvKO,SAAC,GAOhB,IAAD,IANJvC,EAMI,EANJA,cACAwC,EAKI,EALJA,qBACAC,EAII,EAJJA,sBACAtH,EAGI,EAHJA,oBACA8E,EAEI,EAFJA,uBACAyC,EACI,EADJA,cAEA,EACEC,mBAAS3C,GADX,mBAAOuB,EAAP,KAA8BC,EAA9B,KAIAoB,qBAAU,WACRC,EAAatB,EAAuBuB,GACpCd,YAAW,kBAAMP,EAAkBQ,QAAQ,CAAEC,SAAU,QAAQ,KAC9D,IAGHU,qBAAU,WACRG,EACEF,EAAatB,EAAuBiB,IAEtCR,YAAW,kBAAMP,EAAkBQ,QAAQ,CAAEC,SAAU,QAAQ,KAC9D,CAACM,IAEJI,qBAAU,WAqCV,IAAkCI,EApChCD,GAoCgCC,EAnCWP,EAAvBlB,EAoCC0B,QAAO,SAACC,GAC3B,OAAI5C,YAAO4C,GACFA,EAAI1G,KAAKgC,UAAU2E,WAAaH,EAEhCE,OAtCXlB,YAAW,kBAAMP,EAAkBQ,QAAQ,CAAEC,SAAU,QAAQ,KAC9D,CAACO,IAEJ,MAA0DE,mBAAS,IAAnE,mBAAOS,EAAP,KAA8BL,EAA9B,KAGMD,EAAqBvB,EAAqB,UAC5CA,EAAsB,UADsB,iBAC5C,EAA0B/E,YADkB,aAC5C,EAAgCC,MAChC,MAEEgF,EAAoBC,cAO1B,SAASmB,EAAaQ,EAAOC,GAQ3B,OAPeD,EAAMJ,QAAO,SAACC,GAC3B,OAAI5C,YAAO4C,GACFA,EAAIzE,GAAG3B,MAAM,KAAKyG,SAASD,GAE3BJ,EAAItC,OAAO9D,MAAM,KAAKyG,SAASD,MAsB5C,MAA4DvH,qBAC1D7D,GADME,EAAR,EAAQA,sBAAuBoL,EAA/B,EAA+BA,yBAyCzBC,EACJL,IAA2C,IAAlBV,EACrBU,EACA7B,EAGAmC,EACJN,IAA2C,IAAlBV,EACrBK,EACAvB,EAIN,OAFAmC,QAAQC,IAAI,YAAaR,GAGvB,qCACG7B,GACC,gBAACvF,GAAsB6H,SAAvB,CAAgCC,MAAO3I,EAAvC,UACE,eAAC,GAAD,CACE8E,uBAAwBA,EACxBsB,sBAAuBkC,EACvBjC,yBAA0BkC,IAG5B,eAAC,IAAD,CACEK,OA5DS,SAACtC,GAAD,OAAuBA,EAAkBQ,WA6DlD+B,SACEtB,EAAgBU,EAAwB7B,EAE1C0C,UAAW,CAAEC,eAAgBvI,IAC7BwI,iBAAkB,SAACC,EAAIxI,GAAL,OA9DD,SAACA,GAC1B,IAAM+C,EAAgB/C,EAAOA,EAAKY,KAAKC,MAAQ,KAC/C+G,EAAyB,GAAD,mBACnBpL,EAAsB6K,QAAO,SAACoB,GAAD,OAAWA,EAAMC,WAD3B,CAEtB,CACE7F,GAAI7C,EAAK6C,GACTE,cAAeA,EACf2F,QAAQ,EACRC,QAAQ,MAsD4BC,CAAmB5I,IACnD6I,iBAAkB,SAACL,EAAIxI,GAAL,OAjDJ,SAACA,GACvB,IAAM8I,EAAQtM,EAAsBuM,WAClC,SAACnG,GAAD,OAAeA,EAAUC,KAAO7C,EAAK6C,MAEvC,IAAe,IAAXiG,IAC2BtM,EAAsBsM,GACzBJ,OAAQ,CAChC,IAAMjB,EAAK,YAAOjL,GAClBiL,EAAMuB,OAAOF,EAAO,GACpBlB,EAAyBH,IAwCWwB,CAAgBjJ,IAChDkJ,YAnCa,kBAAMtB,EAAyB,KAoC5CuB,aAAa,EACbC,QAAS,EACTC,YAAa,EAXf,SAaE,eAACzF,GAAD,Y,8BC/IG0F,GAfQ,SAACC,EAAchM,GACpC,MAA0BwJ,oBAAS,WAEjC,IAAMyC,EAAcC,OAAOC,aAAaC,QAAQpM,GAChD,OAAuB,OAAhBiM,EAAuBI,KAAKC,MAAML,GAAeD,KAH1D,mBAAOrB,EAAP,KAAc4B,EAAd,KAWA,OALA9C,qBAAU,WAERyC,OAAOC,aAAaK,QAAQxM,EAAKqM,KAAKI,UAAU9B,MAC/C,CAAC3K,EAAK2K,IAEF,CAACA,EAAO4B,I,sECZJG,GAAsB9K,aAAO+K,KAAP/K,CAAH,+DCyDjBgL,GA/CU,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC1B,IAAKA,EAAWC,QACd,OAAO,eAACC,GAAA,EAAD,CAAiBC,MAAI,IAG9B,IAAMhD,EAAY6C,EAAWpK,KAAKY,KAAKgC,UAAU2E,UAEjD,OACE,+BACE,gBAAC0C,GAAD,WACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAO5G,MAAO,EAAd,SAAkBzG,EAAmBC,QACrC,gBAAC,KAAD,WACGD,EAAmBE,KADtB,IAC6ByK,EAD7B,IACyC3K,EAAmBG,YAG9D,eAAC,KAAD,IACA,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOsG,MAAO,EAAd,SAAkBzG,IAClB,eAAC,KAAD,CAAM4N,UAAQ,EAAd,SACE,oBAAGC,KAAI,wBAAmBL,EAAWpK,KAAKY,KAAK8J,MAA/C,SACGN,EAAWpK,KAAKY,KAAK8J,YAI5B,eAAC,KAAD,IACA,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOrH,MAAO,EAAd,SAAkBzG,IAElB,eAAC,KAAD,CACE+N,MAAOC,KACPC,iBAAiB,EACjBC,SAAS,aAHX,SAKGV,EAAWpK,KAAKY,KAAKmK,UAG1B,eAAC,KAAD,U,kDChDAC,GAAUC,KAAVD,MAgCOE,GA5BM,WACnB,OACE,uCACE,eAAC,KAAD,UAAYhO,EAAsBJ,OAElC,gBAAC,KAAD,CAAUqO,iBAAkBjO,EAAsBO,QAAQF,IAA1D,UACE,gBAACyN,GAAD,CAEE5N,OAAQF,EAAsBO,QAAQL,OAFxC,UAIE,eAAC,KAAD,UAAYF,EAAsBO,QAAQX,OAC1C,eAAC,KAAD,CAAOsO,IAAKlO,EAAsBO,QAAQJ,QAJrCH,EAAsBO,QAAQF,KAOrC,gBAACyN,GAAD,CAAgB5N,OAAQF,EAAsBQ,YAAYN,OAA1D,UACE,eAAC,KAAD,UAAYF,EAAsBQ,YAAYZ,OAC9C,eAAC,KAAD,CAAOsO,IAAKlO,EAAsBQ,YAAYL,QAFpC,IAKZ,gBAAC2N,GAAD,CAAgB5N,OAAQF,EAAsBS,OAAOP,OAArD,UACE,eAAC,KAAD,UAAYF,EAAsBS,OAAOb,OACzC,eAAC,KAAD,CAAOsO,IAAKlO,EAAsBS,OAAON,QAF/B,W,8BCvBZgO,GAASC,KAATD,KAIKE,GAAkBpM,aAAOqM,KAAPrM,CAAH,+DAKfsM,GAAkBtM,KAAOC,IAAV,mFAKfsM,GAAavM,aAAOkM,GAAPlM,CAAH,oDAIVwM,GAAWxM,KAAOyM,GAAV,iFAEFhN,GAGNiN,GAAW1M,KAAO2M,GAAV,8CCWNC,GA3BM,WACnB,OACE,gBAACF,GAAD,WACE,gBAACF,GAAD,WACE,eAACK,GAAA,EAAD,IACA,eAACN,GAAD,CAAYjB,KAAMvN,EAAsBa,QAAxC,SACGb,EAAsBY,UAI3B,gBAAC6N,GAAD,WACE,eAACM,GAAA,EAAD,IACA,eAACP,GAAD,CAAYjB,KAAMvN,EAAsBe,aAAxC,SACGf,EAAsBc,eAI3B,gBAAC2N,GAAD,WACE,eAACO,GAAA,EAAD,IACA,eAACR,GAAD,CAAYjB,KAAMvN,EAAsBiB,QAAxC,SACGjB,EAAsBgB,cC3BzB8M,GAAUC,KAAVD,MAgCOmB,GA5BM,WACnB,OACE,uCACE,eAAC,KAAD,UAAYjP,EAAsBJ,OAElC,gBAAC,KAAD,CAAUqO,iBAAkBjO,EAAsBI,MAAMC,IAAxD,UACE,gBAAC,GAAD,CAEEH,OAAQF,EAAsBI,MAAMF,OAFtC,UAIE,eAAC,KAAD,UAAYF,EAAsBI,MAAMR,OACxC,eAAC,KAAD,CAAOsO,IAAKlO,EAAsBI,MAAMD,QAJnCH,EAAsBI,MAAMC,KAOnC,gBAAC,GAAD,CAAgBH,OAAQF,EAAsBC,KAAKC,OAAnD,UACE,eAAC,KAAD,UAAYF,EAAsBC,KAAKL,OACvC,eAAC,KAAD,CAAOsO,IAAKlO,EAAsBC,KAAKE,QAF7B,IAKZ,gBAAC,GAAD,CAAgBD,OAAQF,EAAsBM,MAAMJ,OAApD,UACE,eAAC,KAAD,UAAYF,EAAsBM,MAAMV,OACxC,eAAC,KAAD,CAAOsO,IAAKlO,EAAsBM,MAAMH,QAF9B,W,qBCOL+O,GAzBmB,SAAC,GAKV,IAJvBC,EAIsB,EAJtBA,sBACAC,EAGsB,EAHtBA,yBACAC,EAEsB,EAFtBA,8BACAC,EACsB,EADtBA,+BAEA,OACE,gBAACf,GAAD,WACE,eAAC,KAAD,CACEgB,QAASJ,EACTK,SAAU,SAACC,GAAD,OAAOL,EAAyBK,EAAE1H,OAAOwH,UAFrD,SAIGvP,EAAqBU,OAExB,eAAC2N,GAAD,CAAiBpI,KAAK,aACtB,eAAC,KAAD,CACEsJ,QAASF,EACTG,SAAU,SAACC,GAAD,OAAOH,EAA+BG,EAAE1H,OAAOwH,UAF3D,SAIGvP,EAAqBW,WCjBtB+B,GAAU0L,KAAV1L,MACAoL,GAAUC,KAAVD,MAkDO4B,GAhDG,SAAC,GAOI,IANrBC,EAMoB,EANpBA,cACAC,EAKoB,EALpBA,iBACAT,EAIoB,EAJpBA,sBACAC,EAGoB,EAHpBA,yBACAC,EAEoB,EAFpBA,8BACAC,EACoB,EADpBA,+BAEA,OACE,gBAAC,KAAD,CACE5H,MAAO,IACPmI,QAAS,kBAAMD,GAAiB,IAChCzC,QAASwC,EACTG,UAAW,CAAEC,cAAe,IAJ9B,UAME,eAAC,GAAD,CAAO5J,MAAO,EAAd,SAAkBnG,IAClB,eAAC,GAAD,CAAOmG,MAAO,EAAd,SAAkBnG,IAClB,eAAC,KAAD,UAAYA,IAEZ,gBAAC,KAAD,CAAUiO,iBAAkBjO,EAAqBK,IAAjD,UACE,eAAC,GAAD,CAAgBH,OAAQF,EAAsBL,MAA9C,SACE,eAAC,GAAD,KADU,IAIZ,eAAC,GAAD,CAAgBO,OAAQF,EAAsBL,MAA9C,SACE,eAAC,GAAD,KADU,IAIZ,eAAC,GAAD,CAEEO,OAAQF,EAAqBL,MAF/B,SAIE,eAAC,GAAD,CACEwP,sBAAuBA,EACvBC,yBAA0BA,EAC1BC,8BAA+BA,EAC/BC,+BAAgCA,KAP7BtP,EAAqBK,KAW5B,eAAC,GAAD,CAAgBH,OAAQF,EAAsBL,MAA9C,SACE,eAAC,GAAD,KADU,W,kBC/BdqQ,GAAc,SAAC,GAYI,IAXvB3H,EAWsB,EAXtBA,EACAE,EAUsB,EAVtBA,EACAb,EASsB,EATtBA,MACAC,EAQsB,EARtBA,OACA8F,EAOsB,EAPtBA,MACArN,EAMsB,EANtBA,MACA6P,EAKsB,EALtBA,YACAC,EAIsB,EAJtBA,YACAC,EAGsB,EAHtBA,UACAC,EAEsB,EAFtBA,aACAC,EACsB,EADtBA,eAEA,EAAwC5C,GAAS,GAAzC6C,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,gBACdC,EAAOC,OAAOrQ,GAASkQ,GAAcC,GAE3C,OACE,uBACEJ,UAAWO,aAAG,CAAC,2BAA4BP,IAC3C9H,EAAGA,EACHE,EAAGA,EACHoI,GAAIP,EACJQ,GAAIR,EACJ1I,MAAOA,EACPC,OAAQA,EACR6I,KAAMA,EACNK,OAAQZ,EACRC,YAAaA,EACbG,eAAgBA,KAKtBL,GAAYc,YAAc,cAEXd,U,mBCbTe,GAAY,SAAC,GAAD,IAAG1I,EAAH,EAAGA,EAAGE,EAAN,EAAMA,EAAN,MAAyC,CACzDF,IACAE,IACAyI,GAAI3I,EAHY,EAASX,MAIzBuJ,GAAI1I,EAJY,EAAgBZ,SAc5BuJ,GAAmB,SAACC,EAAaC,GAAd,OAPP,SAAC,GAAD,IAAG/I,EAAH,EAAGA,EAAGE,EAAN,EAAMA,EAAN,MAAkC,CAClDF,IACAE,IACAb,MAHgB,EAASsJ,GAGb3I,EACZV,OAJgB,EAAasJ,GAIhB1I,GAIb8I,EAtBwBC,EAsBGP,GAAUI,GAtBFI,EAsBUR,GAAUK,GAtBA,CACvD/I,EAAG1D,KAAKpB,IAAI+N,EAAKjJ,EAAGkJ,EAAKlJ,GACzBE,EAAG5D,KAAKpB,IAAI+N,EAAK/I,EAAGgJ,EAAKhJ,GACzByI,GAAIrM,KAAKnB,IAAI8N,EAAKN,GAAIO,EAAKP,IAC3BC,GAAItM,KAAKnB,IAAI8N,EAAKL,GAAIM,EAAKN,OAJJ,IAACK,EAAWC,GAwB/BC,GAAaC,4BAAiB,CAACC,KAAYC,OAE3CC,GAAU,SAAC,GASI,IARnBnE,EAQkB,EARlBA,MACA0C,EAOkB,EAPlBA,UAOkB,IANlB0B,uBAMkB,MANA,OAMA,MALlBC,iBAKkB,MALN,OAKM,MAJlBC,qBAIkB,MAJF,GAIE,MAHlBC,wBAGkB,MAHC,EAGD,MAFlBC,uBAEkB,MAFA,EAEA,MADlBC,iBACkB,MADN,0BACM,EACZC,EAAiBC,aAAc,SAACC,GAAD,OAAOA,EAAE3K,SACxC4K,EAAkBF,aAAc,SAACC,GAAD,OAAOA,EAAE1K,UAC/C,EAAyByK,aAAc,SAACC,GAAD,OAAOA,EAAEE,aAAhD,mBAAOC,EAAP,KAAWC,EAAX,KAAeC,EAAf,KACMC,EAAQP,aAAc,SAACC,GAAD,OAAOA,EAAEM,SAE/BC,EAAalC,aAAG,CAAC,sBAAuBP,IACxC0C,EAAeC,QAAY,OAALrF,QAAK,IAALA,OAAA,EAAAA,EAAO/F,QA7ChB,KA8CbqL,EAAgBD,QAAY,OAALrF,QAAK,IAALA,OAAA,EAAAA,EAAO9F,SA7ChB,KA8CdqL,EACJlB,aAAqBmB,SAAWnB,EAAY,kBAAMA,GAC9CoB,EACJrB,aAA2BoB,SACvBpB,EACA,kBAAMA,GACNsB,EACJpB,aAAyBkB,SAAWlB,EAAgB,kBAAMA,GACtDqB,EAAWT,GAASA,EAAMpO,OAC1B8O,EAAKC,YAAeX,GACpBY,EAAe,CACnBlL,GAAImK,EAAKE,EACTnK,GAAIkK,EAAKC,EACThL,MAAOyK,EAAiBO,EACxB/K,OAAQ2K,EAAkBI,GAEtBc,EAAeJ,EAAWlC,GAAiBmC,EAAIE,GAAUA,EACzDE,EAAcD,EAAa9L,MAAQmL,EACnCa,EAAeF,EAAa7L,OAASoL,EACrCY,EAAYhP,KAAKnB,IAAIiQ,EAAaC,GAClCE,EAAYD,EAAYd,EACxBgB,EAAaF,EAAYZ,EACzBe,EAAS,EAAIH,EACbtL,EAAImL,EAAanL,GAAKuL,EAAYJ,EAAa9L,OAAS,EAAIoM,EAC5DvL,EAAIiL,EAAajL,GAAKsL,EAAaL,EAAa7L,QAAU,EAAImM,EAC9DpM,EAAQkM,EAAqB,EAATE,EACpBnM,EAASkM,EAAsB,EAATC,EACtBzD,EACc,qBAAX9D,OAAyB,aAAe,qBAE3CL,EAAUkG,aAAc,SAACC,GAAD,OAAOA,EAAEnG,WACjC6H,EAAU3B,aAAc,SAACC,GAAD,OAAOA,EAAE0B,WAEjCC,EAAUC,iBAAuB,MAE/B1B,EAAc3J,cAAd2J,UAEF2B,EAASpL,uBACb,YAAwB,IAAD,gBAApBqL,MAAoB,GAAZ9L,EAAY,KAATE,EAAS,KACrBgK,EAAU,CACRlK,EAAGmK,GAAMnK,EAAIqK,EAASe,EACtBlL,EAAGkK,GAAMlK,EAAImK,EAASgB,EACtBU,KAAM1B,MAGV,CAACgB,EAAcD,EAAaf,EAAQF,EAAIC,EAAIF,IAGxC8B,EAAUvL,uBACd,YAAsD,IAAD,MAAlDwL,MAASC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,OAC5B,GADmD,EAAbC,OACtC,CACA,IAAMC,EAAOhQ,KAAKgQ,KAAKF,GAEvB,GAAiB,UAAAT,EAAQY,eAAR,eAAiBC,0BAA2B,CAC3DxM,EAAGkM,EACHhM,EAAGiM,GAFGnM,EAAR,EAAQA,EAAGE,EAAX,EAAWA,EAQL6L,EAAO1B,IADgB,IAAViC,EAAc,IAAe,IAATA,EAAa,EAAI,IAAM,GAE1DP,EAAOL,GAAWK,EAAOlI,GAC7BqG,EAAU,CACRlK,EAAGmK,EAAKmC,GAPCJ,EAAUlM,GAOC+L,EACpB7L,EAAGkK,EAAKkC,GAPCH,EAAUjM,GAOC6L,EACpBA,YAGJ,CAAC1B,EAAQqB,EAAS7H,EAASqG,EAAWC,EAAIC,IAGtCqC,EAAOtD,GAAW,CACtB6C,UACAH,WAGF,OACE,uBACEa,QAAO,UAAK1M,EAAL,YAAUE,EAAV,YAAeb,EAAf,YAAwBC,GAC/B8F,MAAOA,EACP0C,UAAWyC,EAHb,UAKGD,EACExI,QAAO,SAACrH,GAAD,OAAWA,EAAKkS,YACvB/M,KAAI,SAACnF,GAAD,OACH,eAAC,GAAD,CAEEuF,EAAGvF,EAAKmS,KAAK/O,SAASmC,EACtBE,EAAGzF,EAAKmS,KAAK/O,SAASqC,EACtBb,MAAO5E,EAAKmS,KAAKvN,MACjBC,OAAQ7E,EAAKmS,KAAKtN,OAClB8F,MAAO3K,EAAK2K,MACZ0C,UAAWgD,EAAkBrQ,GAC7B1C,MAAO4S,EAAclQ,GACrBsN,aAAc4B,EACd/B,YAAaiD,EAAoBpQ,GACjCoN,YAAa+B,EACb5B,eAAgBA,GAXXvN,EAAK6C,OAchB,oCACEuP,IAAKlB,EACL7D,UAAU,2BACV9H,EAAGkL,EAAOlL,EACVE,EAAGgL,EAAOhL,EACVb,MAAO6L,EAAO7L,MACdC,OAAQ4L,EAAO5L,OACf6I,KAAM0B,EACNiD,SAAS,UACT1H,MAAO,CACL2H,YAAa,SAEXN,UAMZlD,GAAQd,YAAc,UAEPc,I,kEAAAA,MCvLAyD,GAbOpT,aAAO2P,GAAP3P,CAAH,iTAIRP,GACFA,I,uGCDI4T,GAAkBrT,aAAOsT,KAAPtT,CAAH,oGAOfuT,GAAWvT,aAAOS,KAAPT,CAAH,2HAORwT,GAAgBxT,aAAOyT,KAAPzT,CAAH,uMAYpB0T,GAA2BC,aAAH,0KAEjBlU,GAAcA,GAGPA,IAMPmU,GAAgB5T,aAAO6T,KAAP7T,CAAH,qCACtB0T,IAGSI,GAAuB9T,KAAOC,IAAV,qCAC7ByT,IAGSK,GAAwB/T,aAAOgU,KAAPhU,CAAH,qCAC9B0T,IAGSO,GAAuBjU,KAAOC,IAAV,oIACpBR,GAAcA,IAMdyU,GAAuB,CAClCC,UAAW,IACXC,SAAU,IACVC,SAAU,QACV5O,MAAO,IACP6O,SAAU,QAGCC,GAAoBvU,aAAOwU,KAAPxU,CAAH,6DAChBP,GAGDgV,GAA4BzU,aAAO0U,KAAP1U,CAAH,mHAGzBP,GAAcA,IAIdkV,GAAkB3U,aAAO0U,KAAP1U,CAAH,gDAIf4U,GAAsB5U,aAAO6U,KAAMC,MAAb9U,CAAH,+FACjBP,GAAkBA,IAMpBsV,GAAkB/U,aAAOwE,KAAPxE,CAAH,8C,4DC3FtBgV,GAAiCrB,aAAH,gGAMvBsB,GAAwBjV,KAAOC,IAAV,yHAC9B+U,GACSvV,GAAcA,IAMdyV,GAAuBlV,KAAOC,IAAV,+DAC7B+U,GACSvV,GAAcA,IAGd0V,GAA0BnV,KAAOC,IAAV,wHAChC+U,GACSvV,GAAcA,IAMd2V,GAAepV,aAAOwE,KAAPxE,CAAH,wECiBVqV,GAvCyB,SAAC,GAA0B,IAAxB1H,EAAuB,EAAvBA,iBAUzC,OACE,gBAACsH,GAAD,WACE,eAACG,GAAD,CACEpR,KAAK,UACL+C,MAAM,QACN/I,KAAK,SACLoJ,KAAM,eAACkO,GAAA,EAAD,IACNtO,QAfmB,WACvBhK,IACGuY,KAAKC,SAASC,UACdC,OAAM,SAACC,GAAD,OAAW/M,QAAQC,IAAI,qBAAsB8M,OAOpD,SAOG1W,IAGH,eAACmW,GAAD,CACEpR,KAAK,UACL+C,MAAM,QACN/I,KAAK,SACLoJ,KAAM,eAACwO,GAAA,EAAD,IACN5O,QAAS,kBAAM2G,GAAiB,IALlC,SAOG1O,SCfM4W,GAlBiB,WAC9B,OACE,gBAACX,GAAD,WACE,eAACE,GAAD,CAActP,OAAO,SAASwF,KAAMlM,GAAoB0W,OAAK,EAA7D,SACG7W,IAGH,eAACmW,GAAD,CAActP,OAAO,SAASwF,KAAMlM,GAAe0W,OAAK,EAAxD,SACG7W,IAGH,eAACmW,GAAD,CAActP,OAAO,SAASwF,KAAMlM,GAAmB0W,OAAK,EAA5D,SACG7W,QC+BM8W,GAtCuB,WACpC,MAAwDnO,mBAAS,OAAjE,mBAAOoO,EAAP,KAA6BC,EAA7B,KAEMC,EAA6B,SAACC,G5BHL,IAACC,K4BIZD,E5BHblZ,MAAM,0CAA2C,CACtDC,OAAQ,OACRmZ,QAAS,CACP,eAAgB,oBAElBC,KAAM7L,KAAKI,UAAU,CAAE0L,eAAgBH,O4BDpCb,KAAKvY,KACLuY,KAAKC,SAASC,UACdC,OAAM,SAACC,GAAD,OAAW/M,QAAQC,IAAI,qBAAsB8M,OAOxD,OACE,gBAACR,GAAD,WACE,eAAC,KAAML,MAAP,CAAa0B,SAAO,EAApB,SACE,eAAC,KAAD,CACEC,KAAK,iBACL1N,MAAOiN,EACPzI,SAVR,SAAsBC,GACpByI,EAAwBzI,EAAE1H,OAAOiD,YAY/B,wBACA,wBACA,eAACqM,GAAD,CACEpR,KAAK,UACL+C,MAAM,QACN/I,KAAK,SACLoJ,KAAM,eAACkO,GAAA,EAAD,IACNtO,QAAS,kBAAMkP,EAA2BF,IAL5C,SAOG,yB,iDCyKMU,GAlMY,SAAC,GAKrB,IAJLC,EAII,EAJJA,wBACAC,EAGI,EAHJA,yBACAjP,EAEI,EAFJA,cACAkP,EACI,EADJA,iBAEA,EAA+BlQ,cAAvBmQ,EAAR,EAAQA,UAAW5P,EAAnB,EAAmBA,QAGb6P,EAAoB,yCAAG,uBAAA3U,EAAA,sEACrByU,GAAkBlP,GADG,OAK3BgP,EAAwBK,EAAoB,GAAGvV,KAAKC,OACpDuV,EAAeD,EAAoB,GAAGvV,KAAKC,OAE3CuF,YAAW,kBAAMC,EAAQ,CAAEC,SAAU,QAAQ,GARlB,2CAAH,qDAYpB6P,EAAsBhW,qBAAWkW,IAEvC,EAA4DlW,qBAC1D7D,GADME,EAAR,EAAQA,sBAAuBoL,EAA/B,EAA+BA,yBAKzBiI,EAAQP,aAAc,SAACgH,GAAD,OAAWA,EAAMzG,SAG7C,EAAsC9I,qBAAtC,mBAAOwP,EAAP,KAAoBH,EAApB,KAGA,EAA0CrP,mBAAS,IAAnD,mBAAOyP,EAAP,KAAsBC,EAAtB,KAGA,EAA8C1P,wBAAS2P,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAOA,IA2CMC,EAAc,SAAChU,GACnB,IAAMiU,EAAUjU,EAAG3B,MAAM,KACzB,OAAsB,GAAlB4V,EAAQrV,OACH,MAETqV,EAAQC,MACDD,EAAQ5U,KAAK,OAIhB8U,EAAS,SAAChX,GACd,OAA8B,GAAvBA,EAAKY,KAAK0C,WAwBnB,OAJA0D,qBAAU,WAfJmP,EAAoB1U,OAAS,GAC/BgV,EACEN,EAAoBhR,KAAI,SAACnF,GACvB,MAAO,CACL6C,GAAI7C,EAAK6C,GACToU,IAAKJ,EAAY7W,EAAK6C,IACtBhG,MAAOmD,EAAKY,KAAKC,MACjBqH,MAAOlI,EAAK6C,GACZmU,OAAQA,EAAOhX,UAStB,CAAC6P,IAGF,uCACE,gBAACuD,GAAD,WACE,eAAC,KAAD,CAAQ8D,gBAAgB,EAAOxK,SAAUwJ,IACzC,gBAACpC,GAAD,WACE,eAACqD,GAAA,EAAD,IADF,qBAKDrQ,EACC,eAAC8M,GAAD,iFAIA,eAACA,GAAD,sFAKiB,IAAlB9M,EACC,uCACE,eAACoM,GAAD,CACEkE,YAAU,EACVlP,MAAOqO,EACPc,cAAehE,GACfiE,YAAY,sBACZ5K,SAvEsB,SAAC7J,GAC/B,IAAMiG,EAAQqN,EAAoBpN,WAAU,SAAC/I,GAAD,OAAUA,EAAK6C,IAAMA,KAE3DhC,EADOsV,EAAoBrN,GACdlI,KAAKC,MAExBuV,EAAevV,GACfiV,EAAwBjV,IAkEhB0W,oBAAkB,EAClBC,sBAAsB,EACtBC,SAAUjB,IAGZ,eAAC5C,GAAD,oDAIA,gBAACG,GAAD,CAAqB4B,SAAO,EAA5B,UACE,eAAC,KAAD,CAAOjJ,SAxHjB,SAA2BC,GACzBiK,EAAmBjK,EAAE1H,OAAOiD,UAwHpB,eAACgM,GAAD,CACE/N,QAAS,WACP4P,EAAyBY,IAE3BxT,KAAK,UAJP,gCAWJ,eAAC+P,GAAD,CACEkE,YAAU,EACVlP,MAAOqO,EACPc,cAAehE,GACfiE,YAAY,uBACZ5K,SAvHS,SAACxE,GAChBkO,EAAelO,GACf,IAAMwP,EAAMxP,EAAMhH,MAAM,KAClB6B,EAAgB2U,EAAIA,EAAIjW,OAAS,GACjCqH,EAAQtM,EAAsBuM,WAClC,SAACnG,GAAD,OAAeA,EAAUC,KAAOqF,KAEvB,YAAO1L,GACZwM,OAAOF,EAAO,GACpBlB,EAAyB,CACvB,CACE/E,GAAIqF,EACJnF,cAAeA,EACf2F,QAAQ,EACRC,QAAQ,KA3BI,SAAC9F,GACjB,IAAMiG,EAAQ+G,EAAM9G,WAAU,SAAC/I,GAAD,OAAUA,EAAK6C,IAAMA,KAC7C7C,EAAO6P,EAAM/G,GACbvD,EAAIvF,EAAKmS,KAAK/O,SAASmC,EAAIvF,EAAKmS,KAAKvN,MAAQ,EAC7Ca,EAAIzF,EAAKmS,KAAK/O,SAASqC,EAAIzF,EAAKmS,KAAKtN,OAAS,EAIpDoR,EAAU1Q,EAAGE,EAHA,GAyBbkS,CAAUzP,IAuGJqP,oBAAkB,EAClBC,sBAAsB,EACtBC,SAAUjB,QCrHLoB,GAlEqB,WAElC,MAAwDzX,qBACtD1B,IADMa,EAAR,EAAQA,oBAAqBuY,EAA7B,EAA6BA,uBAmB7B,OACE,uCACE,gBAAC9E,GAAD,CACExJ,aACGjK,EAAoBZ,KAEjBY,EAAoBZ,KADpB1B,EAGN0P,SAAU,SAACxE,GAAD,OACR2P,EAAuB,6BAClBvY,GADiB,IAEpBZ,KAAMwJ,MAGVmP,cAAehE,GAZjB,UAcE,eAAC,KAAOyE,OAAR,CAAe5P,MAAOlL,EAAtB,SACGL,IAGH,eAAC,KAAOmb,OAAR,CAAe5P,MAAOlL,EAAtB,SACGL,IAGH,eAAC,KAAOmb,OAAR,CAAe5P,MAAOlL,EAAtB,SACGL,OAIJ2C,EAAoBZ,OAAS1B,GAC5B,eAACiW,GAAD,UACE,eAAC,KAAD,CACE8E,YAAa,WACbT,YAAa,gBACb/N,aAAcjK,EAAoBX,aAClC+N,SAjDyB,SAACC,GAC9BA,EAAE1H,OAAOiD,MAAQ,EACnB2P,EAAuB,6BAClBvY,GADiB,IAEpBX,aAAc,KAGhBkZ,EAAuB,6BAClBvY,GADiB,IAEpBX,aAAcgO,EAAE1H,OAAOiD,UAyCnB/E,KAAK,SACL1C,IAAI,YC8CDuX,GAzFS,SAAC,GAOlB,IANLC,EAMI,EANJA,eACAnL,EAKI,EALJA,iBACAgJ,EAII,EAJJA,wBACAC,EAGI,EAHJA,yBACAjP,EAEI,EAFJA,cACAkP,EACI,EADJA,iBAEMnQ,EAAoBC,cAQ1B,OANAkB,qBAAU,WACRZ,YAAW,WACTP,EAAkBQ,QAAQ,CAAEC,SAAU,QACrC,KACF,CAAC2R,IAGF,qCACE,gBAACzF,GAAD,CACE0F,UAAWD,EACXE,eAAgB,EAChBvT,M3BhDuB,I2B6CzB,UAKE,eAAC8N,GAAD,CAAUrP,MAAO,EAAjB,SAAqB7E,KAErB,gBAAC,KAAD,CAAM4Z,MAAM,OAAO1Z,KAAK,SAASzB,gBAAiBA,EAAlD,UACE,eAAC0V,GAAD,CAEE9V,MAAO2B,GAAwB3B,MAC/B0J,KAAM,eAAC8R,GAAA,EAAD,IAHR,SAKE,eAAC,GAAD,CACEvC,wBAAyBA,EACzBC,yBAA0BA,EAC1BjP,cAAeA,EACfkP,iBAAkBA,KARfxX,GAAwBjB,KAY/B,eAACmW,GAAD,IAEA,eAACf,GAAD,CAEE9V,MAAO2B,GAAsB3B,MAC7B0J,KAAM,eAAC+R,GAAA,EAAD,IAHR,SAKE,eAAC,GAAD,KAJK9Z,GAAsBjB,KAO7B,eAACmW,GAAD,IAEA,gBAACf,GAAD,CAEE9V,MAAO2B,GAAyB3B,MAChC0J,KAAM,eAACgS,GAAA,EAAD,IAHR,UAKE,eAAC,GAAD,CAA0BzL,iBAAkBA,IAC5C,eAAC6F,GAAD,CAEE9V,MAAO2B,GAAwB3B,MAC/B0J,KAAM,eAACyF,GAAA,EAAD,IAHR,SAKE,eAAC,GAAD,KAJKxN,GAAwBjB,OAN1BiB,GAAyBjB,KAchC,eAACmW,GAAD,IACA,eAACf,GAAD,CAEE9V,MAAO,sBACP0J,KAAM,eAACiS,GAAA,EAAD,IAHR,SAKE,eAAC,GAAD,KAJK,iCC3FJC,GAAqBtZ,aAAOuZ,KAAPvZ,CAAH,qIACd,mBACM,IADN,EAAG8Y,eAChB,U5BN2B,I4BM3B,MAAoD,OAM3CU,GAA0BxZ,aAAOwE,KAAPxE,CAAH,sGAExBP,IACF,gBAAGqZ,EAAH,EAAGA,eAAH,MACN,WAAmB,IAAnBA,EACOrZ,GACAga,IAFP,SAMSC,GAAuB1Z,aAAOwE,KAAPxE,CAAH,qGAExB,gBAAG2Z,EAAH,EAAGA,iBAAH,MACL,WAAqB,IAArBA,EAA0C,KAAXla,GAAyBA,GAAxD,QACOA,ICwIIma,GA/IO,SAAC,GAUhB,IATLC,EASI,EATJA,SACA5O,EAQI,EARJA,WACAtD,EAOI,EAPJA,cACAkP,EAMI,EANJA,iBACAiD,EAKI,EALJA,cACAnD,EAII,EAJJA,wBACAC,EAGI,EAHJA,yBACAxJ,EAEI,EAFJA,8BACAC,EACI,EADJA,+BAGA,EAA0DlD,IACxD,EACA,0BAFF,mBAAO+C,EAAP,KAA8BC,EAA9B,KAMA,EAA0CvF,oBACvCsF,GADH,mBAAOQ,EAAP,KAAsBC,EAAtB,KAKA,EAA4C/F,oBAAS,GAArD,mBAAOkR,EAAP,KAAuBiB,EAAvB,KAGA,EAAgDnS,oBAAS,GAAzD,mBAAO+R,EAAP,KAAyBK,EAAzB,KAGQ3c,EAA0B2D,qBAAW7D,GAArCE,sBAwBR,OACE,gBAAC,KAAD,WACE,gBAAC,IAAD,WACE,eAAC,GAAD,CACEsQ,iBAAkBA,EAClBoM,kBAAmBA,EACnBpS,cAAeA,EACfkP,iBAAkBA,EAClBiC,eAAgBA,EAChBnC,wBAAyBA,EACzBC,yBAA0BA,IAG5B,eAAC4C,GAAD,CACEV,eAAgBA,EAChB1R,KAAM,eAAC6S,GAAA,EAAD,CAAoBC,OAAQpB,GAAkB,MACpD9U,KAAK,UACL+C,MAAM,QACN/I,KAAK,SACLgJ,QAAS,WACP+S,GAAmBjB,IAPvB,SAUGA,EACC,gCAAO7Z,GAAiBC,OAExB,gCAAOD,GAAiBE,SAI5B,eAACma,GAAD,CAAoBR,eAAgBA,EAApC,SACGe,IAGH,eAAC,KAAD,CACEpU,MAAO,IACPyF,QAASD,EAAWC,QACpBiP,UAAU,EACVC,UAAQ,EACRxM,QAAS,kBAAMkM,EAAc,CAAE5O,SAAS,EAAOrK,KAAM,QACrDnD,MAAOuN,EAAWpK,KAAOoK,EAAWpK,KAAKY,KAAKC,MAAQ,GANxD,SAQE,eAAC,GAAD,CAAkBuJ,WAAYA,MAGhC,eAACyO,GAAD,CACEC,iBAAkBA,EAClBvS,KAAM,eAAC6S,GAAA,EAAD,CAAoBC,OAAQP,GAAoB,MACtD3V,KAAK,UACL+C,MAAM,QACN/I,KAAK,SACLgJ,QAAS,WACPgT,GAAqBL,IAPzB,SAUGA,EACC,gCAAO1a,GAAiBE,OAExB,gCAAOF,GAAiBC,SAG3Bya,GACC,eAAC,GAAD,CAAe9J,UA5EQ,SAAChP,GAC9B,OAV+B,SAACA,GAChC,OAAOxD,EAAsBmG,MAAK,SAACC,GAAD,OAChC5C,EAAK6C,GAAGC,MAAR,UACKF,EAAUG,cADf,gBACoCH,EAAUG,cAD9C,SAQEyW,CAAyBxZ,GACpB,IAAIM,IAAU,CACnBC,UAAW,GACXC,IAAK,CAAEC,IAAK,EAAGC,IAAK,OACnBC,IAAIX,EAAKY,KAAKC,OAEV,IAAIP,IAAU,CACnBC,UAAW,GACXC,IAAK,CAAEC,IAAK,EAAGC,IAAK,OACnBC,IAAIX,EAAKY,KAAKC,aAsEjB,eAAC,IAAD,UACE,eAAC,GAAD,CACE0L,8BAA+BA,EAC/BC,+BAAgCA,EAChCK,cAAeA,EACfC,iBAAkBA,EAClBT,sBAAuBA,EACvBC,yBAA0BA,U,UCpIvB+J,GAAsB3P,IAAMnK,cAAc,IA6FxCkd,GA3FH,WACV,MAA0C1S,mBAAS,MAAnD,mBAAO3C,EAAP,KAAsBsV,EAAtB,KAGA,EAAoC3S,mBAAS,CAAEsD,SAAS,EAAOrK,KAAM,OAArE,mBAAOoK,EAAP,KAAmB6O,EAAnB,KAGA,EAAwClS,mBAAS,IAAjD,mBAAO4S,EAAP,KAAqBC,EAArB,KAGQta,EAAwBa,qBAAW1B,IAAnCa,oBAGR,EAAwDyH,mBAAS,MAAjE,mBAAOH,EAAP,KAA6BkP,EAA7B,KAGA,EAA0D/O,mBAAS,MAAnE,mBAAOF,EAAP,KAA8BkP,EAA9B,KAGA,EAAsDhP,wBAAS2P,GAA/D,mBAAOnX,EAAP,KAA4B8E,EAA5B,KAGA,EAA0C0C,oBAAS,GAAnD,mBAAOD,EAAP,KAAsBkP,EAAtB,KAGA,EACE1M,IAAe,EAAO,iCADxB,mBAAOiD,EAAP,KAAsCC,EAAtC,KAGMqN,GAC8B,IAAlCtN,EACI9P,EACAA,EAwBN,OAtBAuK,qBAAU,WlChDH5K,MAAM,oCAAoCsY,MAAK,SAACoF,GAAD,OAASA,EAAIC,UkCmD9DrF,MAAK,SAAC9T,GACL,IAAMiP,ECpDU,SAACjP,EAAMqY,EAAeW,GAC5C,IAAM/J,EAAQjP,EAAKiP,MAAM1K,KAAI,SAACnF,GAC5B,OAAO,6BACFA,GADL,IAEEY,KAAK,6BACAZ,EAAKY,MADN,IAEFqC,iBAAkB,SAACjD,GAAD,OAChBiZ,EAAc,CAAE5O,SAAS,EAAMrK,KAAMA,YAQ7C,OAFA4Z,EAAgB/J,GAETA,EDqCamK,CAASpZ,EAAMqY,EAAeW,GACtCK,EClCU,SAACrZ,GAqBvB,OApBcA,EAAKqZ,MAAM9U,KAAI,SAAC+U,GAC5B,OAAO,6BACFA,GADL,IAEEC,eAAgB,CAAC,EAAG,GACpBC,oBAAqB,EACrBC,aAAc,CACZ3M,KAAM,UACN4M,YAAa,IAEfC,WAAY,CACV7M,KAAM,QAER/C,MAAO,CAELoD,OAAQmM,EAAKxc,YAAc,UAAYwc,EAAKrZ,MAAQ,UAAY,OAChEuM,YAAa,YDkBCoN,CAAS5Z,IEnDM,WACnC,IAAMrD,EAAG,cAAUkd,KAAKC,OAClBC,EACJ,eAAC,KAAD,CAAQxX,KAAK,UAAUhG,KAAK,QAAQgJ,QAAS,kBAAMyU,KAAaC,MAAMtd,IAAtE,0BAIIV,EAAQ,iDAEd+d,KAAY,QAAY,CACtBE,QAASje,EACTke,YACE,uEACFJ,MACApd,MACA+I,SAAU,GACVyG,QAAS8N,QFsCLG,GAEAtB,EACEvV,GALS,GAMFzB,OAAOmN,EAAOoK,GACnBJ,EACAxV,EACA/E,OAILuV,MAAM9M,QAAQC,OAChB,IAGD,eAACqO,GAAoBpO,SAArB,CAA8BC,MAAOyR,EAArC,SACE,eAAC,GAAD,CACEvP,WAAYA,EACZtD,cAAeA,EACfkP,iBAAkBA,EAClBF,wBAAyBA,EACzBC,yBAA0BA,EAC1BkD,cAAeA,EACf1M,8BAA+BA,EAC/BC,+BAAgCA,EARlC,SAUGpI,EACC,eAAC,GAAD,CACEwC,qBAAsBA,EACtBC,sBAAuBA,EACvBtH,oBAAqBA,EACrBuH,cAAeA,EACfkP,iBAAkBA,EAClB5R,cAAeA,EACfC,uBAAwBA,IAG1B,eAAC,IAAD,CAAM4W,UAAU,EAAhB,SACE,eAAC,IAAD,CACEH,QAAQ,kBACRC,YAAY,2CACZ5X,KAAK,mBG3EJ+X,GAlBqB,SAAC,GAAkB,IAAhBlC,EAAe,EAAfA,SACrC,EAAsD1P,GACpD,CACE5K,KAAM1B,EACN2B,aAAc,KAEhB,uBALF,mBAAOW,EAAP,KAA4BuY,EAA5B,KAQA,OACE,eAAC,GAA2B5P,SAA5B,CACEC,MAAO,CAAE5I,sBAAqBuY,0BADhC,SAGGmB,KCFQmC,GAZuB,SAAC,GAAkB,IAAhBnC,EAAe,EAAfA,SACvC,EAA0DjS,mBAAS,IAAnE,mBAAOvK,EAAP,KAA8BoL,EAA9B,KAEA,OACE,eAAC,EAA6BK,SAA9B,CACEC,MAAO,CAAE1L,wBAAuBoL,4BADlC,SAGGoR,KCCQoC,GARG,SAAC,GAAuB,IAArBpC,EAAoB,EAApBA,SACnB,OACE,eAAC,GAAD,UACE,eAAC,GAAD,UAA8BA,OCKrBqC,GAZS,SAACC,GACnBA,GAAeA,aAAuBnL,UACxC,8BAAqBuE,MAAK,YAAkD,IAA/C6G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOD,GACPE,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAQL,OCDdM,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,UACE,eAAC,GAAD,QAGJC,SAASC,eAAe,SAM1BX,O","file":"static/js/main.c4283d4a.chunk.js","sourcesContent":["export const getParsedData = () => {\n  return fetch('http://localhost:4444/parsedData').then((res) => res.json());\n};\n\nexport const recompile = () => {\n  return fetch('http://localhost:4444/recompile', {\n    method: 'POST',\n  });\n};\n\nexport const makeConfiguration = (customRootComponenets) => {\n  return fetch('http://localhost:4444/makeConfiguration', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ rootComponents: customRootComponenets }),\n  });\n};\n","import { createContext } from 'react';\n\nconst HighlightedComponentsContext = createContext({\n  highlightedComponents: [],\n});\n\nexport default HighlightedComponentsContext;\n","export const GraphLabels = {\n  leftToRight: 'LR',\n  topToBottom: 'TB',\n};\n\nexport const HandleLabels = {\n  left: 'left',\n  right: 'right',\n  bottom: 'bottom',\n  top: 'top',\n  source: 'source',\n  target: 'target',\n};\n\nexport const DropDownLabels = {\n  white: 'White',\n  size: 'Proportional Size based on Lines',\n  color: 'Colorization based on Lines',\n};\n\nexport const DetailsLabels = {\n  freq: {\n    title: 'Frequency',\n    text: 'This component is used:',\n    stext: 'times.',\n  },\n  path: 'Path',\n  code: 'Code',\n};\n\nexport const BackgroundLabels = {\n  size: 'proportional_size',\n  loc: 'loc_reference',\n  white: 'white',\n};\n\nexport const defaultOpenKeys = [\n  'search-component',\n  'node-visualization',\n  'navigation-actions',\n];\n\nexport const HelpPanelLabels = {\n  title: 'Legend',\n  thanks: 'Thank you for installing react-bratus',\n  purpose: 'Hopefully this tool can help you navigate your React.js code base.',\n  nodes: {\n    title: 'Node visualization options',\n    text: 'Each node in the visualization represents a user-defined React component. React-Bratus provides three different ways of visualizing the nodes:',\n    size: {\n      header: 'Proportional Size based on Lines of Code',\n      text: 'Depending on the layout of the tree the height or width of each node is proportional to the lines of code in that component.',\n      img: './images/proportional_size.png',\n    },\n    color: {\n      header: 'Colorization based on Lines of Code',\n      text: ' Depending on the lines of code of a component, its color gets lighter or darker. React-Bratus uses DarkOrange(255,140,0) to achieve this scaling.',\n      img: './images/lines_colorization.png',\n      key: 'nodes-color-scale',\n    },\n    white: {\n      header: 'White',\n      text: 'White provides a simple overview of your component hierarchy, without any visualization filters applied on it.',\n      img: './images/white.png',\n    },\n  },\n  edges: {\n    title: 'Edge types',\n    text: 'Each edge in the visualization indicates a ”renders” relationship where the source node renders the target node. There are three types of those relationships:',\n    default: {\n      header: 'Components rendered by default',\n      text: 'Black edges denote that these comoponents are always rendered by their parent.',\n      img: './images/default.png',\n      key: 'default-edges',\n    },\n    conditional: {\n      header: 'Conditionally rendered components',\n      text: 'Conditionally rendered based on Javascript control flow (orange-dashed lines) indicate a component rendered within conditional statements. In the label, you can see the conditional type (ternary, &&, if) and the condition that needs to be satisfied for the component to be rendered.',\n      img: './images/conditional.png',\n    },\n    router: {\n      header: 'Components rendered by React-Router',\n      text: 'Conditionally rendered by the react-router-dom rendered component given a specific path, represented as the label on the edge',\n      img: './images/router.png',\n    },\n  },\n  pref: {\n    title: 'Preferences',\n    help: 'Hide Help on Start Up',\n    tree: 'Set vertical layout as default',\n    key: 'preferences',\n  },\n  links: {\n    title: 'Useful Links',\n    repo: 'Github repo',\n    repoUrl: 'https://github.com/react-bratus/react-bratus',\n    changeLog: 'Changelog',\n    changelogUrl: 'https://github.com/react-bratus/react-bratus#changelog',\n    demo: 'v2.0.7 Demo',\n    demoUrl: 'https://www.youtube.com/watch?v=GBzsOTrZ304',\n  },\n};\n\nexport const ButtonLabels = {\n  vertical: 'Vertical Layout',\n  horizontal: 'Horizontal Layout',\n  feedback: 'Give feedback',\n  bug: 'Submit bug',\n  feature: 'Suggest new feature',\n  recompile: 'Recompile Project',\n  help: 'Open Legend',\n  nav: {\n    show: 'Show Nav',\n    hide: 'Hide Nav',\n  },\n  map: {\n    show: 'Show Map',\n    hide: 'Hide Map',\n  },\n};\n\nexport const UrlLabels = {\n  feature:\n    'https://github.com/react-bratus/react-bratus/issues/new?assignees=&labels=enhancement&template=feature_request.md&title=%5BFeature%5D',\n  bug: 'https://github.com/react-bratus/react-bratus/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBUG%5D+',\n  feedback:\n    'https://github.com/react-bratus/react-bratus/issues/new?assignees=&labels=feedback&template=feedback.md&title=%5BFeedback%5D',\n};\n\nexport const NavigationLabels = {\n  title: 'React-bratus',\n  search: {\n    title: 'Search for component',\n    key: 'search-component',\n  },\n  node: {\n    title: 'Node visualization options',\n    key: 'node-visualization',\n  },\n  actions: {\n    title: 'Actions',\n    key: 'navigation-actions',\n  },\n  github: {\n    title: 'Contribute',\n    key: 'github-actions',\n  },\n};\n","import { createContext } from 'react';\nimport { BackgroundLabels } from '../utils/constants/constants';\n\nconst ComponentBackgroundContext = createContext({\n  mode: BackgroundLabels.white,\n  locReference: 300,\n});\n\nexport default ComponentBackgroundContext;\n","export const baseUnit = 12;\nexport const navigationWidth = 350;\nexport const borderRadius = 8;\nexport const nodeWidth = 180;\nexport const baseNodeHeight = 100;\nexport const nodeNameLength = 13;\nexport const horizontalViewNodeHeight = baseNodeHeight / 2.3;\n","// Source: https://gist.github.com/whitlockjc/9363016\nexport const rgbaToHex = (rgba) => {\n  var inParts = rgba.substring(rgba.indexOf('(')).split(','),\n    r = parseInt(trim(inParts[0].substring(1)), 10),\n    g = parseInt(trim(inParts[1]), 10),\n    b = parseInt(trim(inParts[2]), 10),\n    a = parseFloat(\n      trim(inParts[3].substring(0, inParts[3].length - 1))\n    ).toFixed(2);\n\n  var outParts = [\n    r.toString(16),\n    g.toString(16),\n    b.toString(16),\n    Math.round(a * 255)\n      .toString(16)\n      .substring(0, 2),\n  ];\n\n  // Pad single-digit output values\n  outParts.forEach(function (part, i) {\n    if (part.length === 1) {\n      outParts[i] = '0' + part;\n    }\n  });\n\n  return '#' + outParts.join('');\n};\n\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/gm, '');\n};\n","import { Col } from 'antd';\nimport Title from 'antd/lib/typography/Title';\nimport styled from 'styled-components';\nimport { BackgroundLabels, GraphLabels } from '../../utils/constants/constants';\nimport {\n  baseUnit,\n  nodeWidth,\n  horizontalViewNodeHeight,\n} from '../../utils/constants/units';\n\n// The height and the width of the tree nodes, are dynamically adjusted based on the\n// layout of the tree and the node visualization options that the user chooses.\nexport const StyledNode = styled.div`\n  height: ${({ linesOfCode, componentBackground, treeLayoutDirection }) => {\n    if (componentBackground.mode === BackgroundLabels.size) {\n      if (treeLayoutDirection === GraphLabels.topToBottom) {\n        return `${horizontalViewNodeHeight + linesOfCode}px`;\n      }\n    }\n    return '75px';\n  }};\n  width: ${({ linesOfCode, componentBackground, treeLayoutDirection }) => {\n    if (componentBackground.mode === BackgroundLabels.size) {\n      if (treeLayoutDirection === GraphLabels.leftToRight) {\n        return `${nodeWidth + linesOfCode}px`;\n      }\n    }\n    return `${nodeWidth}px`;\n  }};\n  padding: ${baseUnit}px;\n  border-radius: 100px;\n  border: ${({ isHighlighted }) => {\n    return isHighlighted ? '1.5px solid black' : '1px solid black';\n  }};\n  box-shadow: ${({ isHighlighted }) => {\n    return isHighlighted ? '0px 0px 16px 2.5px rgba(255,194,25,0.76)' : 'none';\n  }};\n  background-color: ${({ bgColor }) => bgColor};\n  color: ${({ fontColor }) => fontColor};\n  position: relative;\n`;\n\nexport const StyledTitle = styled(Title)`\n  color: ${({ color }) => color};\n  font-weight: 600;\n  font-size: 17px;\n  line-height: 1.7px;\n  margin-bottom: 5px;\n`;\n\nexport const StyledNodeContent = styled(Col)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n","import ColorHash from 'color-hash';\nimport React, { useContext } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport ComponentBackgroundContext from '../../contexts/ComponentBackgroundContext';\nimport HighlightedComponentsContext from '../../contexts/HighlightedComponentsContext';\nimport {\n  BackgroundLabels,\n  GraphLabels,\n  HandleLabels,\n} from '../../utils/constants/constants';\nimport { nodeNameLength } from '../../utils/constants/units';\nimport { rgbaToHex } from '../../utils/functions/rgbaToHex';\nimport { GraphDirectionContext } from '../ComponentTree/ComponentTree';\nimport { StyledNode, StyledNodeContent, StyledTitle } from './ComponentNode.sc';\n\nconst ComponentNode = (node) => {\n  const { highlightedComponents } = useContext(HighlightedComponentsContext);\n\n  const { componentBackground } = useContext(ComponentBackgroundContext);\n\n  // We need the layout to pass it as props to the styled component.\n  const treeLayoutDirection = useContext(GraphDirectionContext);\n\n  const isHighlighted = () => {\n    return highlightedComponents.some((component) =>\n      node.id.match(\n        `${component.componentName}:+.+|${component.componentName}$`\n      )\n    );\n  };\n\n  // Getting the background of the node, depending on the background mode.\n  const getBgColor = () => {\n    if (componentBackground.mode === BackgroundLabels.size) {\n      const hex = new ColorHash({\n        lightness: 0.8,\n        hue: { min: 0, max: 366 },\n      }).hex(node.data.label);\n      return hex;\n    } else if (componentBackground.mode === BackgroundLabels.loc) {\n      return rgbaToHex(\n        `rgba(255,140,0,${\n          node.data.linesOfCode / componentBackground.locReference > 1\n            ? 1\n            : node.data.linesOfCode / componentBackground.locReference\n        })`\n      );\n    } else {\n      return '#FFFFFFFF';\n    }\n  };\n\n  // Getting the font color of the node, depending on the background color.\n  const getFontColor = () => {\n    const bgColor = getBgColor();\n    const color =\n      bgColor.charAt(0) === '#'\n        ? bgColor.substring(bgColor.length === 9 ? 2 : 1, 7)\n        : bgColor;\n    const r = parseInt(color.substring(0, 2), 16); // hexToR\n    const g = parseInt(color.substring(2, 4), 16); // hexToG\n    const b = parseInt(color.substring(4, 6), 16); // hexToB\n    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000' : '#fff';\n  };\n\n  // Dynamically change the position of the handles depending on\n  // the layout of the tree.\n  const layoutTargetHandlePosition =\n    treeLayoutDirection === GraphLabels.leftToRight\n      ? HandleLabels.left\n      : HandleLabels.top;\n\n  const layoutSourceHandlePosition =\n    treeLayoutDirection === GraphLabels.leftToRight\n      ? HandleLabels.right\n      : HandleLabels.bottom;\n\n  // Display the 13 first chars of the node name, for those that are long.\n  const truncateNodeName = (nodeName, nameLength) => {\n    return nodeName.length > nameLength\n      ? nodeName.slice(0, nameLength - 1).concat('...')\n      : nodeName;\n  };\n\n  const truncatedNodeName = truncateNodeName(node.data.label, nodeNameLength);\n\n  return (\n    <StyledNode\n      linesOfCode={node.data.linesOfCode}\n      componentBackground={componentBackground}\n      treeLayoutDirection={treeLayoutDirection}\n      isHighlighted={isHighlighted()}\n      bgColor={getBgColor}\n      fontColor={getFontColor()}\n      onDoubleClick={() => node.data.onShowNodeDetail(node)}\n    >\n      {node.data.inDegree > 0 && (\n        <Handle\n          type={HandleLabels.target}\n          position={layoutTargetHandlePosition}\n        />\n      )}\n\n      <StyledNodeContent>\n        <StyledTitle color={getFontColor} level={5}>\n          {truncatedNodeName}\n        </StyledTitle>\n      </StyledNodeContent>\n\n      {node.data.outDegree > 0 && (\n        <Handle\n          type={HandleLabels.source}\n          position={layoutSourceHandlePosition}\n        />\n      )}\n    </StyledNode>\n  );\n};\n\nexport default ComponentNode;\n","import styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button } from 'antd';\nimport { Controls } from 'react-flow-renderer';\n\nexport const LayoutButtonsWrapper = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\nexport const StyledFontAwesomeIcon = styled(FontAwesomeIcon)`\n  margin-left: 7px;\n`;\n\n// Make button pressing more realistic\nexport const LayoutButton = styled(Button)`\n  &:active {\n    transform: translateY(4px);\n  }\n`;\n\nexport const ZoomControlButtons = styled(Controls)`\n  bottom: 70px;\n`;\n","import dagre from 'dagre';\nimport { isEdge, isNode } from 'react-flow-renderer';\nimport { BackgroundLabels, GraphLabels } from '../constants/constants';\nimport { baseNodeHeight, nodeWidth } from '../constants/units';\n\nvar aditionalSpaceMultiplier = 2;\n\n// Initialize graph.\nconst dagreGraph = new dagre.graphlib.Graph();\n\n// Default to assigning a new object as a label for each new edge.\ndagreGraph.setDefaultEdgeLabel(() => ({}));\n\n/**\n * SOS: This function is complicated, check dagre documentation and dagre examples to get more information about it.\n * @param {*} nodesAndEdges the nodes and edges of the tree.\n * @param {*} treeLayoutDirection The layout direction of the tree. Read more here: https://g6.antv.vision/en/docs/api/graphLayout/dagre. It is set to a value, as this is the way JS understands optional params.\n * @param {*} setTreeLayoutDirection Setting the direction state, to use it for handles positioning.\n * @function graphElement.position Stephan: Unfortunately we need this little hack to pass a slighltiy different position to notify react flow about the change. More over we are shifting the dagre node position (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\n * @returns layouted nodes and edges.\n */\nexport const getLayoutedGraphElements = (\n  nodesAndEdges,\n  treeLayoutDirection = GraphLabels.topToBottom,\n  setTreeLayoutDirection = () => {},\n  componentBackground\n) => {\n  // Set objects for graph labels and the graph's layout direction.\n  dagreGraph.setGraph({ rankdir: treeLayoutDirection });\n\n  const isVerticalLayout = treeLayoutDirection === GraphLabels.leftToRight;\n\n  nodesAndEdges.forEach((graphElement) => {\n    if (isNode(graphElement)) {\n      if (treeLayoutDirection === GraphLabels.topToBottom) {\n        if (componentBackground.mode === BackgroundLabels.size) {\n          dagreGraph.setNode(graphElement.id, {\n            width: nodeWidth,\n            height:\n              baseNodeHeight * aditionalSpaceMultiplier +\n              graphElement.data.linesOfCode,\n          });\n        } else {\n          dagreGraph.setNode(graphElement.id, {\n            width: nodeWidth,\n            height: baseNodeHeight * 2.5,\n          });\n        }\n      }\n\n      if (treeLayoutDirection == GraphLabels.leftToRight) {\n        if (componentBackground.mode === BackgroundLabels.size) {\n          dagreGraph.setNode(graphElement.id, {\n            width: nodeWidth * aditionalSpaceMultiplier,\n            height: baseNodeHeight + graphElement.data.linesOfCode,\n          });\n        }\n        dagreGraph.setNode(graphElement.id, {\n          width: nodeWidth * 2.5,\n          height: baseNodeHeight,\n        });\n      }\n    }\n\n    if (isEdge(graphElement)) {\n      dagreGraph.setEdge(graphElement.source, graphElement.target);\n    }\n  });\n\n  dagre.layout(dagreGraph);\n\n  // Inform the application about the tree layout at all times.\n  setTreeLayoutDirection(treeLayoutDirection);\n\n  return nodesAndEdges.map((graphElement) => {\n    if (isNode(graphElement)) {\n      const nodeWithPosition = dagreGraph.node(graphElement.id);\n\n      // Position edge-node handle elements.\n      graphElement.targetPosition = isVerticalLayout ? 'left' : 'top';\n      graphElement.sourcePosition = isVerticalLayout ? 'right' : 'bottom';\n\n      if (treeLayoutDirection === GraphLabels.topToBottom) {\n        if (componentBackground.mode === BackgroundLabels.size) {\n          graphElement.position = {\n            x: nodeWithPosition.x - nodeWidth + Math.random() / 1000,\n            y: nodeWithPosition.y - (36 + graphElement.data.linesOfCode) / 3,\n          };\n        } else {\n          graphElement.position = {\n            x: nodeWithPosition.x - nodeWidth,\n            y: nodeWithPosition.y - baseNodeHeight,\n          };\n        }\n      }\n\n      if (treeLayoutDirection === GraphLabels.leftToRight) {\n        if (componentBackground.mode === BackgroundLabels.size) {\n          graphElement.position = {\n            x:\n              nodeWithPosition.x -\n              (nodeWidth + graphElement.data.linesOfCode) / 3,\n            y: nodeWithPosition.y - baseNodeHeight + Math.random() / 1000,\n          };\n        } else {\n          graphElement.position = {\n            x:\n              nodeWithPosition.x -\n              (nodeWidth * aditionalSpaceMultiplier) / 2 +\n              Math.random() / 1000,\n            y: nodeWithPosition.y,\n          };\n        }\n      }\n    }\n\n    return graphElement;\n  });\n};\n","import {\n  faGripHorizontal,\n  faGripVertical,\n} from '@fortawesome/free-solid-svg-icons';\nimport React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  LayoutButton,\n  LayoutButtonsWrapper,\n  StyledFontAwesomeIcon,\n} from '../ComponentTree.sc';\nimport { getLayoutedGraphElements } from '../../../utils/functions/graphUtils';\nimport { useZoomPanHelper } from 'react-flow-renderer';\nimport ComponentBackgroundContext from '../../../contexts/ComponentBackgroundContext';\nimport { ButtonLabels, GraphLabels } from '../../../utils/constants/constants';\n\nexport const LayoutButtons = ({\n  layoutedNodesAndEdges,\n  setLayoutedNodesAndEdges,\n  setTreeLayoutDirection,\n}) => {\n  // Get the instance of the tree, so that we can use .fitView().\n  const reactFlowInstance = useZoomPanHelper();\n\n  const { componentBackground } = useContext(ComponentBackgroundContext);\n\n  // Change the layout of the tree on button click.\n  const onChangeTreeLayout = useCallback(\n    (treeLayoutDirection) => {\n      const els = getLayoutedGraphElements(\n        layoutedNodesAndEdges,\n        treeLayoutDirection,\n        setTreeLayoutDirection,\n        componentBackground\n      );\n      setLayoutedNodesAndEdges(els);\n    },\n    [layoutedNodesAndEdges]\n  );\n\n  return (\n    <LayoutButtonsWrapper>\n      <LayoutButton\n        shape=\"round\"\n        type=\"primary\"\n        size=\"middle\"\n        onClick={() => {\n          onChangeTreeLayout(GraphLabels.topToBottom);\n          setTimeout(() => {\n            reactFlowInstance.fitView({ duration: 500 });\n          }, 0);\n        }}\n      >\n        {ButtonLabels.horizontal}\n        <StyledFontAwesomeIcon icon={faGripHorizontal} />\n      </LayoutButton>\n\n      <LayoutButton\n        shape=\"round\"\n        type=\"primary\"\n        size=\"middle\"\n        onClick={() => {\n          onChangeTreeLayout(GraphLabels.leftToRight);\n          setTimeout(() => {\n            reactFlowInstance.fitView({ duration: 500 });\n          }, 0);\n        }}\n      >\n        {ButtonLabels.vertical}\n        <StyledFontAwesomeIcon icon={faGripVertical} />\n      </LayoutButton>\n    </LayoutButtonsWrapper>\n  );\n};\n\nexport default LayoutButtons;\n\nLayoutButtons.propTypes = {\n  layoutedNodesAndEdges: PropTypes.any,\n  setLayoutedNodesAndEdges: PropTypes.any,\n  setTreeLayoutDirection: PropTypes.any,\n};\n","import ReactFlow, { isNode, useZoomPanHelper } from 'react-flow-renderer';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useState, useEffect } from 'react';\nimport HighlightedComponentsContext from '../../contexts/HighlightedComponentsContext';\nimport ComponentNode from '../ComponentNode/ComponentNode';\nimport LayoutButtons from './private/LayoutButtons';\nimport { ZoomControlButtons } from './ComponentTree.sc';\n\n// Create context to provide the tree layout direction to the children.\nexport const GraphDirectionContext = React.createContext(null);\n\nconst ComponentTree = ({\n  nodesAndEdges,\n  componentLabelFilter,\n  componentNumberFilter,\n  treeLayoutDirection,\n  setTreeLayoutDirection,\n  isSubtreeMode,\n}) => {\n  const [layoutedNodesAndEdges, setLayoutedNodesAndEdges] =\n    useState(nodesAndEdges);\n\n  // Will run when the component is mounted.\n  useEffect(() => {\n    filterByName(layoutedNodesAndEdges, rootComponentLabel);\n    setTimeout(() => reactFlowInstance.fitView({ duration: 500 }), 0);\n  }, []);\n\n  // Will run every time any of the componentFilter(s) change.\n  useEffect(() => {\n    setFilteredNodesAndEdges(\n      filterByName(layoutedNodesAndEdges, componentLabelFilter)\n    );\n    setTimeout(() => reactFlowInstance.fitView({ duration: 500 }), 0);\n  }, [componentLabelFilter]);\n\n  useEffect(() => {\n    setFilteredNodesAndEdges(\n      filterByTimesUsed(layoutedNodesAndEdges, componentNumberFilter)\n    );\n    setTimeout(() => reactFlowInstance.fitView({ duration: 500 }), 0);\n  }, [componentNumberFilter]);\n\n  const [filteredNodesAndEdges, setFilteredNodesAndEdges] = useState([]);\n\n  // The first node of data is always the root component.\n  const rootComponentLabel = layoutedNodesAndEdges\n    ? layoutedNodesAndEdges[0]?.data?.label\n    : 'App';\n\n  const reactFlowInstance = useZoomPanHelper();\n\n  /**\n   * Filters the given array of nodes and edges and leaves only the ones associated with the given component name.\n   * @param {*} array Array to filter.\n   * @param {*} filterName Component name.\n   */\n  function filterByName(array, filterName) {\n    const result = array.filter((obj) => {\n      if (isNode(obj)) {\n        return obj.id.split(':').includes(filterName);\n      } else {\n        return obj.source.split(':').includes(filterName);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Filters the given array of nodes and edges and removes component used more times than the given number.\n   * @param {*} array Array to filter.\n   * @param {*} number Number of times used.\n   */\n  function filterByTimesUsed(array, number) {\n    const result = array.filter((obj) => {\n      if (isNode(obj)) {\n        return obj.data.component.timesUsed <= number;\n      } else {\n        return obj;\n      }\n    });\n    return result;\n  }\n\n  const { highlightedComponents, setHighlightedComponents } = useContext(\n    HighlightedComponentsContext\n  );\n\n  // Fit tree on the screen\n  const onLoadTree = (reactFlowInstance) => reactFlowInstance.fitView();\n\n  // Highlight nodes on hover\n  const highlightComponent = (node) => {\n    const componentName = node ? node.data.label : null;\n    setHighlightedComponents([\n      ...highlightedComponents.filter((_node) => _node.locked),\n      {\n        id: node.id,\n        componentName: componentName,\n        locked: false,\n        search: false,\n      },\n    ]);\n  };\n\n  // Stop highlighting\n  const removeHighlight = (node) => {\n    const index = highlightedComponents.findIndex(\n      (component) => component.id === node.id\n    );\n    if (index !== -1) {\n      const highlightedComponent = highlightedComponents[index];\n      if (!highlightedComponent.locked) {\n        const array = [...highlightedComponents];\n        array.splice(index, 1);\n        setHighlightedComponents(array);\n      }\n    }\n  };\n\n  // Reset highlightComponents (Empty array).\n  const resetHighlight = () => setHighlightedComponents([]);\n\n  // Conditionally passing nodes and edges to the onChangeTreeLayout, so that we can\n  // change the positioning dynamically based on the direction of the tree.\n  const renderedElementsToPosition =\n    filteredNodesAndEdges && isSubtreeMode === true\n      ? filteredNodesAndEdges\n      : layoutedNodesAndEdges;\n\n  // setting the fresh layouted elements, KiKi GangGang\n  const setRenderedElementsToPosition =\n    filteredNodesAndEdges && isSubtreeMode === true\n      ? setFilteredNodesAndEdges\n      : setLayoutedNodesAndEdges;\n\n  console.log('Filtered:', filteredNodesAndEdges);\n\n  return (\n    <>\n      {layoutedNodesAndEdges && (\n        <GraphDirectionContext.Provider value={treeLayoutDirection}>\n          <LayoutButtons\n            setTreeLayoutDirection={setTreeLayoutDirection}\n            layoutedNodesAndEdges={renderedElementsToPosition}\n            setLayoutedNodesAndEdges={setRenderedElementsToPosition}\n          />\n\n          <ReactFlow\n            onLoad={onLoadTree}\n            elements={\n              isSubtreeMode ? filteredNodesAndEdges : layoutedNodesAndEdges\n            }\n            nodeTypes={{ reactComponent: ComponentNode }}\n            onNodeMouseEnter={(_e, node) => highlightComponent(node, false)}\n            onNodeMouseLeave={(_e, node) => removeHighlight(node)}\n            onPaneClick={resetHighlight}\n            panOnScroll={true}\n            minZoom={0}\n            defaultZoom={0}\n          >\n            <ZoomControlButtons />\n          </ReactFlow>\n        </GraphDirectionContext.Provider>\n      )}\n    </>\n  );\n};\n\nComponentTree.propTypes = {\n  nodesAndEdges: PropTypes.any,\n  treeLayoutDirection: PropTypes.any,\n  componentLabelFilter: PropTypes.any,\n  componentNumberFilter: PropTypes.any,\n  setTreeLayoutDirection: PropTypes.any,\n  isSubtreeMode: PropTypes.any,\n};\n\nexport default ComponentTree;\n","import { useEffect, useState } from 'react';\n\n// Sticky, as it saves the key-value pairs in local storage.\nconst useStickyState = (defaultValue, key) => {\n  const [value, setValue] = useState(() => {\n    // getItem() returns the value associated with the given key\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n  });\n\n  useEffect(() => {\n    // Set the new value in local storage.\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n};\n\nexport default useStickyState;\n","import { Row } from 'antd';\nimport styled from 'styled-components';\n\nexport const ComponentDetailsRow = styled(Row)`\n  pre {\n    width: 100%;\n  }\n`;\n","import { LoadingOutlined } from '@ant-design/icons';\nimport { Col, Divider } from 'antd';\nimport Text from 'antd/lib/typography/Text';\nimport Title from 'antd/lib/typography/Title';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { DetailsLabels } from '../../utils/constants/constants';\n\nimport { ComponentDetailsRow } from './ComponentDetails.sc';\n\n// nodeDetail gives us additional information about the component.\nconst ComponentDetails = ({ nodeDetail }) => {\n  if (!nodeDetail.visible) {\n    return <LoadingOutlined spin />;\n  }\n\n  const timesUsed = nodeDetail.node.data.component.timesUsed;\n\n  return (\n    <div>\n      <ComponentDetailsRow>\n        <Col>\n          <Title level={5}>{DetailsLabels.freq.title}</Title>\n          <Text>\n            {DetailsLabels.freq.text} {timesUsed} {DetailsLabels.freq.stext}\n          </Text>\n        </Col>\n        <Divider />\n        <Col>\n          <Title level={5}>{DetailsLabels.path}</Title>\n          <Text copyable>\n            <a href={`vscode://file/${nodeDetail.node.data.path}`}>\n              {nodeDetail.node.data.path}\n            </a>\n          </Text>\n        </Col>\n        <Divider />\n        <Col>\n          <Title level={5}>{DetailsLabels.code}</Title>\n\n          <SyntaxHighlighter\n            style={vscDarkPlus}\n            showLineNumbers={true}\n            language=\"javascript\"\n          >\n            {nodeDetail.node.data.code}\n          </SyntaxHighlighter>\n        </Col>\n        <Divider />\n      </ComponentDetailsRow>\n    </div>\n  );\n};\n\nComponentDetails.propTypes = {\n  nodeDetail: PropTypes.any,\n};\n\nexport default ComponentDetails;\n","import { Collapse, Image } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nconst { Panel } = Collapse;\nimport React from 'react';\nimport { HelpPanelLabels } from '../../../utils/constants/constants';\n\nconst EdgesSection = () => {\n  return (\n    <>\n      <Paragraph>{HelpPanelLabels.edges.text}</Paragraph>\n\n      <Collapse defaultActiveKey={HelpPanelLabels.edges.default.key}>\n        <Panel\n          key={HelpPanelLabels.edges.default.key}\n          header={HelpPanelLabels.edges.default.header}\n        >\n          <Paragraph>{HelpPanelLabels.edges.default.text}</Paragraph>\n          <Image src={HelpPanelLabels.edges.default.img} />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.edges.conditional.header}>\n          <Paragraph>{HelpPanelLabels.edges.conditional.text}</Paragraph>\n          <Image src={HelpPanelLabels.edges.conditional.img} />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.edges.router.header}>\n          <Paragraph>{HelpPanelLabels.edges.router.text}</Paragraph>\n          <Image src={HelpPanelLabels.edges.router.img} />\n        </Panel>\n      </Collapse>\n    </>\n  );\n};\n\nexport default EdgesSection;\n","import { Divider } from 'antd';\nimport { Typography } from 'antd';\nconst { Link } = Typography;\nimport styled from 'styled-components';\nimport { baseUnit } from '../../utils/constants/units';\n\nexport const VerticalDivider = styled(Divider)`\n  height: auto;\n  width: 1px;\n`;\n\nexport const CheckboxWrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n`;\n\nexport const StyledLink = styled(Link)`\n  margin-left: 9px;\n`;\n\nexport const StyledLi = styled.li`\n  list-style-type: none;\n  margin-bottom: ${baseUnit / 2}px;\n`;\n\nexport const StyledUl = styled.ul`\n  padding: 0;\n`;\n","import {\n  GithubOutlined,\n  ReadOutlined,\n  YoutubeOutlined,\n} from '@ant-design/icons';\nimport React from 'react';\nimport { HelpPanelLabels } from '../../../utils/constants/constants';\nimport { StyledLi, StyledLink, StyledUl } from '../HelpPanel.sc';\n\nconst LinksSection = () => {\n  return (\n    <StyledUl>\n      <StyledLi>\n        <GithubOutlined />\n        <StyledLink href={HelpPanelLabels.links.repoUrl}>\n          {HelpPanelLabels.links.repo}\n        </StyledLink>\n      </StyledLi>\n\n      <StyledLi>\n        <ReadOutlined />\n        <StyledLink href={HelpPanelLabels.links.changelogUrl}>\n          {HelpPanelLabels.links.changeLog}\n        </StyledLink>\n      </StyledLi>\n\n      <StyledLi>\n        <YoutubeOutlined />\n        <StyledLink href={HelpPanelLabels.links.demoUrl}>\n          {HelpPanelLabels.links.demo}\n        </StyledLink>\n      </StyledLi>\n    </StyledUl>\n  );\n};\n\nexport default LinksSection;\n","import { Collapse, Image } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nconst { Panel } = Collapse;\nimport React from 'react';\nimport { HelpPanelLabels } from '../../../utils/constants/constants';\n\nconst NodesSection = () => {\n  return (\n    <>\n      <Paragraph>{HelpPanelLabels.nodes.text}</Paragraph>\n\n      <Collapse defaultActiveKey={HelpPanelLabels.nodes.color.key}>\n        <Panel\n          key={HelpPanelLabels.nodes.color.key}\n          header={HelpPanelLabels.nodes.color.header}\n        >\n          <Paragraph>{HelpPanelLabels.nodes.color.text}</Paragraph>\n          <Image src={HelpPanelLabels.nodes.color.img} />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.nodes.size.header}>\n          <Paragraph>{HelpPanelLabels.nodes.size.text}</Paragraph>\n          <Image src={HelpPanelLabels.nodes.size.img} />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.nodes.white.header}>\n          <Paragraph>{HelpPanelLabels.nodes.white.text}</Paragraph>\n          <Image src={HelpPanelLabels.nodes.white.img} />\n        </Panel>\n      </Collapse>\n    </>\n  );\n};\n\nexport default NodesSection;\n","import React from 'react';\nimport Checkbox from 'antd/lib/checkbox/Checkbox';\nimport { CheckboxWrapper, VerticalDivider } from '../HelpPanel.sc';\nimport { HelpPanelLabels } from '../../../utils/constants/constants';\nimport { PreferencesProps } from '../../../interfaces/component-interfaces';\n\n// User can disable help on startup and choose vertical layout as default.\nexport const PreferencesSection = ({\n  isHelpHiddenOnStartUp,\n  setIsHelpHiddenOnStartUp,\n  isVerticalTreeLayoutAsDefault,\n  setVerticalTreeLayoutAsDefault,\n}: PreferencesProps) => {\n  return (\n    <CheckboxWrapper>\n      <Checkbox\n        checked={isHelpHiddenOnStartUp}\n        onChange={(e) => setIsHelpHiddenOnStartUp(e.target.checked)}\n      >\n        {HelpPanelLabels.pref.help}\n      </Checkbox>\n      <VerticalDivider type=\"vertical\" />\n      <Checkbox\n        checked={isVerticalTreeLayoutAsDefault}\n        onChange={(e) => setVerticalTreeLayoutAsDefault(e.target.checked)}\n      >\n        {HelpPanelLabels.pref.tree}\n      </Checkbox>\n    </CheckboxWrapper>\n  );\n};\n\nexport default PreferencesSection;\n","import { Collapse, Drawer, Typography } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport React from 'react';\nimport { HelpPanelProps } from '../../interfaces/component-interfaces';\nimport { HelpPanelLabels } from '../../utils/constants/constants';\nimport EdgesSection from './private/EdgesSection';\nimport LinksSection from './private/LinksSection';\nimport NodesSection from './private/NodesSection';\nimport PreferencesSection from './private/PreferencesSection';\nconst { Title } = Typography;\nconst { Panel } = Collapse;\n\nconst HelpPanel = ({\n  isHelpVisible,\n  setIsHelpVisible,\n  isHelpHiddenOnStartUp,\n  setIsHelpHiddenOnStartUp,\n  isVerticalTreeLayoutAsDefault,\n  setVerticalTreeLayoutAsDefault,\n}: HelpPanelProps) => {\n  return (\n    <Drawer\n      width={720}\n      onClose={() => setIsHelpVisible(false)}\n      visible={isHelpVisible}\n      bodyStyle={{ paddingBottom: 80 }}\n    >\n      <Title level={3}>{HelpPanelLabels.title}</Title>\n      <Title level={5}>{HelpPanelLabels.thanks}</Title>\n      <Paragraph>{HelpPanelLabels.purpose}</Paragraph>\n\n      <Collapse defaultActiveKey={HelpPanelLabels.pref.key}>\n        <Panel key={''} header={HelpPanelLabels.nodes.title}>\n          <NodesSection />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.edges.title}>\n          <EdgesSection />\n        </Panel>\n\n        <Panel\n          key={HelpPanelLabels.pref.key}\n          header={HelpPanelLabels.pref.title}\n        >\n          <PreferencesSection\n            isHelpHiddenOnStartUp={isHelpHiddenOnStartUp}\n            setIsHelpHiddenOnStartUp={setIsHelpHiddenOnStartUp}\n            isVerticalTreeLayoutAsDefault={isVerticalTreeLayoutAsDefault}\n            setVerticalTreeLayoutAsDefault={setVerticalTreeLayoutAsDefault}\n          />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.links.title}>\n          <LinksSection />\n        </Panel>\n      </Collapse>\n    </Drawer>\n  );\n};\n\nexport default HelpPanel;\n","// Would be nice to work on this file in the future, and\n// use the library instead of having this kind of duplication\n\nimport React from 'react';\nimport { CSSProperties } from 'react';\nimport cc from 'classcat';\n\ninterface MiniMapNodeProps {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  borderRadius: number;\n  className: string;\n  color: string;\n  shapeRendering: string;\n  strokeColor: string;\n  strokeWidth: number;\n  style?: CSSProperties;\n}\n\nconst MiniMapNode = ({\n  x,\n  y,\n  width,\n  height,\n  style,\n  color,\n  strokeColor,\n  strokeWidth,\n  className,\n  borderRadius,\n  shapeRendering,\n}: MiniMapNodeProps) => {\n  const { background, backgroundColor } = style || {};\n  const fill = String(color || background || backgroundColor);\n\n  return (\n    <rect\n      className={cc(['react-flow__minimap-node', className])}\n      x={x}\n      y={y}\n      rx={borderRadius}\n      ry={borderRadius}\n      width={width}\n      height={height}\n      fill={fill}\n      stroke={strokeColor}\n      strokeWidth={strokeWidth}\n      shapeRendering={shapeRendering}\n    />\n  );\n};\n\nMiniMapNode.displayName = 'MiniMapNode';\n\nexport default MiniMapNode;\n","// Would be nice to work on this file in the future, and\n// use the library instead of having this kind of duplication\n\nimport React from 'react';\nimport { HTMLAttributes, useCallback, useRef } from 'react';\nimport cc from 'classcat';\nimport {\n  Node,\n  Rect,\n  Box,\n  useStoreState,\n  getRectOfNodes,\n  useZoomPanHelper,\n} from 'react-flow-renderer';\nimport MiniMapNode from './MiniMapNode';\nimport {\n  createUseGesture,\n  UserHandlers,\n  wheelAction,\n  dragAction,\n} from '@use-gesture/react';\n\ntype StringFunc = (node: Node) => string;\n\nexport interface MiniMapProps extends HTMLAttributes<SVGSVGElement> {\n  nodeColor?: string | StringFunc;\n  nodeStrokeColor?: string | StringFunc;\n  nodeClassName?: string | StringFunc;\n  nodeBorderRadius?: number;\n  nodeStrokeWidth?: number;\n  maskColor?: string;\n}\n\nconst defaultWidth = 300;\nconst defaultHeight = 220;\n\nconst getBoundsOfBoxes = (box1: Box, box2: Box): Box => ({\n  x: Math.min(box1.x, box2.x),\n  y: Math.min(box1.y, box2.y),\n  x2: Math.max(box1.x2, box2.x2),\n  y2: Math.max(box1.y2, box2.y2),\n});\n\nconst rectToBox = ({ x, y, width, height }: Rect): Box => ({\n  x,\n  y,\n  x2: x + width,\n  y2: y + height,\n});\n\nconst boxToRect = ({ x, y, x2, y2 }: Box): Rect => ({\n  x,\n  y,\n  width: x2 - x,\n  height: y2 - y,\n});\n\nconst getBoundsofRects = (rect1: Rect, rect2: Rect): Rect =>\n  boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\n\nconst useGesture = createUseGesture([dragAction, wheelAction]);\n\nconst MiniMap = ({\n  style,\n  className,\n  nodeStrokeColor = '#555',\n  nodeColor = '#fff',\n  nodeClassName = '',\n  nodeBorderRadius = 5,\n  nodeStrokeWidth = 2,\n  maskColor = 'rgb(240, 242, 243, 0.5)',\n}: MiniMapProps) => {\n  const containerWidth = useStoreState((s) => s.width);\n  const containerHeight = useStoreState((s) => s.height);\n  const [tX, tY, tScale] = useStoreState((s) => s.transform);\n  const nodes = useStoreState((s) => s.nodes);\n\n  const mapClasses = cc(['react-flow__minimap', className]);\n  const elementWidth = Number(style?.width || defaultWidth);\n  const elementHeight = Number(style?.height || defaultHeight);\n  const nodeColorFunc =\n    nodeColor instanceof Function ? nodeColor : () => nodeColor;\n  const nodeStrokeColorFunc =\n    nodeStrokeColor instanceof Function\n      ? nodeStrokeColor\n      : () => nodeStrokeColor;\n  const nodeClassNameFunc =\n    nodeClassName instanceof Function ? nodeClassName : () => nodeClassName;\n  const hasNodes = nodes && nodes.length;\n  const bb = getRectOfNodes(nodes);\n  const viewBB: Rect = {\n    x: -tX / tScale,\n    y: -tY / tScale,\n    width: containerWidth / tScale,\n    height: containerHeight / tScale,\n  };\n  const boundingRect = hasNodes ? getBoundsofRects(bb, viewBB) : viewBB;\n  const scaledWidth = boundingRect.width / elementWidth;\n  const scaledHeight = boundingRect.height / elementHeight;\n  const viewScale = Math.max(scaledWidth, scaledHeight);\n  const viewWidth = viewScale * elementWidth;\n  const viewHeight = viewScale * elementHeight;\n  const offset = 5 * viewScale;\n  const x = boundingRect.x - (viewWidth - boundingRect.width) / 2 - offset;\n  const y = boundingRect.y - (viewHeight - boundingRect.height) / 2 - offset;\n  const width = viewWidth + offset * 2;\n  const height = viewHeight + offset * 2;\n  const shapeRendering =\n    typeof window === 'undefined' ? 'crispEdges' : 'geometricPrecision';\n\n  const minZoom = useStoreState((s) => s.minZoom);\n  const maxZoom = useStoreState((s) => s.maxZoom);\n\n  const rectRef = useRef<SVGRectElement>(null);\n\n  const { transform } = useZoomPanHelper();\n\n  const onDrag = useCallback<UserHandlers['onDrag']>(\n    ({ delta: [x, y] }) => {\n      transform({\n        x: tX + -x * tScale * scaledWidth,\n        y: tY + -y * tScale * scaledHeight,\n        zoom: tScale,\n      });\n    },\n    [scaledHeight, scaledWidth, tScale, tX, tY, transform]\n  );\n\n  const onWheel = useCallback<UserHandlers['onWheel']>(\n    ({ event: { clientX, clientY, deltaY }, active }) => {\n      if (!active) return;\n      const sign = Math.sign(deltaY);\n\n      const { x, y } = rectRef.current?.getBoundingClientRect() || {\n        x: clientX,\n        y: clientY,\n      };\n      const pX = clientX - x;\n      const pY = clientY - y;\n\n      const multiplier = sign === -1 ? 1.2 : sign === 1 ? 1 / 1.2 : 1;\n      const zoom = tScale * multiplier;\n      if (zoom > maxZoom || zoom < minZoom) return;\n      transform({\n        x: tX + sign * pX * zoom,\n        y: tY + sign * pY * zoom,\n        zoom,\n      });\n    },\n    [tScale, maxZoom, minZoom, transform, tX, tY]\n  );\n\n  const bind = useGesture({\n    onWheel,\n    onDrag,\n  });\n\n  return (\n    <svg\n      viewBox={`${x} ${y} ${width} ${height}`}\n      style={style}\n      className={mapClasses}\n    >\n      {nodes\n        .filter((node) => !node.isHidden)\n        .map((node) => (\n          <MiniMapNode\n            key={node.id}\n            x={node.__rf.position.x}\n            y={node.__rf.position.y}\n            width={node.__rf.width}\n            height={node.__rf.height}\n            style={node.style}\n            className={nodeClassNameFunc(node)}\n            color={nodeColorFunc(node)}\n            borderRadius={nodeBorderRadius}\n            strokeColor={nodeStrokeColorFunc(node)}\n            strokeWidth={nodeStrokeWidth}\n            shapeRendering={shapeRendering}\n          />\n        ))}\n      <rect\n        ref={rectRef}\n        className=\"react-flow__minimap-mask\"\n        x={viewBB.x}\n        y={viewBB.y}\n        width={viewBB.width}\n        height={viewBB.height}\n        fill={maskColor}\n        fillRule=\"evenodd\"\n        style={{\n          touchAction: 'none',\n        }}\n        {...bind()}\n      />\n    </svg>\n  );\n};\n\nMiniMap.displayName = 'MiniMap';\n\nexport default MiniMap;\n","import MiniMap from './MiniMap';\nimport styled from 'styled-components';\n\nimport { baseUnit } from '../../utils/constants/units';\n\nconst StyledMiniMap = styled(MiniMap)`\n  position: absolute;\n  width: 280px;\n  height: 205px;\n  right: ${baseUnit}px;\n  top: ${baseUnit}px;\n  border-radius: 15px;\n  border: 1px solid #001529;\n  opacity: 1;\n  -webkit-box-shadow: 4px 6px 11px -3px rgba(0, 0, 0, 0.84);\n  box-shadow: 4px 6px 11px -3px rgba(0, 0, 0, 0.84);\n`;\n\nexport default StyledMiniMap;\n","import { Button, Input, Select, TreeSelect } from 'antd';\nimport Sider from 'antd/lib/layout/Sider';\nimport MenuDivider from 'antd/lib/menu/MenuDivider';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nimport Text from 'antd/lib/typography/Text';\nimport Title from 'antd/lib/typography/Title';\nimport styled, { css } from 'styled-components';\nimport { baseUnit } from '../../utils/constants/units';\n\nexport const NavigationSider = styled(Sider)`\n  overflow: auto;\n  height: 100vh;\n  position: fixed;\n  left: 0;\n`;\n\nexport const AppTitle = styled(Title)`\n  color: #fff !important;\n  padding-left: 24px;\n  margin-top: 24px;\n  margin-bottom: 0;\n`;\n\nexport const StyledSubMenu = styled(SubMenu)`\n  font-size: 16px;\n\n  .ant-menu-inline.ant-menu-sub {\n    background-color: hsl(209, 100%, 11%);\n  }\n\n  .ant-menu-submenu {\n    background-color: #001529;\n  }\n`;\n\nconst navigationDropdownStyles = css`\n  width: 100%;\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n\n  .ant-select-arrow {\n    margin-right: ${baseUnit * 2}px;\n    cursor: pointer;\n    color: #001529;\n  }\n`;\n\nexport const DropdownInput = styled(Select)`\n  ${navigationDropdownStyles}\n`;\n\nexport const BaselineInputWrapper = styled.div`\n  ${navigationDropdownStyles}\n`;\n\nexport const TreeComponentDropdown = styled(TreeSelect)`\n  ${navigationDropdownStyles}\n`;\n\nexport const SubtreeSwitchWrapper = styled.div`\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const StyledDropDownSelect = {\n  maxHeight: 550,\n  maxWidth: 302,\n  minWidth: 'unset',\n  width: 302,\n  overflow: 'auto',\n};\n\nexport const StyledMenuDivider = styled(MenuDivider)`\n  margin: 0 ${baseUnit / 2}px !important;\n`;\n\nexport const SearchNodeExplanationText = styled(Text)`\n  display: block;\n  color: white;\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n  line-height: normal;\n`;\n\nexport const SubtreeModeText = styled(Text)`\n  color: white;\n`;\n\nexport const TimesUsedInputGroup = styled(Input.Group)`\n  padding: 0 ${baseUnit * 2}px ${baseUnit * 2}px;\n  .ant-input {\n    width: 65%;\n  }\n`;\n\nexport const TimesUsedButton = styled(Button)`\n  width: 35%;\n`;\n","import { Button } from 'antd';\nimport styled, { css } from 'styled-components';\nimport { baseUnit } from '../../../../utils/constants/units';\n\nconst navigationButtonsWrapperStyles = css`\n  display: flex;\n  flex-direction: column;\n  column-gap: 5px;\n`;\n\nexport const PrimaryActionsWrapper = styled.div`\n  ${navigationButtonsWrapperStyles};\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n  flex-direction: row;\n  row-gap: 10px;\n  width: 100%;\n`;\n\nexport const GitHubActionsWrapper = styled.div`\n  ${navigationButtonsWrapperStyles};\n  padding: ${baseUnit}px ${baseUnit * 4}px;\n`;\n\nexport const RecompileActionsWrapper = styled.div`\n  ${navigationButtonsWrapperStyles};\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n  flex-direction: column;\n  gap: 10px;\n  width: 100%;\n`;\n\nexport const ActionButton = styled(Button)`\n  width: 180px;\n  margin-bottom: 10px;\n`;\n","import React from 'react';\nimport { QuestionCircleOutlined, ReloadOutlined } from '@ant-design/icons';\n// import { message } from 'antd';\nimport { recompile } from '../../../../api';\nimport PropTypes from 'prop-types';\nimport { ActionButton, PrimaryActionsWrapper } from './ActionButtons.sc';\nimport { ButtonLabels } from '../../../../utils/constants/constants';\n\n// Buttons on sider to recompile the project and open the help panel.\nexport const NavigationPrimaryActions = ({ setIsHelpVisible }) => {\n  // Recompile the project to sync changes.\n  const triggerRecompile = () => {\n    recompile()\n      .then(location.reload())\n      .catch((error) => console.log('An error occurred ', error));\n  };\n\n  // const hide = message.loading('Recompiling. Window will refresh soon..', 5);\n\n  return (\n    <PrimaryActionsWrapper>\n      <ActionButton\n        type=\"primary\"\n        shape=\"round\"\n        size=\"middle\"\n        icon={<ReloadOutlined />}\n        onClick={triggerRecompile}\n      >\n        {ButtonLabels.recompile}\n      </ActionButton>\n\n      <ActionButton\n        type=\"primary\"\n        shape=\"round\"\n        size=\"middle\"\n        icon={<QuestionCircleOutlined />}\n        onClick={() => setIsHelpVisible(true)}\n      >\n        {ButtonLabels.help}\n      </ActionButton>\n    </PrimaryActionsWrapper>\n  );\n};\n\nNavigationPrimaryActions.propTypes = {\n  setIsHelpVisible: PropTypes.any,\n};\n\nexport default NavigationPrimaryActions;\n","import React from 'react';\nimport { ButtonLabels, UrlLabels } from '../../../../utils/constants/constants';\nimport { ActionButton, GitHubActionsWrapper } from './ActionButtons.sc';\n\n// Buttons on sider to submit feedback, bugs and potential features\nconst NavigationGitHubActions = () => {\n  return (\n    <GitHubActionsWrapper>\n      <ActionButton target=\"_blank\" href={UrlLabels.feedback} ghost>\n        {ButtonLabels.feedback}\n      </ActionButton>\n\n      <ActionButton target=\"_blank\" href={UrlLabels.bug} ghost>\n        {ButtonLabels.bug}\n      </ActionButton>\n\n      <ActionButton target=\"_blank\" href={UrlLabels.feature} ghost>\n        {ButtonLabels.feature}\n      </ActionButton>\n    </GitHubActionsWrapper>\n  );\n};\n\nexport default NavigationGitHubActions;\n","import React from 'react';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport { Input } from 'antd';\nimport {\n  ActionButton,\n  RecompileActionsWrapper,\n} from '../ActionButtons/ActionButtons.sc';\nimport { useState } from 'react';\nimport { makeConfiguration, recompile } from '../../../../api';\n\nexport const NavExperimentalActions = () => {\n  const [customRootComponents, setCustomRootComponents] = useState('App');\n\n  const triggerCustomConfiguration = (newRoots) => {\n    makeConfiguration(newRoots)\n      .then(recompile())\n      .then(location.reload())\n      .catch((error) => console.log('An error occurred ', error));\n  };\n\n  function handleChange(e) {\n    setCustomRootComponents(e.target.value);\n  }\n\n  return (\n    <RecompileActionsWrapper>\n      <Input.Group compact>\n        <Input\n          name=\"newCustomRoots\"\n          value={customRootComponents}\n          onChange={handleChange}\n        />\n      </Input.Group>\n      <br />\n      <br />\n      <ActionButton\n        type=\"primary\"\n        shape=\"round\"\n        size=\"middle\"\n        icon={<ReloadOutlined />}\n        onClick={() => triggerCustomConfiguration(customRootComponents)}\n      >\n        {'Set custom roots'}\n      </ActionButton>\n    </RecompileActionsWrapper>\n  );\n};\n\nexport default NavExperimentalActions;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useStoreState, useZoomPanHelper } from 'react-flow-renderer';\nimport HighlightedComponentsContext from '../../../../contexts/HighlightedComponentsContext';\nimport PropTypes from 'prop-types';\nimport {\n  StyledDropDownSelect,\n  SubtreeSwitchWrapper,\n  TreeComponentDropdown,\n  SearchNodeExplanationText,\n  SubtreeModeText,\n  TimesUsedInputGroup,\n  TimesUsedButton,\n} from '../../NavigationPanel.sc';\nimport { InitialNodesContext } from '../../../../App';\nimport { Input, Switch } from 'antd';\nimport { FilterOutlined } from '@ant-design/icons';\n\nconst NavSearchComponent = ({\n  setComponentLabelFilter,\n  setComponentNumberFilter,\n  isSubtreeMode,\n  setIsSubtreeMode,\n}) => {\n  const { setCenter, fitView } = useZoomPanHelper();\n\n  // Toggling the switch\n  const onFilterSwitchToggle = async () => {\n    await setIsSubtreeMode(!isSubtreeMode);\n\n    // When toggling the switch, set the LabelFilter and the searchfield\n    // to be the root of the initial nodes, so that we rerender the tree.\n    setComponentLabelFilter(initialNodesContext[0].data.label);\n    setSearchField(initialNodesContext[0].data.label);\n\n    setTimeout(() => fitView({ duration: 500 }), 0);\n  };\n\n  // Preserving the initial nodes in memory.\n  const initialNodesContext = useContext(InitialNodesContext);\n\n  const { highlightedComponents, setHighlightedComponents } = useContext(\n    HighlightedComponentsContext\n  );\n\n  // Get the nodes from the state.\n  const nodes = useStoreState((store) => store.nodes);\n\n  // Selected node in searchbar.\n  const [searchField, setSearchField] = useState();\n\n  // Setting the nodes that appear in the searchbar.\n  const [searchOptions, setSearchOptions] = useState([]);\n\n  // State for the number input.\n  const [numberForFilter, setNumberForFilter] = useState(undefined);\n\n  function handleInputChange(e) {\n    setNumberForFilter(e.target.value);\n  }\n\n  // Bring selected node in the center of the screen.\n  const focusNode = (id) => {\n    const index = nodes.findIndex((node) => node.id == id);\n    const node = nodes[index];\n    const x = node.__rf.position.x + node.__rf.width / 2;\n    const y = node.__rf.position.y + node.__rf.height / 2;\n    const zoom = 1;\n\n    // functionality from useZoomPanHelper()\n    setCenter(x, y, zoom);\n  };\n\n  // Sets the in searchbar selected node. Finds the name of the component,\n  // highlights its subtree and focuses its root.\n  const onChange = (value) => {\n    setSearchField(value);\n    const arr = value.split(':');\n    const componentName = arr[arr.length - 1];\n    const index = highlightedComponents.findIndex(\n      (component) => component.id === value\n    );\n    const array = [...highlightedComponents];\n    array.splice(index, 1);\n    setHighlightedComponents([\n      {\n        id: value,\n        componentName: componentName,\n        locked: true,\n        search: false,\n      },\n    ]);\n    focusNode(value);\n  };\n\n  const onChangeSubtreeRootNode = (id) => {\n    const index = initialNodesContext.findIndex((node) => node.id == id);\n    const node = initialNodesContext[index];\n    const label = node.data.label;\n\n    setSearchField(label);\n    setComponentLabelFilter(label);\n  };\n\n  // Node names are in form of Parent:Children.\n  const getParentId = (id) => {\n    const idSplit = id.split(':');\n    if (idSplit.length == 1) {\n      return null;\n    }\n    idSplit.pop();\n    return idSplit.join(':');\n  };\n\n  // outDegree is 0 if the node has no descendants. Look at Graph.ts.\n  const isLeaf = (node) => {\n    return node.data.outDegree == 0;\n  };\n\n  // Returns a list of node objects, used in the TreeComponentDropdown.\n  const generateTreeNodes = () => {\n    if (initialNodesContext.length > 0) {\n      setSearchOptions(\n        initialNodesContext.map((node) => {\n          return {\n            id: node.id,\n            pId: getParentId(node.id),\n            title: node.data.label,\n            value: node.id,\n            isLeaf: isLeaf(node),\n          };\n        })\n      );\n    }\n  };\n\n  useEffect(() => {\n    generateTreeNodes();\n  }, [nodes]);\n\n  return (\n    <>\n      <SubtreeSwitchWrapper>\n        <Switch defaultChecked={false} onChange={onFilterSwitchToggle} />\n        <SubtreeModeText>\n          <FilterOutlined /> Filter Mode\n        </SubtreeModeText>\n      </SubtreeSwitchWrapper>\n\n      {isSubtreeMode ? (\n        <SearchNodeExplanationText>\n          Selecting a node will render a subtree with this node as the root.\n        </SearchNodeExplanationText>\n      ) : (\n        <SearchNodeExplanationText>\n          Selecting a node in the dropdown will center this node in your screen.\n        </SearchNodeExplanationText>\n      )}\n\n      {isSubtreeMode === true ? (\n        <>\n          <TreeComponentDropdown\n            showSearch\n            value={searchField}\n            dropdownStyle={StyledDropDownSelect}\n            placeholder=\"Define Subtree Root\"\n            onChange={onChangeSubtreeRootNode}\n            treeDataSimpleMode\n            treeDefaultExpandAll={true}\n            treeData={searchOptions}\n          />\n\n          <SearchNodeExplanationText>\n            Hide components used more times than:\n          </SearchNodeExplanationText>\n\n          <TimesUsedInputGroup compact>\n            <Input onChange={handleInputChange} />\n            <TimesUsedButton\n              onClick={() => {\n                setComponentNumberFilter(numberForFilter);\n              }}\n              type=\"primary\"\n            >\n              Apply Filter\n            </TimesUsedButton>\n          </TimesUsedInputGroup>\n        </>\n      ) : (\n        <TreeComponentDropdown\n          showSearch\n          value={searchField}\n          dropdownStyle={StyledDropDownSelect}\n          placeholder=\"Select Node to focus\"\n          onChange={onChange}\n          treeDataSimpleMode\n          treeDefaultExpandAll={true}\n          treeData={searchOptions}\n        />\n      )}\n    </>\n  );\n};\n\nNavSearchComponent.propTypes = {\n  setComponentLabelFilter: PropTypes.func,\n  setComponentNumberFilter: PropTypes.func,\n  nodesAndEdges: PropTypes.any,\n  isSubtreeMode: PropTypes.bool,\n  setIsSubtreeMode: PropTypes.func,\n};\n\nexport default NavSearchComponent;\n","import { Select, Input } from 'antd';\nimport React, { useContext } from 'react';\nimport ComponentBackgroundContext from '../../../../contexts/ComponentBackgroundContext';\nimport {\n  BackgroundLabels,\n  DropDownLabels,\n} from '../../../../utils/constants/constants';\nimport {\n  BaselineInputWrapper,\n  DropdownInput,\n  StyledDropDownSelect,\n} from '../../NavigationPanel.sc';\n\nconst NavNodeVisualizationOptions = () => {\n  // Getting-Setting the 3 node visualization options through context.\n  const { componentBackground, setComponentBackground } = useContext(\n    ComponentBackgroundContext\n  );\n\n  // Change the lines of code threshold for the color scale visualization option.\n  const changeLinesOfCodeThreshold = (e) => {\n    if (e.target.value < 1) {\n      setComponentBackground({\n        ...componentBackground,\n        locReference: 1,\n      });\n    } else {\n      setComponentBackground({\n        ...componentBackground,\n        locReference: e.target.value,\n      });\n    }\n  };\n\n  return (\n    <>\n      <DropdownInput\n        defaultValue={\n          !componentBackground.mode\n            ? BackgroundLabels.size\n            : componentBackground.mode\n        }\n        onChange={(value) =>\n          setComponentBackground({\n            ...componentBackground,\n            mode: value,\n          })\n        }\n        dropdownStyle={StyledDropDownSelect}\n      >\n        <Select.Option value={BackgroundLabels.white}>\n          {DropDownLabels.white}\n        </Select.Option>\n\n        <Select.Option value={BackgroundLabels.size}>\n          {DropDownLabels.size}\n        </Select.Option>\n\n        <Select.Option value={BackgroundLabels.loc}>\n          {DropDownLabels.color}\n        </Select.Option>\n      </DropdownInput>\n\n      {componentBackground.mode === BackgroundLabels.loc && (\n        <BaselineInputWrapper>\n          <Input\n            addonBefore={'Baseline'}\n            placeholder={'LOC Reference'}\n            defaultValue={componentBackground.locReference}\n            onChange={changeLinesOfCodeThreshold}\n            type=\"number\"\n            min=\"1\"\n          />\n        </BaselineInputWrapper>\n      )}\n    </>\n  );\n};\n\nexport default NavNodeVisualizationOptions;\n","import { Menu } from 'antd';\nimport React, { useEffect } from 'react';\nimport { navigationWidth } from '../../utils/constants/units';\nimport {\n  AppTitle,\n  NavigationSider,\n  StyledMenuDivider,\n  StyledSubMenu,\n} from './NavigationPanel.sc';\nimport PropTypes from 'prop-types';\nimport {\n  BgColorsOutlined,\n  FileSearchOutlined,\n  GithubOutlined,\n  InteractionOutlined,\n  ExperimentOutlined,\n} from '@ant-design/icons';\nimport NavigationPrimaryActions from './private/ActionButtons/NavigationPrimaryActions';\nimport NavigationGitHubActions from './private/ActionButtons/NavigationGitHubActions';\nimport NavExperimentalActions from './private/Experimental/NavExperimentalActions';\nimport NavSearchComponent from './private/SubMenuSections/NavSearchComponent';\nimport NavNodeVisualizationOptions from './private/SubMenuSections/NavNodeVisualizationOptions';\nimport {\n  defaultOpenKeys,\n  NavigationLabels,\n} from '../../utils/constants/constants';\nimport { useZoomPanHelper } from 'react-flow-renderer';\n\nconst NavigationPanel = ({\n  isNavCollapsed,\n  setIsHelpVisible,\n  setComponentLabelFilter,\n  setComponentNumberFilter,\n  isSubtreeMode,\n  setIsSubtreeMode,\n}) => {\n  const reactFlowInstance = useZoomPanHelper();\n\n  useEffect(() => {\n    setTimeout(() => {\n      reactFlowInstance.fitView({ duration: 500 });\n    }, 0);\n  }, [isNavCollapsed]);\n\n  return (\n    <>\n      <NavigationSider\n        collapsed={isNavCollapsed}\n        collapsedWidth={0}\n        width={navigationWidth}\n      >\n        <AppTitle level={1}>{NavigationLabels.title}</AppTitle>\n\n        <Menu theme=\"dark\" mode=\"inline\" defaultOpenKeys={defaultOpenKeys}>\n          <StyledSubMenu\n            key={NavigationLabels.search.key}\n            title={NavigationLabels.search.title}\n            icon={<FileSearchOutlined />}\n          >\n            <NavSearchComponent\n              setComponentLabelFilter={setComponentLabelFilter}\n              setComponentNumberFilter={setComponentNumberFilter}\n              isSubtreeMode={isSubtreeMode}\n              setIsSubtreeMode={setIsSubtreeMode}\n            />\n          </StyledSubMenu>\n\n          <StyledMenuDivider />\n\n          <StyledSubMenu\n            key={NavigationLabels.node.key}\n            title={NavigationLabels.node.title}\n            icon={<BgColorsOutlined />}\n          >\n            <NavNodeVisualizationOptions />\n          </StyledSubMenu>\n\n          <StyledMenuDivider />\n\n          <StyledSubMenu\n            key={NavigationLabels.actions.key}\n            title={NavigationLabels.actions.title}\n            icon={<InteractionOutlined />}\n          >\n            <NavigationPrimaryActions setIsHelpVisible={setIsHelpVisible} />\n            <StyledSubMenu\n              key={NavigationLabels.github.key}\n              title={NavigationLabels.github.title}\n              icon={<GithubOutlined />}\n            >\n              <NavigationGitHubActions />\n            </StyledSubMenu>\n          </StyledSubMenu>\n\n          <StyledMenuDivider />\n          <StyledSubMenu\n            key={'experimental-actions'}\n            title={'Define custom roots'}\n            icon={<ExperimentOutlined />}\n          >\n            <NavExperimentalActions />\n          </StyledSubMenu>\n        </Menu>\n      </NavigationSider>\n    </>\n  );\n};\n\nNavigationPanel.propTypes = {\n  isNavCollapsed: PropTypes.any,\n  setIsHelpVisible: PropTypes.any,\n  setComponentLabelFilter: PropTypes.func,\n  setComponentNumberFilter: PropTypes.func,\n  isSubtreeMode: PropTypes.bool,\n  setIsSubtreeMode: PropTypes.func,\n};\n\nexport default NavigationPanel;\n","import { Button, Layout } from 'antd';\nimport styled from 'styled-components';\n\nimport { baseUnit, navigationWidth } from '../../utils/constants/units';\n\nexport const MainContentWrapper = styled(Layout)`\n  margin-left: ${({ isNavCollapsed }) =>\n    isNavCollapsed === false ? `${navigationWidth}px` : '0'};\n  padding: 1rem;\n  height: 100vh;\n  background-color: rgb(240 242 245 / 33%);\n`;\n\nexport const NavigationTriggerButton = styled(Button)`\n  position: absolute;\n  bottom: ${baseUnit * 2}px;\n  left: ${({ isNavCollapsed }) =>\n    isNavCollapsed === true\n      ? `${baseUnit * 2}px`\n      : `${navigationWidth + baseUnit * 2}px`};\n  z-index: 999;\n`;\n\nexport const MinimapTriggerButton = styled(Button)`\n  position: absolute;\n  top: ${({ isMinimapVisible }) =>\n    isMinimapVisible === true ? `${baseUnit * 19.2}px` : `${baseUnit}px`};\n  right: ${baseUnit}px;\n  z-index: 999;\n`;\n","import { LeftCircleOutlined } from '@ant-design/icons';\nimport ColorHash from 'color-hash';\n\nimport { Drawer as ComponentDetailsDrawer, Layout } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useState, useContext } from 'react';\nimport { ReactFlowProvider } from 'react-flow-renderer';\nimport useStickyState from '../../hooks/useStickyState';\nimport ComponentDetails from '../ComponentDetails/ComponentDetails';\nimport HelpPanel from '../HelpPanel/HelpPanel';\nimport StyledMiniMap from '../Minimap/Minimap.sc';\nimport NavigationPanel from '../NavigationPanel/NavigationPanel';\nimport {\n  MainContentWrapper,\n  MinimapTriggerButton,\n  NavigationTriggerButton,\n} from './DefaultLayout.sc';\nimport HighlightedComponentsContext from '../../contexts/HighlightedComponentsContext';\nimport { ButtonLabels } from '../../utils/constants/constants';\n\nconst DefaultLayout = ({\n  children,\n  nodeDetail,\n  isSubtreeMode,\n  setIsSubtreeMode,\n  setNodeDetail,\n  setComponentLabelFilter,\n  setComponentNumberFilter,\n  isVerticalTreeLayoutAsDefault,\n  setVerticalTreeLayoutAsDefault,\n}) => {\n  // Set hidden help on start up to false in the local storage.\n  const [isHelpHiddenOnStartUp, setIsHelpHiddenOnStartUp] = useStickyState(\n    false,\n    'react-bratus:hide-help'\n  );\n\n  // When user clicks the checkbox to hide or display help on startup.\n  const [isHelpVisible, setIsHelpVisible] = useState(\n    !isHelpHiddenOnStartUp ? true : false\n  );\n\n  // State to collapse the navigation sider.\n  const [isNavCollapsed, setIsNavCollapsed] = useState(false);\n\n  // State to hide/ show the minimap.\n  const [isMinimapVisible, setisMinimapVisible] = useState(false);\n\n  // Highlight the same nodes on minimap when hovering over the nodes of the tree.\n  const { highlightedComponents } = useContext(HighlightedComponentsContext);\n  const isMinimapNodeHighlighted = (node) => {\n    return highlightedComponents.some((component) =>\n      node.id.match(\n        `${component.componentName}:+.+|${component.componentName}$`\n      )\n    );\n  };\n\n  // Color nodes on the minimap differently when highlighted or not.\n  const defineMinimapNodeColor = (node) => {\n    if (isMinimapNodeHighlighted(node)) {\n      return new ColorHash({\n        lightness: 0.4,\n        hue: { min: 0, max: 366 },\n      }).hex(node.data.label);\n    } else {\n      return new ColorHash({\n        lightness: 0.7,\n        hue: { min: 0, max: 366 },\n      }).hex(node.data.label);\n    }\n  };\n\n  return (\n    <Layout>\n      <ReactFlowProvider>\n        <NavigationPanel\n          setIsHelpVisible={setIsHelpVisible}\n          setIsNavCollapsed={setIsNavCollapsed}\n          isSubtreeMode={isSubtreeMode}\n          setIsSubtreeMode={setIsSubtreeMode}\n          isNavCollapsed={isNavCollapsed}\n          setComponentLabelFilter={setComponentLabelFilter}\n          setComponentNumberFilter={setComponentNumberFilter}\n        />\n\n        <NavigationTriggerButton\n          isNavCollapsed={isNavCollapsed}\n          icon={<LeftCircleOutlined rotate={isNavCollapsed && 180} />}\n          type=\"primary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={() => {\n            setIsNavCollapsed(!isNavCollapsed);\n          }}\n        >\n          {isNavCollapsed ? (\n            <span>{ButtonLabels.nav.show}</span>\n          ) : (\n            <span>{ButtonLabels.nav.hide}</span>\n          )}\n        </NavigationTriggerButton>\n\n        <MainContentWrapper isNavCollapsed={isNavCollapsed}>\n          {children}\n        </MainContentWrapper>\n\n        <ComponentDetailsDrawer\n          width={800}\n          visible={nodeDetail.visible}\n          closable={true}\n          keyboard\n          onClose={() => setNodeDetail({ visible: false, node: null })}\n          title={nodeDetail.node ? nodeDetail.node.data.label : ''}\n        >\n          <ComponentDetails nodeDetail={nodeDetail} />\n        </ComponentDetailsDrawer>\n\n        <MinimapTriggerButton\n          isMinimapVisible={isMinimapVisible}\n          icon={<LeftCircleOutlined rotate={isMinimapVisible && 180} />}\n          type=\"primary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={() => {\n            setisMinimapVisible(!isMinimapVisible);\n          }}\n        >\n          {isMinimapVisible ? (\n            <span>{ButtonLabels.map.hide}</span>\n          ) : (\n            <span>{ButtonLabels.map.show}</span>\n          )}\n        </MinimapTriggerButton>\n        {isMinimapVisible && (\n          <StyledMiniMap nodeColor={defineMinimapNodeColor} />\n        )}\n      </ReactFlowProvider>\n\n      <ReactFlowProvider>\n        <HelpPanel\n          isVerticalTreeLayoutAsDefault={isVerticalTreeLayoutAsDefault}\n          setVerticalTreeLayoutAsDefault={setVerticalTreeLayoutAsDefault}\n          isHelpVisible={isHelpVisible}\n          setIsHelpVisible={setIsHelpVisible}\n          isHelpHiddenOnStartUp={isHelpHiddenOnStartUp}\n          setIsHelpHiddenOnStartUp={setIsHelpHiddenOnStartUp}\n        />\n      </ReactFlowProvider>\n    </Layout>\n  );\n};\n\nDefaultLayout.propTypes = {\n  isVerticalTreeLayoutAsDefault: PropTypes.any,\n  setVerticalTreeLayoutAsDefault: PropTypes.any,\n  nodeDetail: PropTypes.any,\n  setNodeDetail: PropTypes.func,\n  setComponentLabelFilter: PropTypes.func,\n  setComponentNumberFilter: PropTypes.func,\n  isSubtreeMode: PropTypes.bool,\n  setIsSubtreeMode: PropTypes.func,\n};\nexport default DefaultLayout;\n","import 'antd/dist/antd.css';\nimport { Alert, Spin } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { getParsedData } from './api';\nimport ComponentTree from './components/ComponentTree/ComponentTree';\nimport DefaultLayout from './components/DefaultLayoutPage/DefaultLayout';\nimport { getEdges, getNodes } from './utils/functions/nodes-and-edges';\nimport { getLayoutedGraphElements } from './utils/functions/graphUtils';\nimport { GraphLabels } from './utils/constants/constants';\nimport ComponentBackgroundContext from './contexts/ComponentBackgroundContext';\nimport useStickyState from './hooks/useStickyState';\nimport { triggerBrowserWarning } from './utils/functions/browser-notification';\n\n// Preserving the initial nodes to display them in the dropdowns even after filtering.\nexport const InitialNodesContext = React.createContext([]);\n\nconst App = () => {\n  const [nodesAndEdges, setNodesAndEdges] = useState(null);\n\n  // State for Drawer holding the code panel of the selected node..\n  const [nodeDetail, setNodeDetail] = useState({ visible: false, node: null });\n\n  // Storing initial nodes to assign them to InitialNodesContext\n  const [initialNodes, setInitialNodes] = useState([]);\n\n  // Node visualization options (size, color, white). See NavNodeVisualizationOptions.jsx\n  const { componentBackground } = useContext(ComponentBackgroundContext);\n\n  // Dropdown value that filters by component label (name) on click.\n  const [componentLabelFilter, setComponentLabelFilter] = useState(null);\n\n  // Input value that filers components by the number of 'timesUsed'\n  const [componentNumberFilter, setComponentNumberFilter] = useState(null);\n\n  // Inform the application about the tree direction at all times.\n  const [treeLayoutDirection, setTreeLayoutDirection] = useState(undefined);\n\n  // Enabling & disabling subtree mode.\n  const [isSubtreeMode, setIsSubtreeMode] = useState(false);\n\n  // Set vertical as default through the help panel preferences section.\n  const [isVerticalTreeLayoutAsDefault, setVerticalTreeLayoutAsDefault] =\n    useStickyState(false, 'bratus:prefer-vertical-layout');\n\n  const treeLayoutOnCompile =\n    isVerticalTreeLayoutAsDefault === true\n      ? GraphLabels.leftToRight\n      : GraphLabels.topToBottom;\n\n  useEffect(() => {\n    getParsedData()\n      // data comes as a set of nodes and edges from the server.\n      .then((data) => {\n        const nodes = getNodes(data, setNodeDetail, setInitialNodes);\n        const edges = getEdges(data);\n        let tree = [];\n\n        triggerBrowserWarning('warning');\n\n        setNodesAndEdges(\n          getLayoutedGraphElements(\n            tree.concat(nodes, edges),\n            treeLayoutOnCompile,\n            setTreeLayoutDirection,\n            componentBackground\n          )\n        );\n      })\n      .catch(console.log);\n  }, []);\n\n  return (\n    <InitialNodesContext.Provider value={initialNodes}>\n      <DefaultLayout\n        nodeDetail={nodeDetail}\n        isSubtreeMode={isSubtreeMode}\n        setIsSubtreeMode={setIsSubtreeMode}\n        setComponentLabelFilter={setComponentLabelFilter}\n        setComponentNumberFilter={setComponentNumberFilter}\n        setNodeDetail={setNodeDetail}\n        isVerticalTreeLayoutAsDefault={isVerticalTreeLayoutAsDefault}\n        setVerticalTreeLayoutAsDefault={setVerticalTreeLayoutAsDefault}\n      >\n        {nodesAndEdges ? (\n          <ComponentTree\n            componentLabelFilter={componentLabelFilter}\n            componentNumberFilter={componentNumberFilter}\n            treeLayoutDirection={treeLayoutDirection}\n            isSubtreeMode={isSubtreeMode}\n            setIsSubtreeMode={setIsSubtreeMode}\n            nodesAndEdges={nodesAndEdges}\n            setTreeLayoutDirection={setTreeLayoutDirection}\n          />\n        ) : (\n          <Spin spinning={true}>\n            <Alert\n              message=\"Nothing to show\"\n              description=\"Could not find any components to display\"\n              type=\"warning\"\n            />\n          </Spin>\n        )}\n      </DefaultLayout>\n    </InitialNodesContext.Provider>\n  );\n};\n\nexport default App;\n","// Get the nodes from data and set their information.\nexport const getNodes = (data, setNodeDetail, setInitialNodes) => {\n  const nodes = data.nodes.map((node) => {\n    return {\n      ...node,\n      data: {\n        ...node.data,\n        onShowNodeDetail: (node) =>\n          setNodeDetail({ visible: true, node: node }),\n      },\n    };\n  });\n\n  // Setting the initial nodes as soon as they arrive from the parsed data\n  setInitialNodes(nodes);\n\n  return nodes;\n};\n\n// Get the edges from data & style them.\nexport const getEdges = (data) => {\n  const edges = data.edges.map((edge) => {\n    return {\n      ...edge,\n      labelBgPadding: [8, 4],\n      labelBgBorderRadius: 4,\n      labelBgStyle: {\n        fill: '#001529',\n        fillOpacity: 0.7,\n      },\n      labelStyle: {\n        fill: '#fff',\n      },\n      style: {\n        // Edge color & thickness\n        stroke: edge.conditional ? '#348888' : edge.label ? '#FA7F08' : '#000',\n        strokeWidth: '2px',\n      },\n    };\n  });\n\n  return edges;\n};\n","import React from 'react';\nimport { Button, notification } from 'antd';\n\nexport const triggerBrowserWarning = () => {\n  const key = `open${Date.now()}`;\n  const btn = (\n    <Button type=\"primary\" size=\"small\" onClick={() => notification.close(key)}>\n      I understand\n    </Button>\n  );\n  const title = <b>Browser Warning</b>;\n\n  notification['warning']({\n    message: title,\n    description:\n      'Dear Users, for your best experience, we recommend you using Chrome.',\n    btn,\n    key,\n    duration: 10,\n    onClose: close,\n  });\n};\n","import React from 'react';\nimport ComponentBackgroundContext from '../contexts/ComponentBackgroundContext';\nimport useStickyState from '../hooks/useStickyState';\nimport { BackgroundLabels } from '../utils/constants/constants';\n\nconst ComponentBackgroundProvider = ({ children }) => {\n  const [componentBackground, setComponentBackground] = useStickyState(\n    {\n      mode: BackgroundLabels.white,\n      locReference: 300,\n    },\n    'componentBackground'\n  );\n\n  return (\n    <ComponentBackgroundContext.Provider\n      value={{ componentBackground, setComponentBackground }}\n    >\n      {children}\n    </ComponentBackgroundContext.Provider>\n  );\n};\n\nexport default ComponentBackgroundProvider;\n","import React, { useState } from 'react';\n\nimport HighlightedComponentsContext from '../contexts/HighlightedComponentsContext';\n\nconst HighlightedComponentsProvider = ({ children }) => {\n  const [highlightedComponents, setHighlightedComponents] = useState([]);\n\n  return (\n    <HighlightedComponentsContext.Provider\n      value={{ highlightedComponents, setHighlightedComponents }}\n    >\n      {children}\n    </HighlightedComponentsContext.Provider>\n  );\n};\n\nexport default HighlightedComponentsProvider;\n","import React from 'react';\nimport ComponentBackgroundProvider from './ComponentBackgroundProvider';\nimport HighlightedComponentsProvider from './HighlightedComponentsProvider';\n\nconst Providers = ({ children }: any) => {\n  return (\n    <HighlightedComponentsProvider>\n      <ComponentBackgroundProvider>{children}</ComponentBackgroundProvider>\n    </HighlightedComponentsProvider>\n  );\n};\n\nexport default Providers;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Providers from './providers/Providers';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}