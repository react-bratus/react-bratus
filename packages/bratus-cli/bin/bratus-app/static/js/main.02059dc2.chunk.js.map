{"version":3,"sources":["locales lazy /^/.//.*//messages/.js$/ groupOptions: {} namespace object","contexts/HighlightedComponentsContext.js","contexts/ComponentBackgroundContext.js","utils/functions/rgbaToHex.js","utils/tokens/units.js","components/ComponentNode/ComponentNode.sc.js","components/ComponentNode/ComponentNode.jsx","components/ComponentTree/ComponentTree.sc.js","utils/tokens/constants.js","utils/functions/graphUtils.js","components/ComponentTree/private/LayoutButtons.jsx","components/ComponentTree/ComponentTree.jsx","hooks/useStickyState.js","components/ComponentDetails/ComponentDetails.sc.js","components/ComponentDetails/ComponentDetails.jsx","components/HelpPanel/HelpPanel.jsx","components/NavigationPanel/NavigationPanel.sc.js","components/NavigationPanel/private/ActionButtons/ActionButtons.sc.js","components/NavigationPanel/private/ActionButtons/NavigationPrimaryActions.jsx","api/index.js","components/NavigationPanel/private/ActionButtons/NavigationGitHubActions.jsx","components/NavigationPanel/private/SubMenuSections/NavSearchComponent.jsx","components/NavigationPanel/private/SubMenuSections/NavNodeVisualizationOptions.jsx","components/NavigationPanel/NavigationPanel.jsx","components/DefaultLayoutPage/DefaultLayout.sc.js","components/DefaultLayoutPage/DefaultLayout.jsx","utils/functions/locale.js","hooks/useLocale.js","providers/HighlightedComponentsProvider.js","providers/I18nWatchLocaleProvider.js","providers/ThemeProvider.js","App.js","utils/functions/nodes-and-edges.js","providers/ComponentBackgroundProvider.js","reportWebVitals.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","HighlightedComponentsContext","createContext","highlightedComponents","ComponentBackgroundContext","mode","locReference","trim","str","replace","baseUnit","nodeWidth","baseNodeHeight","StyledNode","styled","div","linesOfCode","componentBackground","treeLayoutDirection","isHighlighted","bgColor","fontColor","StyledTitle","Title","color","StyledNodeContent","Col","antDesignIconStyles","Row","Text","css","LockOutlined","UnlockOutlined","EyeOutlined","ComponentNode","node","useContext","GraphDirectionContext","getBgColor","ColorHash","lightness","hue","min","max","hex","data","label","rgba","inParts","substring","indexOf","split","r","parseInt","g","b","a","parseFloat","length","toFixed","outParts","toString","Math","round","forEach","part","i","join","rgbaToHex","getFontColor","charAt","layoutTargetHandlePosition","layoutSourceHandlePosition","some","component","match","componentName","onDoubleClick","onShowNodeDetail","inDegree","type","position","level","outDegree","LayoutButtonsWrapper","StyledFontAwesomeIcon","FontAwesomeIcon","LayoutButton","Button","ZoomControlButtons","Controls","GraphLabels","defaultOpenKeys","dagreGraph","dagre","graphlib","Graph","setDefaultEdgeLabel","getLayoutedGraphElements","nodesAndEdges","setTreeLayoutDirection","setGraph","rankdir","isHorizontalLayout","graphElement","isNode","setNode","width","height","isEdge","setEdge","source","target","layout","nodeWithPosition","targetPosition","sourcePosition","x","random","y","LayoutButtons","layoutedNodesAndEdges","setLayoutedNodesAndEdges","reactFlowInstance","useZoomPanHelper","onChangeTreeLayout","useCallback","els","shape","size","onClick","fitView","icon","faGripHorizontal","faGripVertical","React","ComponentTree","useState","setHighlightedComponents","Provider","value","onLoad","elements","nodeTypes","reactComponent","onNodeMouseEnter","_e","filter","_node","locked","search","highlightComponent","onNodeMouseLeave","index","findIndex","array","splice","removeHighlight","onPaneClick","panOnScroll","minZoom","defaultZoom","useStickyState","defaultValue","key","stickyValue","window","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ComponentDetailsRow","ComponentDetails","nodeDetail","visible","LoadingOutlined","spin","timeUsed","timesUsed","copyable","href","path","style","vscDarkPlus","showLineNumbers","language","Typography","Paragraph","Link","HelpPanel","isHelpVisible","hideHelpOnStartUp","setIsHelpVisible","setHideHelpOnStartUp","verticalTreeLayoutAsDefault","setVerticalTreeLayoutAsDefault","ellipsis","onClose","bodyStyle","paddingBottom","checked","onChange","rows","expandable","symbol","NavigationSider","Sider","AppTitle","StyledSubMenu","SubMenu","navigationDropdownStyles","DropdownInput","Select","BaselineInputWrapper","TreeComponentDropdown","TreeSelect","StyledDropDownSelect","maxHeight","maxWidth","minWidth","overflow","StyledMenuDivider","MenuDivider","navigationButtonsWrapperStyles","PrimaryActionsWrapper","GitHubActionsWrapper","ActionButton","NavigationPrimaryActions","ReloadOutlined","fetch","method","hide","message","loading","setTimeout","location","reload","catch","error","console","log","QuestionCircleOutlined","NavigationGitHubActions","ghost","NavSearchComponent","setCenter","nodes","useStoreState","store","searchField","setSearchField","searchOptions","setSearchOptions","getParentId","idSplit","pop","isLeaf","pId","title","showSearch","dropdownStyle","placeholder","arr","__rf","focusNode","treeDataSimpleMode","treeDefaultExpandAll","treeData","NavNodeVisualizationOptions","setComponentBackground","Option","addonBefore","NavigationPanel","collapsed","collapsedWidth","theme","FileSearchOutlined","BgColorsOutlined","InteractionOutlined","GithubOutlined","MainContentWrapper","Layout","NavigationTriggerButton","navigationWidth","DefaultLayout","children","info","setNodeDetail","setCollapsed","LeftCircleOutlined","rotate","closable","keyboard","locale","messages","i18n","load","activate","LOCAL_STORAGE_KEY","useLocale","langPrimaryCode","navigator","languages","userLanguage","getUserLocale","setLocale","updateLocale","HighlightedComponentsProvider","loadLocaleData","plurals","en","da","I18nWatchLocaleProvider","useLingui","propTypes","PropTypes","any","THEME","primary","secondary","GlobalStyle","createGlobalStyle","ThemeProvider","App","setNodesAndEdges","setInfo","undefined","treeLayoutOnCompile","res","json","getNodes","edges","edge","labelBgPadding","labelBgBorderRadius","labelBgStyle","fill","fillOpacity","labelStyle","stroke","conditional","getEdges","concat","spinning","description","ComponentBackgroundProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02059dc2.chunk.js","sourcesContent":["var map = {\n\t\"./da/messages.js\": [\n\t\t907,\n\t\t3\n\t],\n\t\"./en/messages.js\": [\n\t\t908,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 905;\nmodule.exports = webpackAsyncContext;","import { createContext } from 'react';\n\nconst HighlightedComponentsContext = createContext({\n  highlightedComponents: [],\n});\n\nexport default HighlightedComponentsContext;\n","import { createContext } from 'react';\n\nconst ComponentBackgroundContext = createContext({\n  mode: 'white',\n  locReference: 300,\n});\n\nexport default ComponentBackgroundContext;\n","// Source: https://gist.github.com/whitlockjc/9363016\nexport const rgbaToHex = (rgba) => {\n  var inParts = rgba.substring(rgba.indexOf('(')).split(','),\n    r = parseInt(trim(inParts[0].substring(1)), 10),\n    g = parseInt(trim(inParts[1]), 10),\n    b = parseInt(trim(inParts[2]), 10),\n    a = parseFloat(\n      trim(inParts[3].substring(0, inParts[3].length - 1))\n    ).toFixed(2);\n  var outParts = [\n    r.toString(16),\n    g.toString(16),\n    b.toString(16),\n    Math.round(a * 255)\n      .toString(16)\n      .substring(0, 2),\n  ];\n\n  // Pad single-digit output values\n  outParts.forEach(function (part, i) {\n    if (part.length === 1) {\n      outParts[i] = '0' + part;\n    }\n  });\n\n  return '#' + outParts.join('');\n};\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/gm, '');\n};\n","export const baseUnit = 12;\nexport const navigationWidth = 350;\nexport const borderRadius = 8;\nexport const nodeWidth = 180;\nexport const baseNodeHeight = 100;\n","import { EyeOutlined, LockOutlined, UnlockOutlined } from '@ant-design/icons';\nimport { Col, Row } from 'antd';\nimport Text from 'antd/lib/typography/Text';\nimport Title from 'antd/lib/typography/Title';\nimport styled, { css } from 'styled-components';\n\nimport { baseNodeHeight, baseUnit, nodeWidth } from '../../utils/tokens/units';\nconst horizontalViewNodeHeight = baseNodeHeight / 2.3;\n\nexport const StyledNode = styled.div`\n  height: ${({ linesOfCode, componentBackground, treeLayoutDirection }) => {\n    if (componentBackground.mode === 'proportional_size') {\n      if (treeLayoutDirection === 'TB') {\n        return `${horizontalViewNodeHeight + linesOfCode}px`;\n      }\n    }\n    return '75px';\n  }};\n  width: ${({ linesOfCode, componentBackground, treeLayoutDirection }) => {\n    if (componentBackground.mode === 'proportional_size') {\n      if (treeLayoutDirection === 'LR') {\n        return `${nodeWidth + linesOfCode}px`;\n      }\n    }\n    return `${nodeWidth}px`;\n  }};\n  padding: ${baseUnit}px;\n  border-radius: 100px;\n  border: ${({ isHighlighted }) => {\n    return isHighlighted ? '1.5px solid black' : '1px solid black';\n  }};\n  background-color: ${({ bgColor }) => bgColor};\n  color: ${({ fontColor }) => fontColor};\n  position: relative;\n`;\n\nexport const StyledTitle = styled(Title)`\n  color: ${({ color }) => color};\n  font-weight: 600;\n  font-size: 17px;\n  line-height: 1.7px;\n  margin-bottom: 5px;\n`;\n\nexport const StyledNodeContent = styled(Col)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const NodeContentRow = styled(Row)`\n  flex-grow: 1;\n  padding-bottom: 12px;\n  justify-content: center;\n`;\n\nexport const NodeButtonsRow = styled(Row)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const TimeUsedText = styled(Text)`\n  font-size: 18px;\n  line-height: 18px;\n  color: ${({ color }) => color};\n`;\n\nconst antDesignIconStyles = css`\n  font-size: 24px;\n`;\n\nexport const LockIcon = styled(LockOutlined)`\n  ${antDesignIconStyles}\n`;\n\nexport const UnlockIcon = styled(UnlockOutlined)`\n  ${antDesignIconStyles}\n`;\n\nexport const EyeIcon = styled(EyeOutlined)`\n  ${antDesignIconStyles}\n`;\n","import ColorHash from 'color-hash';\nimport React, { useContext } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport ComponentBackgroundContext from '../../contexts/ComponentBackgroundContext';\nimport HighlightedComponentsContext from '../../contexts/HighlightedComponentsContext';\nimport { rgbaToHex } from '../../utils/functions/rgbaToHex';\nimport { GraphDirectionContext } from '../ComponentTree/ComponentTree';\nimport { StyledNode, StyledNodeContent, StyledTitle } from './ComponentNode.sc';\n\nconst ComponentNode = (node) => {\n  const { highlightedComponents } = useContext(HighlightedComponentsContext);\n  // const nodes = useStoreState((store) => store.nodes);\n\n  const { componentBackground } = useContext(ComponentBackgroundContext);\n\n  // const setSelectedElements = useStoreActions(\n  //   (actions) => actions.setSelectedElements\n  // );\n\n  const treeLayoutDirection = useContext(GraphDirectionContext);\n\n  // const lockComponent = () => {\n  //   const index = highlightedComponents.findIndex(\n  //     (component) => component.id === node.id\n  //   );\n\n  //   const array = [...highlightedComponents];\n  //   if (index !== -1 && highlightedComponents[index].locked) {\n  //     array.splice(index, 1);\n  //     setHighlightedComponents(array);\n  //   } else if (index !== -1) {\n  //     array.splice(index, 1);\n  //     setHighlightedComponents([\n  //       ...array,\n  //       {\n  //         id: node.id,\n  //         componentName: node.data.label,\n  //         locked: true,\n  //         search: false,\n  //       },\n  //     ]);\n  //     setSelectedElements(nodes.filter((_node) => _node.id.includes(node.id)));\n  //   }\n  // };\n\n  const isHighlighted = () => {\n    return highlightedComponents.some((component) =>\n      node.id.match(\n        `${component.componentName}:+.+|${component.componentName}$`\n      )\n    );\n  };\n\n  // const isLocked = () => {\n  //   return highlightedComponents.some(\n  //     (component) =>\n  //       component.locked &&\n  //       node.id.match(\n  //         `${component.componentName}:+.+|${component.componentName}$`\n  //       )\n  //   );\n  // };\n\n  const getBgColor = () => {\n    if (componentBackground.mode === 'proportional_size') {\n      const hex = new ColorHash({\n        lightness: 0.8,\n        hue: { min: 0, max: 366 },\n      }).hex(node.data.label);\n      return hex;\n    } else if (componentBackground.mode === 'loc_reference') {\n      return rgbaToHex(\n        `rgba(255,140,0,${\n          node.data.linesOfCode / componentBackground.locReference > 1\n            ? 1\n            : node.data.linesOfCode / componentBackground.locReference\n        })`\n      );\n    } else {\n      return '#FFFFFFFF';\n    }\n  };\n\n  const getFontColor = () => {\n    const bgColor = getBgColor();\n    const color =\n      bgColor.charAt(0) === '#'\n        ? bgColor.substring(bgColor.length === 9 ? 2 : 1, 7)\n        : bgColor;\n    const r = parseInt(color.substring(0, 2), 16); // hexToR\n    const g = parseInt(color.substring(2, 4), 16); // hexToG\n    const b = parseInt(color.substring(4, 6), 16); // hexToB\n    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000' : '#fff';\n  };\n\n  const layoutTargetHandlePosition =\n    treeLayoutDirection === 'LR' ? 'left' : 'top';\n  const layoutSourceHandlePosition =\n    treeLayoutDirection === 'LR' ? 'right' : 'bottom';\n\n  return (\n    <StyledNode\n      linesOfCode={node.data.linesOfCode}\n      componentBackground={componentBackground}\n      treeLayoutDirection={treeLayoutDirection}\n      isHighlighted={isHighlighted()}\n      bgColor={getBgColor}\n      fontColor={getFontColor()}\n      onDoubleClick={() => node.data.onShowNodeDetail(node)}\n    >\n      {node.data.inDegree > 0 && (\n        <Handle type=\"target\" position={layoutTargetHandlePosition} />\n      )}\n\n      <StyledNodeContent>\n        <StyledTitle color={getFontColor} level={5}>\n          {node.data.label}\n        </StyledTitle>\n      </StyledNodeContent>\n\n      {node.data.outDegree > 0 && (\n        <Handle type=\"source\" position={layoutSourceHandlePosition} />\n      )}\n    </StyledNode>\n  );\n};\n\nexport default ComponentNode;\n","import styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button } from 'antd';\nimport { Controls } from 'react-flow-renderer';\n\nexport const LayoutButtonsWrapper = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\nexport const StyledFontAwesomeIcon = styled(FontAwesomeIcon)`\n  margin-left: 7px;\n`;\n\nexport const LayoutButton = styled(Button)`\n  &:active {\n    transform: translateY(4px);\n  }\n`;\n\nexport const ZoomControlButtons = styled(Controls)`\n  bottom: 70px;\n`;\n","export const GraphLabels = {\n  leftToRight: 'LR',\n  topToBottom: 'TB',\n};\n\nexport const defaultOpenKeys = [\n  'search-component',\n  'node-visualization',\n  'navigation-actions',\n];\n","import dagre from 'dagre';\nimport { isEdge, isNode } from 'react-flow-renderer';\nimport { GraphLabels } from '../tokens/constants';\nimport { baseNodeHeight, nodeWidth } from '../tokens/units';\n\nvar aditionalSpaceMultiplier = 2;\n\nconst dagreGraph = new dagre.graphlib.Graph();\n\ndagreGraph.setDefaultEdgeLabel(() => ({}));\n\n/**\n * @param {*} nodesAndEdges the nodes and edges of the tree.\n * @param {*} treeLayoutDirection The layout direction of the tree. Read more here: https://g6.antv.vision/en/docs/api/graphLayout/dagre. It is set to a value, as this is the way JS understands optional params.\n * @param {*} setTreeLayoutDirection Setting the direction state, to use it for handles positioning\n * @function setDefaultEdgeLabel Default to assigning a new object as a label for each new edge.\n * @function setGraph Sets an object for the graph label\n * @function el.position Stephan: Unfortunately we need this little hack to pass a slighltiy different position to notify react flow about the change. More over we are shifting the dagre node position (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\n * @returns the node elements.\n */\nexport const getLayoutedGraphElements = (\n  nodesAndEdges,\n  treeLayoutDirection = 'TB',\n  setTreeLayoutDirection = () => {},\n  componentBackground\n) => {\n  dagreGraph.setGraph({ rankdir: treeLayoutDirection });\n\n  const isHorizontalLayout = treeLayoutDirection === 'LR';\n\n  nodesAndEdges.forEach((graphElement) => {\n    if (isNode(graphElement)) {\n      if (treeLayoutDirection === GraphLabels.topToBottom) {\n        if (componentBackground.mode === 'proportional_size') {\n          dagreGraph.setNode(graphElement.id, {\n            width: nodeWidth,\n            height:\n              baseNodeHeight * aditionalSpaceMultiplier +\n              graphElement.data.linesOfCode,\n          });\n        } else {\n          dagreGraph.setNode(graphElement.id, {\n            width: nodeWidth,\n            height: baseNodeHeight * 2.5,\n          });\n        }\n      }\n\n      if (treeLayoutDirection == GraphLabels.leftToRight) {\n        if (componentBackground.mode === 'proportional_size') {\n          dagreGraph.setNode(graphElement.id, {\n            width: nodeWidth * aditionalSpaceMultiplier,\n            height: baseNodeHeight + graphElement.data.linesOfCode,\n          });\n        }\n        dagreGraph.setNode(graphElement.id, {\n          width: nodeWidth * 2.5,\n          height: baseNodeHeight,\n        });\n      }\n    }\n\n    if (isEdge(graphElement)) {\n      dagreGraph.setEdge(graphElement.source, graphElement.target);\n    }\n  });\n\n  dagre.layout(dagreGraph);\n\n  setTreeLayoutDirection(treeLayoutDirection);\n\n  return nodesAndEdges.map((graphElement) => {\n    if (isNode(graphElement)) {\n      const nodeWithPosition = dagreGraph.node(graphElement.id);\n\n      graphElement.targetPosition = isHorizontalLayout ? 'left' : 'top';\n      graphElement.sourcePosition = isHorizontalLayout ? 'right' : 'bottom';\n\n      if (treeLayoutDirection === 'TB') {\n        if (componentBackground.mode === 'proportional_size') {\n          graphElement.position = {\n            x: nodeWithPosition.x - nodeWidth + Math.random() / 1000,\n            y: nodeWithPosition.y - (36 + graphElement.data.linesOfCode) / 3,\n          };\n        } else {\n          graphElement.position = {\n            x: nodeWithPosition.x - nodeWidth,\n            y: nodeWithPosition.y - baseNodeHeight,\n          };\n        }\n      }\n\n      if (treeLayoutDirection === 'LR') {\n        if (componentBackground.mode === 'proportional_size') {\n          graphElement.position = {\n            x:\n              nodeWithPosition.x -\n              (nodeWidth + graphElement.data.linesOfCode) / 3,\n            y: nodeWithPosition.y - baseNodeHeight + Math.random() / 1000,\n          };\n        } else {\n          graphElement.position = {\n            x:\n              nodeWithPosition.x -\n              (nodeWidth * aditionalSpaceMultiplier) / 2 +\n              Math.random() / 1000,\n            y: nodeWithPosition.y,\n          };\n        }\n      }\n    }\n\n    return graphElement;\n  });\n};\n","import {\n  faGripHorizontal,\n  faGripVertical,\n} from '@fortawesome/free-solid-svg-icons';\nimport React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  LayoutButton,\n  LayoutButtonsWrapper,\n  StyledFontAwesomeIcon,\n} from '../ComponentTree.sc';\nimport { getLayoutedGraphElements } from '../../../utils/functions/graphUtils';\nimport { useZoomPanHelper } from 'react-flow-renderer';\nimport ComponentBackgroundContext from '../../../contexts/ComponentBackgroundContext';\n\nexport const LayoutButtons = ({\n  layoutedNodesAndEdges,\n  setLayoutedNodesAndEdges,\n  setTreeLayoutDirection,\n}) => {\n  const reactFlowInstance = useZoomPanHelper();\n\n  const { componentBackground } = useContext(ComponentBackgroundContext);\n\n  const onChangeTreeLayout = useCallback(\n    (treeLayoutDirection) => {\n      const els = getLayoutedGraphElements(\n        layoutedNodesAndEdges,\n        treeLayoutDirection,\n        setTreeLayoutDirection,\n        componentBackground\n      );\n      setLayoutedNodesAndEdges(els);\n    },\n    [layoutedNodesAndEdges]\n  );\n\n  return (\n    <LayoutButtonsWrapper>\n      <LayoutButton\n        shape=\"round\"\n        type=\"primary\"\n        size=\"large\"\n        onClick={async () => {\n          await onChangeTreeLayout('TB');\n          reactFlowInstance.fitView();\n        }}\n      >\n        Horizontal Layout\n        <StyledFontAwesomeIcon icon={faGripHorizontal} />\n      </LayoutButton>\n\n      <LayoutButton\n        shape=\"round\"\n        type=\"primary\"\n        size=\"large\"\n        onClick={async () => {\n          await onChangeTreeLayout('LR');\n          reactFlowInstance.fitView();\n        }}\n      >\n        Vertical Layout\n        <StyledFontAwesomeIcon icon={faGripVertical} />\n      </LayoutButton>\n    </LayoutButtonsWrapper>\n  );\n};\n\nexport default LayoutButtons;\n\nLayoutButtons.propTypes = {\n  layoutedNodesAndEdges: PropTypes.any,\n  setLayoutedNodesAndEdges: PropTypes.any,\n  setTreeLayoutDirection: PropTypes.any,\n};\n","import ReactFlow from 'react-flow-renderer';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useState } from 'react';\nimport HighlightedComponentsContext from '../../contexts/HighlightedComponentsContext';\nimport ComponentNode from '../ComponentNode/ComponentNode';\nimport LayoutButtons from './private/LayoutButtons';\nimport { ZoomControlButtons } from './ComponentTree.sc';\n\nexport const GraphDirectionContext = React.createContext(null);\n\nconst ComponentTree = ({\n  nodesAndEdges,\n  treeLayoutDirection,\n  setTreeLayoutDirection,\n}) => {\n  const [layoutedNodesAndEdges, setLayoutedNodesAndEdges] =\n    useState(nodesAndEdges);\n\n  const { highlightedComponents, setHighlightedComponents } = useContext(\n    HighlightedComponentsContext\n  );\n\n  const onLoadTree = (reactFlowInstance) => reactFlowInstance.fitView();\n\n  const highlightComponent = (node) => {\n    const componentName = node ? node.data.label : null;\n    setHighlightedComponents([\n      ...highlightedComponents.filter((_node) => _node.locked),\n      {\n        id: node.id,\n        componentName: componentName,\n        locked: false,\n        search: false,\n      },\n    ]);\n  };\n\n  const removeHighlight = (node) => {\n    const index = highlightedComponents.findIndex(\n      (component) => component.id === node.id\n    );\n    if (index !== -1) {\n      const highlightedComponent = highlightedComponents[index];\n      if (!highlightedComponent.locked) {\n        const array = [...highlightedComponents];\n        array.splice(index, 1);\n        setHighlightedComponents(array);\n      }\n    }\n  };\n\n  const resetHighlight = () => setHighlightedComponents([]);\n\n  return (\n    <>\n      {layoutedNodesAndEdges && (\n        <GraphDirectionContext.Provider value={treeLayoutDirection}>\n          <LayoutButtons\n            setTreeLayoutDirection={setTreeLayoutDirection}\n            layoutedNodesAndEdges={layoutedNodesAndEdges}\n            setLayoutedNodesAndEdges={setLayoutedNodesAndEdges}\n          />\n          <ReactFlow\n            onLoad={onLoadTree}\n            elements={layoutedNodesAndEdges}\n            nodeTypes={{ reactComponent: ComponentNode }}\n            onNodeMouseEnter={(_e, node) => highlightComponent(node, false)}\n            onNodeMouseLeave={(_e, node) => removeHighlight(node)}\n            onPaneClick={resetHighlight}\n            panOnScroll={true}\n            minZoom={0}\n            defaultZoom={0}\n          >\n            <ZoomControlButtons />\n          </ReactFlow>\n        </GraphDirectionContext.Provider>\n      )}\n    </>\n  );\n};\n\nComponentTree.propTypes = {\n  nodesAndEdges: PropTypes.any,\n  treeLayoutDirection: PropTypes.any,\n  setTreeLayoutDirection: PropTypes.any,\n};\n\nexport default ComponentTree;\n","import { useEffect, useState } from 'react';\n\nconst useStickyState = (defaultValue, key) => {\n  const [value, setValue] = useState(() => {\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n  });\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n};\n\nexport default useStickyState;\n","import { Row } from 'antd';\nimport styled from 'styled-components';\n\nexport const ComponentDetailsRow = styled(Row)`\n  pre {\n    width: 100%;\n  }\n`;\n","import { LoadingOutlined } from '@ant-design/icons';\nimport { Col, Divider } from 'antd';\nimport Text from 'antd/lib/typography/Text';\nimport Title from 'antd/lib/typography/Title';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nimport { ComponentDetailsRow } from './ComponentDetails.sc';\n\nconst ComponentDetails = ({ nodeDetail }) => {\n  if (!nodeDetail.visible) {\n    return <LoadingOutlined spin />;\n  }\n\n  const timeUsed = nodeDetail.node.data.component.timesUsed;\n  return (\n    <div>\n      <ComponentDetailsRow>\n        <Col>\n          <Title level={5}>Frequency</Title>\n          <Text>This component is used: {timeUsed} times.</Text>\n        </Col>\n        <Divider />\n        <Col>\n          <Title level={5}>Path</Title>\n          <Text copyable>\n            <a href={`vscode://file/${nodeDetail.node.data.path}`}>\n              {nodeDetail.node.data.path}\n            </a>\n          </Text>\n        </Col>\n        <Divider />\n        <Col>\n          <Title level={5}>Code</Title>\n\n          <SyntaxHighlighter\n            style={vscDarkPlus}\n            showLineNumbers={true}\n            language=\"javascript\"\n          >\n            {nodeDetail.node.data.code}\n          </SyntaxHighlighter>\n        </Col>\n        <Divider />\n      </ComponentDetailsRow>\n    </div>\n  );\n};\n\nComponentDetails.propTypes = {\n  nodeDetail: PropTypes.any,\n};\n\nexport default ComponentDetails;\n","import { Divider, Drawer, Typography } from 'antd';\nimport Checkbox from 'antd/lib/checkbox/Checkbox';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n// import ReactFlow from 'react-flow-renderer';\n\n// import HighlightedComponentsContext from '../../contexts/HighlightedComponentsContext';\n// import { getLayoutedElements } from '../../utils/functions/graphUtils';\n// import { GraphLabels } from '../../utils/tokens/constants';\n// import ComponentNode from '../ComponentNode/ComponentNode';\n// import { Elements } from './HelpPanel.mock-data';\n// import { HelpPanelTreeWrapper } from './HelpPanel.sc';\nconst { Title, Paragraph, Link } = Typography;\n\nconst HelpPanel = ({\n  isHelpVisible,\n  hideHelpOnStartUp,\n  setIsHelpVisible,\n  setHideHelpOnStartUp,\n  verticalTreeLayoutAsDefault,\n  setVerticalTreeLayoutAsDefault,\n}) => {\n  // const { highlightedComponents, setHighlightedComponents } = useContext(\n  //   HighlightedComponentsContext\n  // );\n  const [ellipsis] = useState(true);\n  // const highlightComponent = (node) => {\n  //   const componentName = node ? node.data.label : null;\n  //   setHighlightedComponents([\n  //     ...highlightedComponents.filter((_node) => _node.locked),\n  //     {\n  //       id: node.id,\n  //       componentName: componentName,\n  //       locked: false,\n  //       search: false,\n  //     },\n  //   ]);\n  // };\n\n  // const removeHighlight = (node) => {\n  //   const index = highlightedComponents.findIndex(\n  //     (component) => component.id === node.id\n  //   );\n  //   if (index !== -1) {\n  //     const highlightedComponent = highlightedComponents[index];\n  //     if (!highlightedComponent.locked) {\n  //       const array = [...highlightedComponents];\n  //       array.splice(index, 1);\n  //       setHighlightedComponents(array);\n  //     }\n  //   }\n  // };\n\n  // const resetHighlight = () => setHighlightedComponents([]);\n  return (\n    <Drawer\n      width={720}\n      onClose={() => setIsHelpVisible(false)}\n      visible={isHelpVisible}\n      bodyStyle={{ paddingBottom: 80 }}\n    >\n      <Title level={3}>Legend</Title>\n\n      <Paragraph>\n        Below this paragraph you can find the elements that are displayed and\n        what they represent.\n      </Paragraph>\n\n      {/* <HelpPanelTreeWrapper>\n        <ReactFlow\n          // elements={getLayoutedElements(Elements, GraphLabels.leftToRight)}\n          nodeTypes={{ reactComponent: ComponentNode }}\n          onNodeMouseEnter={(_e, node) => highlightComponent(node)}\n          onNodeMouseLeave={(_e, node) => removeHighlight(node)}\n          onElementClick={(_e, node) => highlightComponent(node)}\n          onPaneClick={() => resetHighlight()}\n          defaultPosition={[150, 0]}\n          defaultZoom={0.5}\n        />\n      </HelpPanelTreeWrapper> */}\n\n      <Divider />\n\n      <Title level={5}>Thank you for installing react-bratus</Title>\n\n      <Paragraph>\n        Hopefully this tool can help you navigate your React.js code base.\n      </Paragraph>\n\n      <Paragraph>\n        You can always click the Help button in navigation pane on the right to\n        see this window again.\n      </Paragraph>\n\n      <Paragraph>\n        I hope that you have time to give me feedback. Any feature ideas,\n        constructive criticism, or bugs are welcomed in the{' '}\n        <Link href=\"https://github.com/stephanboersma/react-bratus/issues/new?assignees=&labels=feedback&template=feedback.md&title=%5BFeedback%5D\">\n          GitHub repository.\n        </Link>\n      </Paragraph>\n\n      <Checkbox\n        checked={hideHelpOnStartUp}\n        onChange={(e) => setHideHelpOnStartUp(e.target.checked)}\n      >\n        {\"Don't show me this again\"}\n      </Checkbox>\n\n      <Divider />\n\n      <Checkbox\n        checked={verticalTreeLayoutAsDefault}\n        onChange={(e) => setVerticalTreeLayoutAsDefault(e.target.checked)}\n      >\n        {'Set vertical layout as default'}\n      </Checkbox>\n\n      <Divider />\n      <Title level={5}>Changelog</Title>\n\n      <Paragraph\n        ellipsis={\n          ellipsis ? { rows: 2, expandable: true, symbol: 'more' } : false\n        }\n      >\n        - <b>2.0.7</b> <br />\n        - Bug fix\n        <br />- <b>2.0.6</b> <br />- Configurable component backgrounds <br />\n        - Improved logging <br />- <b>2.0.5</b> <br />\n        - Throws error if a circular reference is found\n        <br />\n        - Minor bug fixes\n        <br />\n        - Updated README\n        <br />- <b>2.0.4</b> <br />\n        - Added TreeSearch <br />- Colored components based on the label hash\n        <br /> - Added lock icon. Possibility to lock multiple components <br />{' '}\n        - Added eye icon. Possibility to open details about component. <br /> -\n        Details page showing the path <br />- Clicking on path will open vscode{' '}\n        <br /> - Details page showing the code <br /> - Fixed some bugs <br /> -\n        CLI automatically opens browser when react-bratus is started <br />-\n        Size of MiniMap increased <br />- <b>2.0.3</b> <br />\n        - Added posibility to set options in `.bratusrc.json` file\n        <br />\n        - Handle multiple components - Highlight components feature <br />\n        - Lock highlighted component and move component including descendants at\n        the same time <br />\n        - CLI command -c --compile has been changed to -p --parse <br />-{' '}\n        Removed Info section <br />\n        <b>2.0.2</b> <br />- First release\n      </Paragraph>\n    </Drawer>\n  );\n};\n\nHelpPanel.propTypes = {\n  isHelpVisible: PropTypes.bool,\n  hideHelpOnStartUp: PropTypes.bool,\n  setIsHelpVisible: PropTypes.func,\n  setHideHelpOnStartUp: PropTypes.func,\n  verticalTreeLayoutAsDefault: PropTypes.any,\n  setVerticalTreeLayoutAsDefault: PropTypes.any,\n};\n\nexport default HelpPanel;\n","import { Select, TreeSelect } from 'antd';\nimport Sider from 'antd/lib/layout/Sider';\nimport MenuDivider from 'antd/lib/menu/MenuDivider';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nimport Title from 'antd/lib/typography/Title';\nimport styled, { css } from 'styled-components';\nimport { baseUnit } from '../../utils/tokens/units';\n\nexport const NavigationSider = styled(Sider)`\n  overflow: auto;\n  height: 100vh;\n  position: fixed;\n  left: 0;\n`;\n\nexport const AppTitle = styled(Title)`\n  color: #fff !important;\n  padding-left: 24px;\n  margin-top: 24px;\n  margin-bottom: 0;\n`;\n\nexport const StyledSubMenu = styled(SubMenu)`\n  font-size: 16px;\n\n  .ant-menu-inline.ant-menu-sub {\n    background-color: hsl(209, 100%, 11%);\n  }\n\n  .ant-menu-submenu {\n    background-color: #001529;\n  }\n`;\n\nconst navigationDropdownStyles = css`\n  width: 100%;\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n\n  .ant-select-arrow {\n    margin-right: ${baseUnit * 2}px;\n    cursor: pointer;\n    color: #001529;\n  }\n`;\n\nexport const DropdownInput = styled(Select)`\n  ${navigationDropdownStyles}\n`;\n\nexport const BaselineInputWrapper = styled.div`\n  ${navigationDropdownStyles}\n`;\n\nexport const TreeComponentDropdown = styled(TreeSelect)`\n  ${navigationDropdownStyles}\n`;\n\nexport const StyledDropDownSelect = {\n  maxHeight: 550,\n  maxWidth: 302,\n  minWidth: 'unset',\n  width: 302,\n  overflow: 'auto',\n};\n\nexport const StyledMenuDivider = styled(MenuDivider)`\n  margin: 0 ${baseUnit / 2}px !important;\n`;\n","import { Button } from 'antd';\nimport styled, { css } from 'styled-components';\nimport { baseUnit } from '../../../../utils/tokens/units';\n\nconst navigationButtonsWrapperStyles = css`\n  display: flex;\n  flex-direction: column;\n  column-gap: 5px;\n`;\n\nexport const PrimaryActionsWrapper = styled.div`\n  ${navigationButtonsWrapperStyles};\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n  flex-direction: row;\n  row-gap: 10px;\n  width: 100%;\n`;\n\nexport const GitHubActionsWrapper = styled.div`\n  ${navigationButtonsWrapperStyles};\n  padding: ${baseUnit}px ${baseUnit * 4}px;\n`;\n\nexport const ActionButton = styled(Button)`\n  width: 180px;\n  margin-bottom: 10px;\n`;\n","import React from 'react';\nimport { QuestionCircleOutlined, ReloadOutlined } from '@ant-design/icons';\nimport { message } from 'antd';\nimport { recompile } from '../../../../api';\nimport PropTypes from 'prop-types';\nimport { ActionButton, PrimaryActionsWrapper } from './ActionButtons.sc';\n\nexport const NavigationPrimaryActions = ({ setIsHelpVisible }) => {\n  const triggerRecompile = () => {\n    recompile()\n      .then(() => {\n        const hide = message.loading(\n          'Recompiling. Window will refresh soon..',\n          0\n        );\n        setTimeout(() => hide, 2000);\n        setTimeout(() => {\n          location.reload();\n        }, 4000);\n      })\n      .catch((error) => console.log('An error occurred ', error));\n  };\n\n  return (\n    <PrimaryActionsWrapper>\n      <ActionButton\n        type=\"primary\"\n        shape={'round'}\n        size=\"middle\"\n        icon={<ReloadOutlined />}\n        onClick={triggerRecompile}\n      >\n        Recompile Project\n      </ActionButton>\n\n      <ActionButton\n        type=\"primary\"\n        shape={'round'}\n        size=\"middle\"\n        icon={<QuestionCircleOutlined />}\n        onClick={() => setIsHelpVisible(true)}\n      >\n        Open help\n      </ActionButton>\n    </PrimaryActionsWrapper>\n  );\n};\n\nNavigationPrimaryActions.propTypes = {\n  setIsHelpVisible: PropTypes.any,\n};\n\nexport default NavigationPrimaryActions;\n","export const getParsedData = () => {\n  return fetch('http://localhost:4444/parsedData').then((res) => res.json());\n};\n\nexport const recompile = () => {\n  return fetch('http://localhost:4444/compile', {\n    method: 'POST',\n  });\n};\n","import React from 'react';\nimport { ActionButton, GitHubActionsWrapper } from './ActionButtons.sc';\n\nconst NavigationGitHubActions = () => {\n  return (\n    <GitHubActionsWrapper>\n      <ActionButton\n        target=\"_blank\"\n        href=\"https://github.com/react-bratus/react-bratus/issues/new?assignees=&labels=feedback&template=feedback.md&title=%5BFeedback%5D\"\n        ghost\n      >\n        Give feedback\n      </ActionButton>\n\n      <ActionButton\n        target=\"_blank\"\n        href=\"https://github.com/react-bratus/react-bratus/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBUG%5D+\"\n        ghost\n      >\n        Submit bug\n      </ActionButton>\n\n      <ActionButton\n        target=\"_blank\"\n        href=\"https://github.com/react-bratus/react-bratus/issues/new?assignees=&labels=enhancement&template=feature_request.md&title=%5BFeature%5D\"\n        ghost\n      >\n        Suggest new feature\n      </ActionButton>\n    </GitHubActionsWrapper>\n  );\n};\n\nexport default NavigationGitHubActions;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useStoreState, useZoomPanHelper } from 'react-flow-renderer';\nimport HighlightedComponentsContext from '../../../../contexts/HighlightedComponentsContext';\nimport {\n  StyledDropDownSelect,\n  TreeComponentDropdown,\n} from '../../NavigationPanel.sc';\n\nconst NavSearchComponent = () => {\n  const { setCenter } = useZoomPanHelper();\n\n  const { highlightedComponents, setHighlightedComponents } = useContext(\n    HighlightedComponentsContext\n  );\n\n  const nodes = useStoreState((store) => store.nodes);\n\n  const [searchField, setSearchField] = useState();\n  const [searchOptions, setSearchOptions] = useState([]);\n\n  const focusNode = (id) => {\n    const index = nodes.findIndex((node) => node.id == id);\n    const node = nodes[index];\n    const x = node.__rf.position.x + node.__rf.width / 2;\n    const y = node.__rf.position.y + node.__rf.height / 2;\n    const zoom = 1;\n\n    setCenter(x, y, zoom);\n  };\n\n  const onChange = (value) => {\n    setSearchField(value);\n    const arr = value.split(':');\n    const componentName = arr[arr.length - 1];\n    const index = highlightedComponents.findIndex(\n      (component) => component.id === value\n    );\n    const array = [...highlightedComponents];\n    array.splice(index, 1);\n    setHighlightedComponents([\n      {\n        id: value,\n        componentName: componentName,\n        locked: true,\n        search: false,\n      },\n    ]);\n    focusNode(value);\n  };\n\n  const getParentId = (id) => {\n    const idSplit = id.split(':');\n    if (idSplit.length == 1) {\n      return null;\n    }\n    idSplit.pop();\n    return idSplit.join(':');\n  };\n\n  const isLeaf = (node) => {\n    return node.data.outDegree == 0;\n  };\n\n  const generateTreeNodes = () => {\n    if (nodes.length > 0) {\n      setSearchOptions(\n        nodes.map((node) => {\n          return {\n            id: node.id,\n            pId: getParentId(node.id),\n            title: node.data.label,\n            value: node.id,\n            isLeaf: isLeaf(node),\n          };\n        })\n      );\n    }\n  };\n\n  useEffect(() => {\n    generateTreeNodes();\n  }, [nodes]);\n\n  return (\n    <TreeComponentDropdown\n      showSearch\n      value={searchField}\n      dropdownStyle={StyledDropDownSelect}\n      placeholder=\"Search components\"\n      onChange={onChange}\n      treeDataSimpleMode\n      treeDefaultExpandAll={false}\n      treeData={searchOptions}\n    />\n  );\n};\n\nexport default NavSearchComponent;\n","import { Select, Input } from 'antd';\nimport React, { useContext } from 'react';\nimport ComponentBackgroundContext from '../../../../contexts/ComponentBackgroundContext';\nimport {\n  BaselineInputWrapper,\n  DropdownInput,\n  StyledDropDownSelect,\n} from '../../NavigationPanel.sc';\n\nconst NavNodeVisualizationOptions = () => {\n  const { componentBackground, setComponentBackground } = useContext(\n    ComponentBackgroundContext\n  );\n\n  return (\n    <>\n      <DropdownInput\n        defaultValue={\n          !componentBackground.mode\n            ? 'proportional_size'\n            : componentBackground.mode\n        }\n        onChange={(value) =>\n          setComponentBackground({\n            ...componentBackground,\n            mode: value,\n          })\n        }\n        dropdownStyle={StyledDropDownSelect}\n      >\n        <Select.Option value=\"white\">White</Select.Option>\n\n        <Select.Option value=\"proportional_size\">\n          Proportional Size based on Lines\n        </Select.Option>\n\n        <Select.Option value=\"loc_reference\">\n          Colorization based on Lines\n        </Select.Option>\n      </DropdownInput>\n\n      {componentBackground.mode === 'loc_reference' && (\n        <BaselineInputWrapper>\n          <Input\n            addonBefore={'Baseline'}\n            placeholder={'LOC Reference'}\n            defaultValue={componentBackground.locReference}\n            onChange={(e) => {\n              if (e.target.value < 1) {\n                setComponentBackground({\n                  ...componentBackground,\n                  locReference: 1,\n                });\n              } else {\n                setComponentBackground({\n                  ...componentBackground,\n                  locReference: e.target.value,\n                });\n              }\n            }}\n            type=\"number\"\n            min=\"1\"\n          />\n        </BaselineInputWrapper>\n      )}\n    </>\n  );\n};\n\nexport default NavNodeVisualizationOptions;\n","import { Menu } from 'antd';\nimport React from 'react';\nimport { navigationWidth } from '../../utils/tokens/units';\nimport {\n  AppTitle,\n  NavigationSider,\n  StyledMenuDivider,\n  StyledSubMenu,\n} from './NavigationPanel.sc';\nimport PropTypes from 'prop-types';\nimport {\n  BgColorsOutlined,\n  FileSearchOutlined,\n  GithubOutlined,\n  InteractionOutlined,\n} from '@ant-design/icons';\nimport NavigationPrimaryActions from './private/ActionButtons/NavigationPrimaryActions';\nimport NavigationGitHubActions from './private/ActionButtons/NavigationGitHubActions';\nimport NavSearchComponent from './private/SubMenuSections/NavSearchComponent';\nimport NavNodeVisualizationOptions from './private/SubMenuSections/NavNodeVisualizationOptions';\nimport { defaultOpenKeys } from '../../utils/tokens/constants';\n\nconst NavigationPanel = ({ collapsed, setIsHelpVisible }) => {\n  return (\n    <>\n      <NavigationSider\n        collapsed={collapsed}\n        collapsedWidth={0}\n        width={navigationWidth}\n      >\n        <AppTitle level={1}>React-bratus</AppTitle>\n\n        <Menu theme=\"dark\" mode=\"inline\" defaultOpenKeys={defaultOpenKeys}>\n          <StyledSubMenu\n            key=\"search-component\"\n            title=\"Search for component\"\n            icon={<FileSearchOutlined />}\n          >\n            <NavSearchComponent />\n          </StyledSubMenu>\n\n          <StyledMenuDivider />\n\n          <StyledSubMenu\n            key=\"node-visualization\"\n            title=\"Node visualization options\"\n            icon={<BgColorsOutlined />}\n          >\n            <NavNodeVisualizationOptions />\n          </StyledSubMenu>\n\n          <StyledMenuDivider />\n\n          <StyledSubMenu\n            key=\"navigation-actions\"\n            title=\"Actions\"\n            icon={<InteractionOutlined />}\n          >\n            <NavigationPrimaryActions setIsHelpVisible={setIsHelpVisible} />\n            <StyledSubMenu\n              key=\"github-actions\"\n              title=\"Contribute\"\n              icon={<GithubOutlined />}\n            >\n              <NavigationGitHubActions />\n            </StyledSubMenu>\n          </StyledSubMenu>\n        </Menu>\n      </NavigationSider>\n    </>\n  );\n};\n\nNavigationPanel.propTypes = {\n  collapsed: PropTypes.any,\n  setIsHelpVisible: PropTypes.any,\n};\n\nexport default NavigationPanel;\n","import { Button, Layout } from 'antd';\nimport styled from 'styled-components';\n\nimport { baseUnit, navigationWidth } from '../../utils/tokens/units';\n\nexport const MainContentWrapper = styled(Layout)`\n  margin-left: ${({ collapsed }) =>\n    collapsed === false ? `${navigationWidth}px` : '0'};\n  padding: 1rem;\n  height: 100vh;\n`;\n\nexport const NavigationTriggerButton = styled(Button)`\n  position: absolute;\n  bottom: ${baseUnit * 2}px;\n  left: ${({ collapsed }) =>\n    collapsed === true\n      ? `${baseUnit * 2}px`\n      : `${navigationWidth + baseUnit * 2}px`};\n  z-index: 999;\n`;\n","import { LeftCircleOutlined } from '@ant-design/icons';\nimport { Drawer as ComponentDetailsDrawer, Layout } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { ReactFlowProvider } from 'react-flow-renderer';\nimport useStickyState from '../../hooks/useStickyState';\nimport ComponentDetails from '../ComponentDetails/ComponentDetails';\nimport HelpPanel from '../HelpPanel/HelpPanel';\nimport NavigationPanel from '../NavigationPanel/NavigationPanel';\nimport {\n  MainContentWrapper,\n  NavigationTriggerButton,\n} from './DefaultLayout.sc';\n\nconst DefaultLayout = ({\n  children,\n  info,\n  nodeDetail,\n  setNodeDetail,\n  verticalTreeLayoutAsDefault,\n  setVerticalTreeLayoutAsDefault,\n}) => {\n  const [hideHelpOnStartUp, setHideHelpOnStartUp] = useStickyState(\n    false,\n    'react-bratus:hide-help'\n  );\n\n  const [isHelpVisible, setIsHelpVisible] = useState(\n    !hideHelpOnStartUp ? true : false\n  );\n\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <Layout>\n      <ReactFlowProvider>\n        <NavigationPanel\n          setIsHelpVisible={setIsHelpVisible}\n          setCollapsed={setCollapsed}\n          collapsed={collapsed}\n          info={info}\n        />\n\n        <NavigationTriggerButton\n          collapsed={collapsed}\n          icon={<LeftCircleOutlined rotate={collapsed && 180} />}\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          onClick={() => {\n            setCollapsed(!collapsed);\n          }}\n        >\n          {collapsed ? <span>Show Nav</span> : <span>Hide Nav</span>}\n        </NavigationTriggerButton>\n\n        <MainContentWrapper collapsed={collapsed}>\n          {children}\n        </MainContentWrapper>\n\n        <ComponentDetailsDrawer\n          width={800}\n          visible={nodeDetail.visible}\n          closable={true}\n          keyboard\n          onClose={() => setNodeDetail({ visible: false, node: null })}\n          title={nodeDetail.node ? nodeDetail.node.data.label : ''}\n        >\n          <ComponentDetails nodeDetail={nodeDetail} />\n        </ComponentDetailsDrawer>\n      </ReactFlowProvider>\n\n      <ReactFlowProvider>\n        <HelpPanel\n          verticalTreeLayoutAsDefault={verticalTreeLayoutAsDefault}\n          setVerticalTreeLayoutAsDefault={setVerticalTreeLayoutAsDefault}\n          isHelpVisible={isHelpVisible}\n          setIsHelpVisible={setIsHelpVisible}\n          hideHelpOnStartUp={hideHelpOnStartUp}\n          setHideHelpOnStartUp={setHideHelpOnStartUp}\n        />\n      </ReactFlowProvider>\n    </Layout>\n  );\n};\n\nDefaultLayout.propTypes = {\n  verticalTreeLayoutAsDefault: PropTypes.any,\n  setVerticalTreeLayoutAsDefault: PropTypes.any,\n  info: PropTypes.any,\n  nodeDetail: PropTypes.any,\n  setNodeDetail: PropTypes.func,\n};\nexport default DefaultLayout;\n","import { i18n } from '@lingui/core';\n\nexport const getUserLocale = () => {\n  // Returns \"en-GB\"\n  const languageCode =\n    (navigator.languages && navigator.languages[0]) ||\n    navigator.language ||\n    navigator.userLanguage;\n\n  // language-code = primary-code ( \"-\" subcode )*\n  // Subcode is usually the Country Code\n  const langPrimaryCode = languageCode.split('-')[0];\n\n  const defaultEnLanguageFallback =\n    langPrimaryCode !== 'da' || langPrimaryCode !== 'en'\n      ? 'en'\n      : langPrimaryCode;\n\n  return defaultEnLanguageFallback;\n};\n\nexport async function activate(locale) {\n  const { messages } = await import(`../../locales/${locale}/messages.js`);\n  i18n.load(locale, messages);\n  i18n.activate(locale);\n}\n","import { useState } from 'react';\n\nimport { getUserLocale } from '../utils/functions';\n\nconst LOCAL_STORAGE_KEY = 'react-bratus:settings:locale';\n\nconst useLocale = () => {\n  const [locale, setLocale] = useState(\n    localStorage.getItem(LOCAL_STORAGE_KEY) ?? getUserLocale()\n  );\n\n  const updateLocale = (value) => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, value);\n    setLocale(value);\n  };\n\n  return { locale, updateLocale };\n};\n\nexport default useLocale;\n","import React, { useState } from 'react';\n\nimport HighlightedComponentsContext from '../contexts/HighlightedComponentsContext';\n\nconst HighlightedComponentsProvider = ({ children }) => {\n  const [highlightedComponents, setHighlightedComponents] = useState([]);\n\n  return (\n    <HighlightedComponentsContext.Provider\n      value={{ highlightedComponents, setHighlightedComponents }}\n    >\n      {children}\n    </HighlightedComponentsContext.Provider>\n  );\n};\n\nexport default HighlightedComponentsProvider;\n","import { i18n } from '@lingui/core';\nimport { useLingui } from '@lingui/react';\nimport { da, en } from 'make-plural/plurals';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\ni18n.loadLocaleData('en', { plurals: en });\ni18n.loadLocaleData('da', { plurals: da });\n\nconst I18nWatchLocaleProvider = ({ children }) => {\n  const { i18n } = useLingui();\n\n  // Skip render when locale isn't loaded\n  if (!i18n.locale) return null;\n\n  // Force re-render when locale changes. Otherwise translations won't be updated.\n  return <>{children}</>;\n};\n\nI18nWatchLocaleProvider.propTypes = {\n  children: PropTypes.any,\n};\n\nexport default I18nWatchLocaleProvider;\n","import React from 'react';\nimport {\n  createGlobalStyle,\n  ThemeProvider as StyledThemeProvider,\n} from 'styled-components';\nconst THEME = {\n  primary: '#00D8FF',\n  secondary: '#001529',\n};\nconst GlobalStyle = createGlobalStyle`\n.ant-select-tree .ant-select-tree-treenode:not(.ant-select-tree .ant-select-tree-treenode-disabled).filter-node .ant-select-tree-title {\n  background-color: red;\n  color: white;\n}\n`;\n\nconst ThemeProvider = ({ children }) => {\n  return (\n    <StyledThemeProvider theme={THEME}>\n      <GlobalStyle />\n      {children}\n    </StyledThemeProvider>\n  );\n};\n\nexport default ThemeProvider;\n","import 'antd/dist/antd.css';\nimport { i18n } from '@lingui/core';\nimport { I18nProvider } from '@lingui/react';\nimport { Alert, Spin } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { getParsedData } from './api';\nimport ComponentTree from './components/ComponentTree/ComponentTree';\nimport DefaultLayout from './components/DefaultLayoutPage/DefaultLayout';\nimport useLocale from './hooks/useLocale';\nimport HighlightedComponentsProvider from './providers/HighlightedComponentsProvider';\nimport I18nWatchLocaleProvider from './providers/I18nWatchLocaleProvider';\nimport ThemeProvider from './providers/ThemeProvider';\nimport { activate } from './utils/functions';\nimport { getEdges, getNodes } from './utils/functions/nodes-and-edges';\nimport { getLayoutedGraphElements } from './utils/functions/graphUtils';\nimport { GraphLabels } from './utils/tokens/constants';\nimport ComponentBackgroundContext from './contexts/ComponentBackgroundContext';\nimport useStickyState from './hooks/useStickyState';\n\nconst App = () => {\n  const { locale } = useLocale();\n  const [nodesAndEdges, setNodesAndEdges] = useState(null);\n  const [nodeDetail, setNodeDetail] = useState({ visible: false, node: null });\n  const [info, setInfo] = useState(null);\n  const { componentBackground } = useContext(ComponentBackgroundContext);\n\n  const [treeLayoutDirection, setTreeLayoutDirection] = useState(undefined);\n\n  //  If the user prefers the vertical layout as favorite, he/she can click it as preferred\n  // in the help panel. The App.js getLayoutedGraphElement() will check the local storage,\n  //  otherwise it will set horizontal as the default.\n  const [verticalTreeLayoutAsDefault, setVerticalTreeLayoutAsDefault] =\n    useStickyState(false, 'bratus:prefer-vertical-layout');\n\n  const treeLayoutOnCompile =\n    verticalTreeLayoutAsDefault === true\n      ? GraphLabels.leftToRight\n      : GraphLabels.topToBottom;\n\n  useEffect(() => {\n    activate(locale);\n    /**\n     * @param data is a set of nodes and edges: {nodes: Array, edges: Array}\n     */\n    getParsedData()\n      .then((data) => {\n        setInfo(data.info);\n        const nodes = getNodes(data, setNodeDetail);\n        const edges = getEdges(data);\n        let tree = [];\n\n        setNodesAndEdges(\n          getLayoutedGraphElements(\n            tree.concat(nodes, edges),\n            treeLayoutOnCompile,\n            setTreeLayoutDirection,\n            componentBackground\n          )\n        );\n      })\n      .catch(console.log);\n  }, [locale]);\n\n  return (\n    <I18nProvider i18n={i18n}>\n      <I18nWatchLocaleProvider>\n        <ThemeProvider>\n          <HighlightedComponentsProvider>\n            <DefaultLayout\n              info={info}\n              nodeDetail={nodeDetail}\n              setNodeDetail={setNodeDetail}\n              verticalTreeLayoutAsDefault={verticalTreeLayoutAsDefault}\n              setVerticalTreeLayoutAsDefault={setVerticalTreeLayoutAsDefault}\n            >\n              {nodesAndEdges ? (\n                <ComponentTree\n                  treeLayoutDirection={treeLayoutDirection}\n                  nodesAndEdges={nodesAndEdges}\n                  setTreeLayoutDirection={setTreeLayoutDirection}\n                />\n              ) : (\n                <Spin spinning={true}>\n                  <Alert\n                    message=\"Nothing to show\"\n                    description=\"Could not find any components to display\"\n                    type=\"warning\"\n                  />\n                </Spin>\n              )}\n            </DefaultLayout>\n          </HighlightedComponentsProvider>\n        </ThemeProvider>\n      </I18nWatchLocaleProvider>\n    </I18nProvider>\n  );\n};\n\nexport default App;\n","export const getNodes = (data, setNodeDetail) => {\n  const nodes = data.nodes.map((node) => {\n    return {\n      ...node,\n      data: {\n        ...node.data,\n        onShowNodeDetail: (node) =>\n          setNodeDetail({ visible: true, node: node }),\n      },\n    };\n  });\n\n  return nodes;\n};\n\nexport const getEdges = (data) => {\n  const edges = data.edges.map((edge) => {\n    return {\n      ...edge,\n      labelBgPadding: [8, 4],\n      labelBgBorderRadius: 4,\n      labelBgStyle: {\n        fill: '#001529',\n        fillOpacity: 0.7,\n      },\n      labelStyle: {\n        fill: '#fff',\n      },\n      style: {\n        stroke: edge.conditional ? 'green' : edge.label ? 'red' : '#000',\n      },\n    };\n  });\n\n  return edges;\n};\n","import React from 'react';\nimport ComponentBackgroundContext from '../contexts/ComponentBackgroundContext';\nimport useStickyState from '../hooks/useStickyState';\n\nconst ComponentBackgroundProvider = ({ children }) => {\n  const [componentBackground, setComponentBackground] = useStickyState(\n    {\n      mode: 'white',\n      locReference: 300,\n    },\n    'componentBackground'\n  );\n\n  return (\n    <ComponentBackgroundContext.Provider\n      value={{ componentBackground, setComponentBackground }}\n    >\n      {children}\n    </ComponentBackgroundContext.Provider>\n  );\n};\n\nexport default ComponentBackgroundProvider;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ComponentBackgroundProvider from './providers/ComponentBackgroundProvider';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ComponentBackgroundProvider>\n      <App />\n    </ComponentBackgroundProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}