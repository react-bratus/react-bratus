{"version":3,"sources":["api/index.js","contexts/HighlightedComponentsContext.js","utils/constants/constants.js","contexts/ComponentBackgroundContext.js","utils/constants/units.js","utils/functions/rgbaToHex.js","utils/constants/colors.js","components/ComponentNode/ComponentNode.sc.js","components/ComponentNode/private/ModalContent.jsx","components/ComponentNode/ComponentNode.jsx","components/ComponentTree/ComponentTree.sc.js","utils/functions/graphUtils.js","components/ComponentTree/private/LayoutButtons.jsx","components/ComponentTree/ComponentTree.jsx","hooks/useStickyState.js","components/ComponentCode/ComponentCode.sc.js","components/ComponentCode/ComponentCode.jsx","components/HelpPanel/private/EdgesSection.tsx","components/HelpPanel/HelpPanel.sc.js","components/NavigationPanel/private/ActionButtons/NavigationGitHubActions.jsx","components/HelpPanel/private/LinksSection.tsx","components/HelpPanel/private/NodesSection.tsx","components/HelpPanel/private/PreferencesSection.tsx","components/HelpPanel/HelpPanel.tsx","components/Minimap/MiniMapNode.tsx","components/Minimap/MiniMap.tsx","components/Minimap/Minimap.sc.js","components/NavigationPanel/NavigationPanel.sc.js","components/NavigationPanel/private/ActionButtons/ActionButtons.sc.js","components/NavigationPanel/private/Experimental/NavExperimentalActions.jsx","utils/functions/focusSearchDropdown.js","components/NavigationPanel/private/SubMenuSections/NavSearchComponent.jsx","components/NavigationPanel/private/SubMenuSections/NavNodeVisualizationOptions.jsx","components/NavigationPanel/private/SubMenuSections/NavFilterComponent.jsx","components/NavigationPanel/NavigationPanel.jsx","components/DefaultLayoutPage/DefaultLayout.sc.js","components/DefaultLayoutPage/DefaultLayout.jsx","App.js","utils/functions/nodes-and-edges.js","utils/functions/browser-notification.js","providers/ComponentBackgroundProvider.js","providers/HighlightedComponentsProvider.js","providers/Providers.tsx","reportWebVitals.js","index.js"],"names":["recompile","fetch","method","HighlightedComponentsContext","createContext","highlightedComponents","GraphLabels","HandleLabels","DropDownLabels","BackgroundLabels","defaultOpenKeys","HelpPanelLabels","title","text","size","header","img","color","key","default","conditional","router","help","tree","repo","repoUrl","changeLog","changelogUrl","demo","demoUrl","ButtonLabels","show","hide","UrlLabels","NavigationLabels","ComponentBackgroundContext","mode","locReference","baseUnit","nodeWidth","baseNodeHeight","trim","str","replace","Colors","StyledNode","styled","div","bgColor","fontColor","linesOfCode","componentBackground","treeLayoutDirection","isHighlighted","StyledHandle","Handle","StyledTitle","Title","StyledNodeContent","Col","ModalContent","node","nodeDetails","data","componentType","component","type","style","timesUsed","display","gap","onClick","onShowNodeDetail","href","path","ComponentNode","nodeName","nameLength","useContext","isDragging","DraggableContent","useState","isModalVisible","setIsModalVisible","GraphDirectionContext","some","id","match","componentName","getBgColor","ColorHash","lightness","hue","min","max","hex","label","rgba","inParts","substring","indexOf","split","r","parseInt","g","b","a","parseFloat","length","toFixed","outParts","toString","Math","round","forEach","part","i","join","rgbaToHex","getFontColor","charAt","layoutTargetHandlePosition","layoutSourceHandlePosition","truncatedNodeName","slice","concat","tooltipTitleVisible","placement","inDegree","isConnectable","position","level","outDegree","visible","onCancel","footer","centered","LayoutButtonsWrapper","StyledFontAwesomeIcon","FontAwesomeIcon","LayoutButton","Button","ZoomControlButtons","Controls","dagreGraph","dagre","graphlib","Graph","setDefaultEdgeLabel","getLayoutedGraphElements","nodesAndEdges","setTreeLayoutDirection","setGraph","rankdir","isVerticalLayout","graphElement","isNode","setNode","width","height","isEdge","setEdge","source","target","layout","map","nodeWithPosition","targetPosition","sourcePosition","x","random","y","LayoutButtons","layoutedNodesAndEdges","setLayoutedNodesAndEdges","reactFlowInstance","useZoomPanHelper","onChangeTreeLayout","useCallback","els","shape","setTimeout","fitView","duration","icon","faGripHorizontal","faGripVertical","React","ComponentTree","isFilterMode","componentLabelFilter","componentNumberFilter","componentNameFilter","setIsDragging","useEffect","setFilteredNodesAndEdges","filterLeaveOnlyComponentsByName","rootComponentLabel","incomingDataArray","number","filter","obj","filterRemoveComponentsUsedMoreTimesThan","filteredNodesAndEdges","includes","setHighlightedComponents","isTrackPad","setIsTrackPad","onDragStart","detectTrackPad","e","isTouchPad","wheelDeltaY","deltaY","deltaMode","reactFlowPane","document","querySelector","addEventListener","renderedElementsToPosition","setRenderedElementsToPosition","Provider","value","onLoad","elements","nodeTypes","reactComponent","onNodeMouseEnter","_e","_node","locked","search","highlightComponent","onNodeMouseLeave","index","findIndex","array","splice","removeHighlight","onPaneClick","onNodeDrag","onNodeDragStart","onNodeDragStop","panOnScroll","minZoom","defaultZoom","useStickyState","defaultValue","stickyValue","window","localStorage","getItem","JSON","parse","setValue","setItem","stringify","ComponentCodeRow","Row","ComponentCode","nodeDetail","vscDarkPlus","showLineNumbers","language","code","LoadingOutlined","spin","Panel","Collapse","EdgesSection","src","Link","Typography","VerticalDivider","Divider","CheckboxWrapper","StyledLink","StyledLi","li","StyledUl","ul","NavigationGitHubActions","LinksSection","GithubOutlined","ReadOutlined","YoutubeOutlined","NodesSection","PreferencesSection","isHelpHiddenOnStartUp","setIsHelpHiddenOnStartUp","isVerticalTreeLayoutAsDefault","setVerticalTreeLayoutAsDefault","checked","onChange","HelpPanel","isHelpVisible","setIsHelpVisible","onClose","bodyStyle","paddingBottom","defaultActiveKey","MiniMapNode","strokeColor","strokeWidth","className","borderRadius","shapeRendering","background","backgroundColor","fill","String","cc","rx","ry","stroke","displayName","rectToBox","x2","y2","getBoundsofRects","rect1","rect2","boxToRect","box1","box2","useGesture","createUseGesture","dragAction","wheelAction","MiniMap","nodeStrokeColor","nodeColor","nodeClassName","nodeBorderRadius","nodeStrokeWidth","maskColor","containerWidth","useStoreState","s","containerHeight","transform","tX","tY","tScale","nodes","mapClasses","elementWidth","Number","elementHeight","nodeColorFunc","Function","nodeStrokeColorFunc","nodeClassNameFunc","hasNodes","bb","getRectOfNodes","viewBB","boundingRect","scaledWidth","scaledHeight","viewScale","viewWidth","viewHeight","offset","maxZoom","rectRef","useRef","onDrag","delta","zoom","onWheel","event","clientX","clientY","active","sign","current","getBoundingClientRect","bind","viewBox","isHidden","__rf","ref","fillRule","touchAction","StyledMiniMap","NavigationSider","Sider","AppTitle","StyledSubMenu","SubMenu","navigationDropdownStyles","css","DropdownInput","Select","BaselineInputWrapper","TreeComponentDropdown","TreeSelect","SubtreeSwitchWrapper","FilterSwitch","Switch","StyledDropDownSelect","maxHeight","maxWidth","minWidth","overflow","StyledMenuDivider","MenuDivider","SearchNodeExplanationText","Text","SubtreeModeText","TimesUsedInputGroup","Input","Group","TimesUsedButton","ImportantKeyword","span","navigationButtonsWrapperStyles","RecompileActionsWrapper","ActionButton","NavExperimentalActions","customRootComponents","setCustomRootComponents","triggerCustomConfiguration","newRoots","customRootComponenets","headers","body","rootComponents","then","location","reload","catch","error","console","log","compact","name","ApartmentOutlined","ReloadOutlined","focusSearchDropdown","ctrlKey","keyCode","metaKey","getElementById","activeElement","preventDefault","focus","NavSearchComponent","setCenter","store","searchField","setSearchField","searchOptions","setSearchOptions","getParentId","idSplit","pop","isLeaf","pId","showSearch","dropdownStyle","placeholder","arr","focusNode","treeDataSimpleMode","treeDefaultExpandAll","treeData","NavNodeVisualizationOptions","setComponentBackground","Option","addonBefore","NavFilterComponent","setIsFilterMode","setComponentLabelFilter","setComponentNumberFilter","setComponentNameFilter","onFilterSwitchToggle","initialNodesContext","InitialNodesContext","undefined","numberForFilter","setNumberForFilter","nameForFilter","setNameForFilter","defaultChecked","RedoOutlined","NavigationPanel","isNavCollapsed","collapsed","collapsedWidth","theme","FileSearchOutlined","FilterOutlined","BgColorsOutlined","ExperimentOutlined","MainContentWrapper","Layout","NavigationTriggerButton","navigationWidth","MinimapTriggerButton","isMinimapVisible","OpenHelpButton","DefaultLayout","children","setNodeDetail","setIsNavCollapsed","setisMinimapVisible","LeftCircleOutlined","rotate","closable","keyboard","isMinimapNodeHighlighted","QuestionCircleOutlined","App","setNodesAndEdges","initialNodes","setInitialNodes","isBrowserWarningHidden","setIsBrowserWarningHidden","treeLayoutOnCompile","res","json","getNodes","edges","edge","labelBgPadding","labelBgBorderRadius","labelBgStyle","fillOpacity","labelStyle","getEdges","Date","now","btn","notification","close","navigator","userAgent","message","description","triggerBrowserWarning","spinning","ComponentBackgroundProvider","HighlightedComponentsProvider","Providers","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f1e94bef.chunk.js","sourcesContent":["export const getParsedData = () => {\n  return fetch('http://localhost:4444/parsedData').then((res) => res.json());\n};\n\nexport const recompile = () => {\n  return fetch('http://localhost:4444/recompile', {\n    method: 'POST',\n  });\n};\n\nexport const makeConfiguration = (customRootComponenets) => {\n  return fetch('http://localhost:4444/makeConfiguration', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ rootComponents: customRootComponenets }),\n  });\n};\n","import { createContext } from 'react';\n\nconst HighlightedComponentsContext = createContext({\n  highlightedComponents: [],\n});\n\nexport default HighlightedComponentsContext;\n","export const GraphLabels = {\n  leftToRight: 'LR',\n  topToBottom: 'TB',\n};\n\nexport const HandleLabels = {\n  left: 'left',\n  right: 'right',\n  bottom: 'bottom',\n  top: 'top',\n  source: 'source',\n  target: 'target',\n};\n\nexport const DropDownLabels = {\n  default: 'Default - Green',\n  size: 'Proportional Size based on Lines',\n  color: 'Colorization based on Lines',\n};\n\nexport const DetailsLabels = {\n  freq: {\n    title: 'Frequency',\n    text: 'This component is used:',\n    stext: 'times.',\n  },\n  path: 'Path',\n  code: 'Code',\n};\n\nexport const BackgroundLabels = {\n  size: 'proportional_size',\n  loc: 'loc_reference',\n  default: 'default',\n};\n\nexport const defaultOpenKeys = [\n  'search-component',\n  'node-visualization',\n  'navigation-actions',\n];\n\nexport const HelpPanelLabels = {\n  title: 'Help Section',\n  thanks: 'Thank you for installing react-bratus',\n  purpose: 'Hopefully this tool can help you navigate your React.js code base.',\n  nodes: {\n    title: 'Node visualization options',\n    text: 'React-Bratus provides three ways of visualizing the nodes:',\n    size: {\n      header: 'Size proportional to lines of code',\n      text: 'Depending on the layout of the tree the height or width of each node is proportional to the lines of code in that component. However, there is a minimum size. The different colors are used to easily distinguish between components.',\n      img: './images/proportional_size.png',\n    },\n    color: {\n      header: 'Color Intensity proportional to lines of code',\n      text: \"Based on the component's lines of code. More lines result in a darker shade.\",\n      img: './images/lines_colorization.png',\n      key: 'nodes-color-scale',\n    },\n    default: {\n      header: 'Default (green)',\n      text: 'A simple overview of your component hierarchy.',\n      img: './images/default-green.png',\n    },\n  },\n  edges: {\n    title: 'Edge types',\n    text: 'Each edge represents a ”renders” relationship where the source node renders the target node. There are three types of those relationships:',\n    default: {\n      header: 'Components rendered by default',\n      text: 'Dark brown edges denote that these components are always rendered by their parent.',\n      img: './images/default.png',\n      key: 'default-edges',\n    },\n    conditional: {\n      header: 'Conditionally rendered components',\n      text: 'Components rendered conditionally. The conditional types ([IF], [&&], [?:]), as well as the conditions, are shown in the label.',\n      img: './images/conditional.png',\n    },\n    router: {\n      header: 'Components rendered by React-Router',\n      text: 'Components rendered by react-router-dom. The path is shown in the label.',\n      img: './images/router.png',\n    },\n  },\n  pref: {\n    title: 'Preferences',\n    help: 'Hide Help on Start Up',\n    tree: 'Set vertical layout as default',\n    key: 'preferences',\n  },\n  links: {\n    title: 'Useful Links',\n    repo: 'Github repo',\n    repoUrl: 'https://github.com/react-bratus/react-bratus',\n    changeLog: 'Changelog',\n    changelogUrl: 'https://github.com/react-bratus/react-bratus#changelog',\n    demo: 'v2.0.7 Demo',\n    demoUrl: 'https://www.youtube.com/watch?v=GBzsOTrZ304',\n  },\n};\n\nexport const ButtonLabels = {\n  vertical: 'Vertical Layout',\n  horizontal: 'Horizontal Layout',\n  feedback: 'Give feedback',\n  bug: 'Submit bug',\n  feature: 'Suggest new feature',\n  recompile: 'Reset',\n  filterReset: 'Reset Filters',\n  help: 'Open Help',\n  nav: {\n    show: 'Show Nav',\n    hide: 'Hide Nav',\n  },\n  map: {\n    show: 'Show Map',\n    hide: 'Hide Map',\n  },\n};\n\nexport const UrlLabels = {\n  feature:\n    'https://github.com/react-bratus/react-bratus/issues/new?assignees=&labels=enhancement&template=feature_request.md&title=%5BFeature%5D',\n  bug: 'https://github.com/react-bratus/react-bratus/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5BBUG%5D+',\n  feedback:\n    'https://github.com/react-bratus/react-bratus/issues/new?assignees=&labels=feedback&template=feedback.md&title=%5BFeedback%5D',\n};\n\nexport const NavigationLabels = {\n  title: 'React-bratus',\n  search: {\n    title: 'Search for component',\n    key: 'search-component',\n  },\n  node: {\n    title: 'Node visualization options',\n    key: 'node-visualization',\n  },\n  actions: {\n    title: 'Actions',\n    key: 'navigation-actions',\n  },\n  github: {\n    title: 'Contribute',\n    key: 'github-actions',\n  },\n};\n","import { createContext } from 'react';\nimport { BackgroundLabels } from '../utils/constants/constants';\n\nconst ComponentBackgroundContext = createContext({\n  mode: BackgroundLabels.default,\n  locReference: 300,\n});\n\nexport default ComponentBackgroundContext;\n","export const baseUnit = 12;\nexport const navigationWidth = 350;\nexport const borderRadius = 8;\nexport const nodeWidth = 180;\nexport const baseNodeHeight = 100;\nexport const nodeNameLength = 13;\nexport const horizontalViewNodeHeight = baseNodeHeight / 2.3;\n","// Source: https://gist.github.com/whitlockjc/9363016\nexport const rgbaToHex = (rgba) => {\n  var inParts = rgba.substring(rgba.indexOf('(')).split(','),\n    r = parseInt(trim(inParts[0].substring(1)), 10),\n    g = parseInt(trim(inParts[1]), 10),\n    b = parseInt(trim(inParts[2]), 10),\n    a = parseFloat(\n      trim(inParts[3].substring(0, inParts[3].length - 1))\n    ).toFixed(2);\n\n  var outParts = [\n    r.toString(16),\n    g.toString(16),\n    b.toString(16),\n    Math.round(a * 255)\n      .toString(16)\n      .substring(0, 2),\n  ];\n\n  // Pad single-digit output values\n  outParts.forEach(function (part, i) {\n    if (part.length === 1) {\n      outParts[i] = '0' + part;\n    }\n  });\n\n  return '#' + outParts.join('');\n};\n\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/gm, '');\n};\n","export const Colors = {\n  //Medium Aquamarine\n  leaf: '#7ae1a1',\n\n  //Tyrian Purple\n  nodeBorder: '#470024',\n\n  // Black Olive\n  defaultAndRouteEdges: '#3a403b',\n\n  // Cerulean Crayola\n  conditionalEdges: '#33A5D7',\n};\n","import { Col } from 'antd';\nimport Title from 'antd/lib/typography/Title';\nimport styled from 'styled-components';\nimport { BackgroundLabels, GraphLabels } from '../../utils/constants/constants';\nimport {\n  baseUnit,\n  nodeWidth,\n  horizontalViewNodeHeight,\n} from '../../utils/constants/units';\nimport { Handle } from 'react-flow-renderer';\nimport { Colors } from '../../utils/constants/colors';\n\n// The height and the width of the tree nodes, are dynamically adjusted based on the\n// layout of the tree and the node visualization options that the user chooses.\nexport const StyledNode = styled.div`\n  background-color: ${({ bgColor }) => bgColor};\n  color: ${({ fontColor }) => fontColor};\n  position: relative;\n  padding: ${baseUnit}px;\n  border-radius: 100px;\n\n  height: ${({ linesOfCode, componentBackground, treeLayoutDirection }) => {\n    if (componentBackground.mode === BackgroundLabels.size) {\n      if (treeLayoutDirection === GraphLabels.topToBottom) {\n        return `${horizontalViewNodeHeight + linesOfCode}px`;\n      }\n    }\n    return '75px';\n  }};\n\n  width: ${({ linesOfCode, componentBackground, treeLayoutDirection }) => {\n    if (componentBackground.mode === BackgroundLabels.size) {\n      if (treeLayoutDirection === GraphLabels.leftToRight) {\n        return `${nodeWidth + linesOfCode}px`;\n      }\n    }\n    return `${nodeWidth}px`;\n  }};\n\n  border: ${({ isHighlighted }) => {\n    return isHighlighted\n      ? `3px solid ${Colors.nodeBorder}`\n      : `1px solid ${Colors.nodeBorder}`;\n  }};\n`;\n\nexport const StyledHandle = styled(Handle)`\n  background: #fff;\n  border-radius: 100%;\n  position: absolute;\n\n  border: ${({ isHighlighted }) => {\n    return isHighlighted\n      ? `2px solid ${Colors.nodeBorder}`\n      : `1px solid ${Colors.nodeBorder}`;\n  }};\n\n  height: ${({ isHighlighted }) => {\n    return isHighlighted ? '12px' : '8px';\n  }};\n\n  width: ${({ isHighlighted }) => {\n    return isHighlighted ? '12px' : '8px';\n  }};\n\n  // Hack for Handle style for vertical view\n  &.react-flow__handle-left {\n    left: ${({ isHighlighted }) => {\n      return isHighlighted ? '-8px' : '-4px';\n    }};\n  }\n\n  &.react-flow__handle-right {\n    right: ${({ isHighlighted }) => {\n      return isHighlighted ? '-8px' : '-4px';\n    }};\n  }\n\n  // Hack for Handle style for horizontal view\n  &.react-flow__handle-top {\n    top: ${({ isHighlighted }) => {\n      return isHighlighted ? '-8px' : '-4px';\n    }};\n  }\n\n  &.react-flow__handle-bottom {\n    bottom: ${({ isHighlighted }) => {\n      return isHighlighted ? '-8px' : '-4px';\n    }};\n  }\n`;\n\nexport const StyledTitle = styled(Title)`\n  color: ${({ color }) => color};\n  font-weight: 600;\n  font-size: 17px;\n  line-height: 1.7px;\n  margin-bottom: 5px;\n`;\n\nexport const StyledNodeContent = styled(Col)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\nimport { Divider, Button } from 'antd';\n\nconst ModalContent = (node) => {\n  const nodeDetails = node.node.data;\n  const componentType =\n    nodeDetails.component.node.type == 'VariableDeclaration'\n      ? 'arrow function'\n      : nodeDetails.component.node.type == 'FunctionDeclaration'\n      ? 'function'\n      : 'class';\n\n  return (\n    <>\n      <p>\n        This is {componentType == 'arrow function' ? 'an' : 'a'}{' '}\n        <span style={{ color: '#0080ff' }}>{componentType} component</span>,\n        <br />\n        it is rendered{' '}\n        <span style={{ color: '#ff8400' }}>\n          {nodeDetails.component.timesUsed}\n        </span>{' '}\n        times in your project\n        <br />\n        and it has{' '}\n        <span style={{ color: '#168d28' }}>{nodeDetails.linesOfCode}</span>{' '}\n        lines of code.\n      </p>\n      <Divider />\n      <div style={{ display: 'flex', gap: '10px' }}>\n        <Button\n          onClick={() => {\n            nodeDetails.onShowNodeDetail(node.node);\n          }}\n          type=\"primary\"\n        >\n          Quick Code Preview\n        </Button>\n        <Button type=\"primary\" href={`vscode://file/${nodeDetails.path}`}>\n          Open file in Visual Studio Code\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default ModalContent;\n","import { Modal, Tooltip } from 'antd';\nimport ColorHash from 'color-hash';\nimport React, { useContext, useState } from 'react';\nimport { DraggableContent } from '../../App';\nimport ComponentBackgroundContext from '../../contexts/ComponentBackgroundContext';\nimport HighlightedComponentsContext from '../../contexts/HighlightedComponentsContext';\nimport {\n  BackgroundLabels,\n  GraphLabels,\n  HandleLabels,\n} from '../../utils/constants/constants';\nimport { nodeNameLength } from '../../utils/constants/units';\nimport { rgbaToHex } from '../../utils/functions/rgbaToHex';\nimport { GraphDirectionContext } from '../ComponentTree/ComponentTree';\nimport {\n  StyledHandle,\n  StyledNode,\n  StyledNodeContent,\n  StyledTitle,\n} from './ComponentNode.sc';\nimport ModalContent from './private/ModalContent';\n\nconst ComponentNode = (node) => {\n  const { highlightedComponents } = useContext(HighlightedComponentsContext);\n\n  const { componentBackground } = useContext(ComponentBackgroundContext);\n\n  /**\n   * We need context, as it's the only way of passing props to a custom node,\n   * without overcomplicating it and passing a variable to getNodes in App.JS\n   * @const isDragging handles dragging, which in React-Flow triggers onClick\n   */\n  const isDragging = useContext(DraggableContent);\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const openModal = () => {\n    isDragging && setIsModalVisible(true);\n  };\n\n  // We need the layout to pass it as props to the styled component.\n  const treeLayoutDirection = useContext(GraphDirectionContext);\n\n  const isHighlighted = () => {\n    return highlightedComponents.some((component) =>\n      node.id.match(\n        `${component.componentName}:+.+|${component.componentName}$`\n      )\n    );\n  };\n\n  // Getting the background of the node, depending on the background mode.\n  const getBgColor = () => {\n    if (componentBackground.mode === BackgroundLabels.size) {\n      const hex = new ColorHash({\n        lightness: 0.8,\n        hue: { min: 0, max: 366 },\n      }).hex(node.data.label);\n      return hex;\n    } else if (componentBackground.mode === BackgroundLabels.loc) {\n      return rgbaToHex(\n        `rgba(255,140,0,${\n          node.data.linesOfCode / componentBackground.locReference > 1\n            ? 1\n            : node.data.linesOfCode / componentBackground.locReference\n        })`\n      );\n    } else {\n      return '#7ae1a1';\n    }\n  };\n\n  // Getting the font color of the node, depending on the background color.\n  const getFontColor = () => {\n    const bgColor = getBgColor();\n    const color =\n      bgColor.charAt(0) === '#'\n        ? bgColor.substring(bgColor.length === 9 ? 2 : 1, 7)\n        : bgColor;\n    const r = parseInt(color.substring(0, 2), 16); // hexToR\n    const g = parseInt(color.substring(2, 4), 16); // hexToG\n    const b = parseInt(color.substring(4, 6), 16); // hexToB\n    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000' : '#fff';\n  };\n\n  // Dynamically change the position of the handles depending on\n  // the layout of the tree.\n  const layoutTargetHandlePosition =\n    treeLayoutDirection === GraphLabels.leftToRight\n      ? HandleLabels.left\n      : HandleLabels.top;\n\n  const layoutSourceHandlePosition =\n    treeLayoutDirection === GraphLabels.leftToRight\n      ? HandleLabels.right\n      : HandleLabels.bottom;\n\n  // Display the 13 first chars of the node name, for those that are long.\n  const truncateNodeName = (nodeName, nameLength) => {\n    return nodeName.length > nameLength\n      ? nodeName.slice(0, nameLength - 1).concat('...')\n      : nodeName;\n  };\n\n  const truncatedNodeName = truncateNodeName(node.data.label, nodeNameLength);\n  const tooltipTitleVisible = node.data.label.length > 10 && node.data.label;\n\n  return (\n    <>\n      {' '}\n      <Tooltip placement=\"bottom\" title={tooltipTitleVisible}>\n        <StyledNode\n          linesOfCode={node.data.linesOfCode}\n          componentBackground={componentBackground}\n          treeLayoutDirection={treeLayoutDirection}\n          isHighlighted={isHighlighted()}\n          bgColor={getBgColor}\n          fontColor={getFontColor()}\n          onClick={openModal}\n        >\n          {node.data.inDegree > 0 && (\n            <StyledHandle\n              isHighlighted={isHighlighted()}\n              type={HandleLabels.target}\n              isConnectable={false}\n              position={layoutTargetHandlePosition}\n            />\n          )}\n\n          <StyledNodeContent>\n            <StyledTitle color={getFontColor} level={5}>\n              {truncatedNodeName}\n            </StyledTitle>\n          </StyledNodeContent>\n\n          {node.data.outDegree > 0 && (\n            <StyledHandle\n              isHighlighted={isHighlighted()}\n              type={HandleLabels.source}\n              isConnectable={false}\n              position={layoutSourceHandlePosition}\n            />\n          )}\n        </StyledNode>\n      </Tooltip>\n      <Modal\n        title={node.data.label}\n        visible={isModalVisible}\n        onCancel={() => setIsModalVisible(false)}\n        footer={null}\n        centered={true}\n      >\n        <ModalContent node={node} />\n      </Modal>\n    </>\n  );\n};\n\nexport default ComponentNode;\n","import styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button } from 'antd';\nimport { Controls } from 'react-flow-renderer';\n\nexport const LayoutButtonsWrapper = styled.div`\n  display: flex;\n  gap: 15px;\n`;\n\nexport const StyledFontAwesomeIcon = styled(FontAwesomeIcon)`\n  margin-left: 7px;\n`;\n\n// Make button pressing more realistic\nexport const LayoutButton = styled(Button)`\n  &:active {\n    transform: translateY(4px);\n  }\n`;\n\nexport const ZoomControlButtons = styled(Controls)`\n  bottom: 70px;\n`;\n","import dagre from 'dagre';\nimport { isEdge, isNode } from 'react-flow-renderer';\nimport { BackgroundLabels, GraphLabels } from '../constants/constants';\nimport { baseNodeHeight, nodeWidth } from '../constants/units';\n\nvar aditionalSpaceMultiplier = 2;\n\n// Initialize graph.\nconst dagreGraph = new dagre.graphlib.Graph();\n\n// Default to assigning a new object as a label for each new edge.\ndagreGraph.setDefaultEdgeLabel(() => ({}));\n\n/**\n * SOS: This function is complicated, check dagre documentation and dagre examples to get more information about it.\n * @param {*} nodesAndEdges the nodes and edges of the tree.\n * @param {*} treeLayoutDirection The layout direction of the tree. Read more here: https://g6.antv.vision/en/docs/api/graphLayout/dagre. It is set to a value, as this is the way JS understands optional params.\n * @param {*} setTreeLayoutDirection Setting the direction state, to use it for handles positioning.\n * @function graphElement.position Stephan: Unfortunately we need this little hack to pass a slighltiy different position to notify react flow about the change. More over we are shifting the dagre node position (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\n * @returns layouted nodes and edges.\n */\nexport const getLayoutedGraphElements = (\n  nodesAndEdges,\n  treeLayoutDirection = GraphLabels.topToBottom,\n  setTreeLayoutDirection = () => {},\n  componentBackground\n) => {\n  // Set objects for graph labels and the graph's layout direction.\n  dagreGraph.setGraph({ rankdir: treeLayoutDirection });\n\n  const isVerticalLayout = treeLayoutDirection === GraphLabels.leftToRight;\n\n  nodesAndEdges.forEach((graphElement) => {\n    if (isNode(graphElement)) {\n      if (treeLayoutDirection === GraphLabels.topToBottom) {\n        if (componentBackground.mode === BackgroundLabels.size) {\n          dagreGraph.setNode(graphElement.id, {\n            width: nodeWidth,\n            height:\n              baseNodeHeight * aditionalSpaceMultiplier +\n              graphElement.data.linesOfCode,\n          });\n        } else {\n          dagreGraph.setNode(graphElement.id, {\n            width: nodeWidth,\n            height: baseNodeHeight * 2.5,\n          });\n        }\n      }\n\n      if (treeLayoutDirection == GraphLabels.leftToRight) {\n        if (componentBackground.mode === BackgroundLabels.size) {\n          dagreGraph.setNode(graphElement.id, {\n            width: nodeWidth * aditionalSpaceMultiplier,\n            height: baseNodeHeight + graphElement.data.linesOfCode,\n          });\n        }\n        dagreGraph.setNode(graphElement.id, {\n          width: nodeWidth * 2.5,\n          height: baseNodeHeight,\n        });\n      }\n    }\n\n    if (isEdge(graphElement)) {\n      dagreGraph.setEdge(graphElement.source, graphElement.target);\n    }\n  });\n\n  dagre.layout(dagreGraph);\n\n  // Inform the application about the tree layout at all times.\n  setTreeLayoutDirection(treeLayoutDirection);\n\n  return nodesAndEdges.map((graphElement) => {\n    if (isNode(graphElement)) {\n      const nodeWithPosition = dagreGraph.node(graphElement.id);\n\n      // Position edge-node handle elements.\n      graphElement.targetPosition = isVerticalLayout ? 'left' : 'top';\n      graphElement.sourcePosition = isVerticalLayout ? 'right' : 'bottom';\n\n      if (treeLayoutDirection === GraphLabels.topToBottom) {\n        if (componentBackground.mode === BackgroundLabels.size) {\n          graphElement.position = {\n            x: nodeWithPosition.x - nodeWidth + Math.random() / 1000,\n            y: nodeWithPosition.y - (36 + graphElement.data.linesOfCode) / 3,\n          };\n        } else {\n          graphElement.position = {\n            x: nodeWithPosition.x - nodeWidth,\n            y: nodeWithPosition.y - baseNodeHeight,\n          };\n        }\n      }\n\n      if (treeLayoutDirection === GraphLabels.leftToRight) {\n        if (componentBackground.mode === BackgroundLabels.size) {\n          graphElement.position = {\n            x:\n              nodeWithPosition.x -\n              (nodeWidth + graphElement.data.linesOfCode) / 3,\n            y: nodeWithPosition.y - baseNodeHeight + Math.random() / 1000,\n          };\n        } else {\n          graphElement.position = {\n            x:\n              nodeWithPosition.x -\n              (nodeWidth * aditionalSpaceMultiplier) / 2 +\n              Math.random() / 1000,\n            y: nodeWithPosition.y,\n          };\n        }\n      }\n    }\n\n    return graphElement;\n  });\n};\n","import {\n  faGripHorizontal,\n  faGripVertical,\n} from '@fortawesome/free-solid-svg-icons';\nimport React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  LayoutButton,\n  LayoutButtonsWrapper,\n  StyledFontAwesomeIcon,\n} from '../ComponentTree.sc';\nimport { getLayoutedGraphElements } from '../../../utils/functions/graphUtils';\nimport { useZoomPanHelper } from 'react-flow-renderer';\nimport ComponentBackgroundContext from '../../../contexts/ComponentBackgroundContext';\nimport { ButtonLabels, GraphLabels } from '../../../utils/constants/constants';\n\nexport const LayoutButtons = ({\n  layoutedNodesAndEdges,\n  setLayoutedNodesAndEdges,\n  setTreeLayoutDirection,\n}) => {\n  // Get the instance of the tree, so that we can use .fitView().\n  const reactFlowInstance = useZoomPanHelper();\n\n  const { componentBackground } = useContext(ComponentBackgroundContext);\n\n  // Change the layout of the tree on button click.\n  const onChangeTreeLayout = useCallback(\n    (treeLayoutDirection) => {\n      const els = getLayoutedGraphElements(\n        layoutedNodesAndEdges,\n        treeLayoutDirection,\n        setTreeLayoutDirection,\n        componentBackground\n      );\n      setLayoutedNodesAndEdges(els);\n    },\n    [layoutedNodesAndEdges]\n  );\n\n  return (\n    <LayoutButtonsWrapper>\n      <LayoutButton\n        shape=\"round\"\n        type=\"primary\"\n        size=\"middle\"\n        onClick={() => {\n          onChangeTreeLayout(GraphLabels.topToBottom);\n          setTimeout(() => {\n            reactFlowInstance.fitView({ duration: 500 });\n          }, 0);\n        }}\n      >\n        {ButtonLabels.horizontal}\n        <StyledFontAwesomeIcon icon={faGripHorizontal} />\n      </LayoutButton>\n\n      <LayoutButton\n        shape=\"round\"\n        type=\"primary\"\n        size=\"middle\"\n        onClick={() => {\n          onChangeTreeLayout(GraphLabels.leftToRight);\n          setTimeout(() => {\n            reactFlowInstance.fitView({ duration: 500 });\n          }, 0);\n        }}\n      >\n        {ButtonLabels.vertical}\n        <StyledFontAwesomeIcon icon={faGripVertical} />\n      </LayoutButton>\n    </LayoutButtonsWrapper>\n  );\n};\n\nexport default LayoutButtons;\n\nLayoutButtons.propTypes = {\n  layoutedNodesAndEdges: PropTypes.any,\n  setLayoutedNodesAndEdges: PropTypes.any,\n  setTreeLayoutDirection: PropTypes.any,\n};\n","import ReactFlow, { isNode, useZoomPanHelper } from 'react-flow-renderer';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useState, useEffect } from 'react';\nimport HighlightedComponentsContext from '../../contexts/HighlightedComponentsContext';\nimport ComponentNode from '../ComponentNode/ComponentNode';\nimport LayoutButtons from './private/LayoutButtons';\nimport { ZoomControlButtons } from './ComponentTree.sc';\n// import { DraggableContent } from '../../App';\n\n// Create context to provide the tree layout direction to the children.\nexport const GraphDirectionContext = React.createContext(null);\n\nconst ComponentTree = ({\n  nodesAndEdges,\n  isFilterMode,\n  componentLabelFilter,\n  componentNumberFilter,\n  componentNameFilter,\n  treeLayoutDirection,\n  setTreeLayoutDirection,\n  setIsDragging,\n}) => {\n  const [layoutedNodesAndEdges, setLayoutedNodesAndEdges] =\n    useState(nodesAndEdges);\n\n  // Filter: Will run when the filter switch is toggled on/off.\n  useEffect(() => {\n    setFilteredNodesAndEdges(\n      filterLeaveOnlyComponentsByName(layoutedNodesAndEdges, rootComponentLabel)\n    );\n    setTimeout(() => reactFlowInstance.fitView({ duration: 500 }), 0);\n  }, [isFilterMode]);\n\n  // Filter: Hides all components but the one specified by the chosen name and its subtree.\n  useEffect(() => {\n    setFilteredNodesAndEdges(\n      filterLeaveOnlyComponentsByName(\n        layoutedNodesAndEdges,\n        componentLabelFilter\n      )\n    );\n    setTimeout(() => reactFlowInstance.fitView({ duration: 500 }), 0);\n  }, [componentLabelFilter]);\n\n  // Filter: Hides componenets used more times than the given number (can't be lower then 1).\n  useEffect(() => {\n    const number = componentNumberFilter < 1 ? 1000 : componentNumberFilter;\n    setFilteredNodesAndEdges(\n      filterRemoveComponentsUsedMoreTimesThan(layoutedNodesAndEdges, number)\n    );\n    setTimeout(() => reactFlowInstance.fitView({ duration: 500 }), 0);\n  }, [componentNumberFilter]);\n\n  // Filter: Hides the component specified by the given name and its subtree.\n  useEffect(() => {\n    setFilteredNodesAndEdges(\n      filterRemoveComponentsByName(filteredNodesAndEdges, componentNameFilter)\n    );\n    setTimeout(() => reactFlowInstance.fitView({ duration: 500 }), 0);\n  }, [componentNameFilter]);\n\n  const [filteredNodesAndEdges, setFilteredNodesAndEdges] = useState([]);\n\n  // The first node of data is always the root component.\n  const rootComponentLabel = layoutedNodesAndEdges\n    ? layoutedNodesAndEdges[0]?.data?.label\n    : 'App';\n\n  const reactFlowInstance = useZoomPanHelper();\n\n  /**\n   * Filters the given array of nodes and edges and leaves only the ones associated with the given component name.\n   * @param {*} incomingDataArray Array to filter.\n   * @param {*} componentName Component name.\n   */\n  function filterLeaveOnlyComponentsByName(incomingDataArray, componentName) {\n    const result = incomingDataArray.filter((obj) => {\n      if (isNode(obj)) {\n        return obj.id.split(':').includes(componentName);\n      } else {\n        return obj.source.split(':').includes(componentName);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Filters the given array of nodes and edges and removes component used more times than the given number.\n   * @param {*} incomingDataArray Array to filter.\n   * @param {*} number Number of times used.\n   */\n  function filterRemoveComponentsUsedMoreTimesThan(incomingDataArray, number) {\n    const result = incomingDataArray.filter((obj) => {\n      if (isNode(obj)) {\n        return obj.data.component.timesUsed <= number;\n      } else {\n        return obj;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Filters the given array of nodes and edges and leaves only the ones associated with the given component name.\n   * @param {*} incomingDataArray Array to filter.\n   * @param {*} componentName Component name.\n   */\n  function filterRemoveComponentsByName(incomingDataArray, componentName) {\n    const result = incomingDataArray.filter((obj) => {\n      if (isNode(obj)) {\n        return !obj.id.split(':').includes(componentName);\n      } else {\n        return !obj.source.split(':').includes(componentName);\n      }\n    });\n    return result;\n  }\n\n  const { highlightedComponents, setHighlightedComponents } = useContext(\n    HighlightedComponentsContext\n  );\n\n  // Fit tree on the screen\n  const onLoadTree = (reactFlowInstance) =>\n    reactFlowInstance.fitView({ duration: 500 });\n\n  // Highlight nodes on hover\n  const highlightComponent = (node) => {\n    const componentName = node ? node.data.label : null;\n    setHighlightedComponents([\n      ...highlightedComponents.filter((_node) => _node.locked),\n      {\n        id: node.id,\n        componentName: componentName,\n        locked: false,\n        search: false,\n      },\n    ]);\n  };\n\n  // Stop highlighting\n  const removeHighlight = (node) => {\n    const index = highlightedComponents.findIndex(\n      (component) => component.id === node.id\n    );\n    if (index !== -1) {\n      const highlightedComponent = highlightedComponents[index];\n      if (!highlightedComponent.locked) {\n        const array = [...highlightedComponents];\n        array.splice(index, 1);\n        setHighlightedComponents(array);\n      }\n    }\n  };\n\n  // Holds the state for the user interaction\n  const [isTrackPad, setIsTrackPad] = useState(false);\n\n  const onDragStart = () => {\n    setIsDragging(true);\n  };\n\n  const onDragStop = () => {\n    setTimeout(setIsDragging(false), 2000);\n  };\n\n  /**\n   * @description this function spots if the user uses a mousepad or a\n   * trackpad, and the pane interaction changes accordingly. The interaction\n   * is done like a Figma canvas. We need this, as, otherwise, it moves the\n   * canvas on mouse scroll.\n   * @param {*} e mouse or trackpad event\n   */\n  function detectTrackPad(e) {\n    var isTouchPad = e.wheelDeltaY\n      ? e.wheelDeltaY === -3 * e.deltaY\n      : e.deltaMode === 0;\n\n    setIsTrackPad(isTouchPad);\n  }\n\n  const reactFlowPane = document.querySelector('.react-flow__pane');\n\n  if (reactFlowPane) {\n    reactFlowPane.addEventListener('mousewheel', detectTrackPad, false);\n    reactFlowPane.addEventListener('DOMMouseScroll', detectTrackPad, false);\n  }\n\n  // Reset highlightComponents (Empty array).\n  const resetHighlight = () => setHighlightedComponents([]);\n\n  // Conditionally passing nodes and edges to the onChangeTreeLayout, so that we can\n  // change the positioning dynamically based on the direction of the tree.\n  const renderedElementsToPosition =\n    filteredNodesAndEdges && isFilterMode === true\n      ? filteredNodesAndEdges\n      : layoutedNodesAndEdges;\n\n  // setting the fresh layouted elements, KiKi GangGang\n  const setRenderedElementsToPosition =\n    filteredNodesAndEdges && isFilterMode === true\n      ? setFilteredNodesAndEdges\n      : setLayoutedNodesAndEdges;\n\n  return (\n    <>\n      {layoutedNodesAndEdges && (\n        <GraphDirectionContext.Provider value={treeLayoutDirection}>\n          <LayoutButtons\n            setTreeLayoutDirection={setTreeLayoutDirection}\n            layoutedNodesAndEdges={renderedElementsToPosition}\n            setLayoutedNodesAndEdges={setRenderedElementsToPosition}\n          />\n\n          <ReactFlow\n            onLoad={onLoadTree}\n            elements={\n              isFilterMode ? filteredNodesAndEdges : layoutedNodesAndEdges\n            }\n            nodeTypes={{ reactComponent: ComponentNode }}\n            onNodeMouseEnter={(_e, node) => highlightComponent(node, false)}\n            onNodeMouseLeave={(_e, node) => removeHighlight(node)}\n            onPaneClick={resetHighlight}\n            onNodeDrag={onDragStart}\n            onNodeDragStart={onDragStart}\n            onNodeDragStop={onDragStop}\n            panOnScroll={isTrackPad}\n            minZoom={0}\n            defaultZoom={0}\n          >\n            <ZoomControlButtons />\n          </ReactFlow>\n        </GraphDirectionContext.Provider>\n      )}\n    </>\n  );\n};\n\nComponentTree.propTypes = {\n  nodesAndEdges: PropTypes.any,\n  treeLayoutDirection: PropTypes.any,\n  componentLabelFilter: PropTypes.any,\n  componentNumberFilter: PropTypes.any,\n  componentNameFilter: PropTypes.any,\n  setTreeLayoutDirection: PropTypes.any,\n  isFilterMode: PropTypes.any,\n  setIsDragging: PropTypes.any,\n};\n\nexport default ComponentTree;\n","import { useEffect, useState } from 'react';\n\n// Sticky, as it saves the key-value pairs in local storage.\nconst useStickyState = (defaultValue, key) => {\n  const [value, setValue] = useState(() => {\n    // getItem() returns the value associated with the given key\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n  });\n\n  useEffect(() => {\n    // Set the new value in local storage.\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n};\n\nexport default useStickyState;\n","import { Row } from 'antd';\nimport styled from 'styled-components';\n\nexport const ComponentCodeRow = styled(Row)`\n  pre {\n    width: 100%;\n  }\n`;\n","import { LoadingOutlined } from '@ant-design/icons';\nimport { Divider } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nimport { ComponentCodeRow } from './ComponentCode.sc';\n\n// nodeDetail gives us additional information about the component.\nconst ComponentCode = ({ nodeDetail }) => {\n  if (!nodeDetail.visible) {\n    return <LoadingOutlined spin />;\n  }\n\n  return (\n    <div>\n      <ComponentCodeRow>\n        <SyntaxHighlighter\n          style={vscDarkPlus}\n          showLineNumbers={true}\n          language=\"javascript\"\n        >\n          {nodeDetail.node.data.code}\n        </SyntaxHighlighter>\n        <Divider />\n      </ComponentCodeRow>\n    </div>\n  );\n};\n\nComponentCode.propTypes = {\n  nodeDetail: PropTypes.any,\n};\n\nexport default ComponentCode;\n","import { Collapse, Image } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nconst { Panel } = Collapse;\nimport React from 'react';\nimport { HelpPanelLabels } from '../../../utils/constants/constants';\n\nconst EdgesSection = () => {\n  return (\n    <>\n      <Paragraph>{HelpPanelLabels.edges.text}</Paragraph>\n\n      <Collapse>\n        <Panel\n          key={HelpPanelLabels.edges.default.key}\n          header={HelpPanelLabels.edges.default.header}\n        >\n          <Paragraph>{HelpPanelLabels.edges.default.text}</Paragraph>\n          <Image src={HelpPanelLabels.edges.default.img} />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.edges.conditional.header}>\n          <Paragraph>{HelpPanelLabels.edges.conditional.text}</Paragraph>\n          <Image src={HelpPanelLabels.edges.conditional.img} />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.edges.router.header}>\n          <Paragraph>{HelpPanelLabels.edges.router.text}</Paragraph>\n          <Image src={HelpPanelLabels.edges.router.img} />\n        </Panel>\n      </Collapse>\n    </>\n  );\n};\n\nexport default EdgesSection;\n","import { Divider } from 'antd';\nimport { Typography } from 'antd';\nconst { Link } = Typography;\nimport styled from 'styled-components';\nimport { baseUnit } from '../../utils/constants/units';\n\nexport const VerticalDivider = styled(Divider)`\n  height: auto;\n  width: 1px;\n`;\n\nexport const CheckboxWrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n`;\n\nexport const StyledLink = styled(Link)`\n  margin-left: 9px;\n  margin-top: ${baseUnit / 2}px;\n  display: inline-block;\n`;\n\nexport const StyledLi = styled.li`\n  list-style-type: none;\n`;\n\nexport const StyledUl = styled.ul`\n  padding: 0;\n`;\n","import { Typography } from 'antd';\nimport React from 'react';\nimport { ButtonLabels, UrlLabels } from '../../../../utils/constants/constants';\nimport { StyledLi } from '../../../HelpPanel/HelpPanel.sc';\nconst { Link } = Typography;\n\n// Buttons on sider to submit feedback, bugs and potential features\nconst NavigationGitHubActions = () => {\n  return (\n    <ul>\n      <StyledLi>\n        <Link target=\"_blank\" href={UrlLabels.feedback}>\n          {ButtonLabels.feedback}\n        </Link>\n      </StyledLi>\n\n      <StyledLi>\n        <Link target=\"_blank\" href={UrlLabels.bug}>\n          {ButtonLabels.bug}\n        </Link>\n      </StyledLi>\n\n      <StyledLi>\n        <Link target=\"_blank\" href={UrlLabels.feature}>\n          {ButtonLabels.feature}\n        </Link>\n      </StyledLi>\n    </ul>\n  );\n};\n\nexport default NavigationGitHubActions;\n","import {\n  GithubOutlined,\n  ReadOutlined,\n  YoutubeOutlined,\n} from '@ant-design/icons';\n\nimport React from 'react';\nimport { HelpPanelLabels } from '../../../utils/constants/constants';\nimport NavigationGitHubActions from '../../NavigationPanel/private/ActionButtons/NavigationGitHubActions';\nimport { StyledLi, StyledLink, StyledUl } from '../HelpPanel.sc';\n\nconst LinksSection = () => {\n  return (\n    <>\n      <StyledUl>\n        <StyledLi>\n          <GithubOutlined />\n          <StyledLink href={HelpPanelLabels.links.repoUrl}>\n            {HelpPanelLabels.links.repo}\n          </StyledLink>\n          <NavigationGitHubActions />\n        </StyledLi>\n\n        <StyledLi>\n          <ReadOutlined />\n          <StyledLink href={HelpPanelLabels.links.changelogUrl}>\n            {HelpPanelLabels.links.changeLog}\n          </StyledLink>\n        </StyledLi>\n\n        <StyledLi>\n          <YoutubeOutlined />\n          <StyledLink href={HelpPanelLabels.links.demoUrl}>\n            {HelpPanelLabels.links.demo}\n          </StyledLink>\n        </StyledLi>\n      </StyledUl>\n    </>\n  );\n};\n\nexport default LinksSection;\n","import { Collapse, Image } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nconst { Panel } = Collapse;\nimport React from 'react';\nimport { HelpPanelLabels } from '../../../utils/constants/constants';\n\nconst NodesSection = () => {\n  return (\n    <>\n      <Paragraph>{HelpPanelLabels.nodes.text}</Paragraph>\n\n      <Collapse>\n        <Panel key={''} header={HelpPanelLabels.nodes.default.header}>\n          <Paragraph>{HelpPanelLabels.nodes.default.text}</Paragraph>\n          <Image src={HelpPanelLabels.nodes.default.img} />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.nodes.size.header}>\n          <Paragraph>{HelpPanelLabels.nodes.size.text}</Paragraph>\n          <Image src={HelpPanelLabels.nodes.size.img} />\n        </Panel>\n\n        <Panel\n          key={HelpPanelLabels.nodes.color.key}\n          header={HelpPanelLabels.nodes.color.header}\n        >\n          <Paragraph>{HelpPanelLabels.nodes.color.text}</Paragraph>\n          <Image src={HelpPanelLabels.nodes.color.img} />\n        </Panel>\n      </Collapse>\n    </>\n  );\n};\n\nexport default NodesSection;\n","import React from 'react';\nimport Checkbox from 'antd/lib/checkbox/Checkbox';\nimport { CheckboxWrapper, VerticalDivider } from '../HelpPanel.sc';\nimport { HelpPanelLabels } from '../../../utils/constants/constants';\nimport { PreferencesProps } from '../../../interfaces/component-interfaces';\n\n// User can disable help on startup and choose vertical layout as default.\nexport const PreferencesSection = ({\n  isHelpHiddenOnStartUp,\n  setIsHelpHiddenOnStartUp,\n  isVerticalTreeLayoutAsDefault,\n  setVerticalTreeLayoutAsDefault,\n}: PreferencesProps) => {\n  return (\n    <CheckboxWrapper>\n      <Checkbox\n        checked={isHelpHiddenOnStartUp}\n        onChange={(e) => setIsHelpHiddenOnStartUp(e.target.checked)}\n      >\n        {HelpPanelLabels.pref.help}\n      </Checkbox>\n      <VerticalDivider type=\"vertical\" />\n      <Checkbox\n        checked={isVerticalTreeLayoutAsDefault}\n        onChange={(e) => setVerticalTreeLayoutAsDefault(e.target.checked)}\n      >\n        {HelpPanelLabels.pref.tree}\n      </Checkbox>\n    </CheckboxWrapper>\n  );\n};\n\nexport default PreferencesSection;\n","import { Collapse, Drawer, Typography } from 'antd';\nimport Paragraph from 'antd/lib/typography/Paragraph';\nimport React from 'react';\nimport { HelpPanelProps } from '../../interfaces/component-interfaces';\nimport { HelpPanelLabels } from '../../utils/constants/constants';\nimport EdgesSection from './private/EdgesSection';\nimport LinksSection from './private/LinksSection';\nimport NodesSection from './private/NodesSection';\nimport PreferencesSection from './private/PreferencesSection';\nconst { Title } = Typography;\nconst { Panel } = Collapse;\n\nconst HelpPanel = ({\n  isHelpVisible,\n  setIsHelpVisible,\n  isHelpHiddenOnStartUp,\n  setIsHelpHiddenOnStartUp,\n  isVerticalTreeLayoutAsDefault,\n  setVerticalTreeLayoutAsDefault,\n}: HelpPanelProps) => {\n  return (\n    <Drawer\n      width={720}\n      onClose={() => setIsHelpVisible(false)}\n      visible={isHelpVisible}\n      bodyStyle={{ paddingBottom: 80 }}\n    >\n      <Title level={3}>{HelpPanelLabels.title}</Title>\n      <Title level={5}>{HelpPanelLabels.thanks}</Title>\n      <Paragraph>{HelpPanelLabels.purpose}</Paragraph>\n\n      <Collapse defaultActiveKey={HelpPanelLabels.pref.key}>\n        <Panel key={''} header={HelpPanelLabels.nodes.title}>\n          <NodesSection />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.edges.title}>\n          <EdgesSection />\n        </Panel>\n\n        <Panel\n          key={HelpPanelLabels.pref.key}\n          header={HelpPanelLabels.pref.title}\n        >\n          <PreferencesSection\n            isHelpHiddenOnStartUp={isHelpHiddenOnStartUp}\n            setIsHelpHiddenOnStartUp={setIsHelpHiddenOnStartUp}\n            isVerticalTreeLayoutAsDefault={isVerticalTreeLayoutAsDefault}\n            setVerticalTreeLayoutAsDefault={setVerticalTreeLayoutAsDefault}\n          />\n        </Panel>\n\n        <Panel key={''} header={HelpPanelLabels.links.title}>\n          <LinksSection />\n        </Panel>\n      </Collapse>\n    </Drawer>\n  );\n};\n\nexport default HelpPanel;\n","// Would be nice to work on this file in the future, and\n// use the library instead of having this kind of duplication\n\nimport React from 'react';\nimport { CSSProperties } from 'react';\nimport cc from 'classcat';\n\ninterface MiniMapNodeProps {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  borderRadius: number;\n  className: string;\n  color: string;\n  shapeRendering: string;\n  strokeColor: string;\n  strokeWidth: number;\n  style?: CSSProperties;\n}\n\nconst MiniMapNode = ({\n  x,\n  y,\n  width,\n  height,\n  style,\n  color,\n  strokeColor,\n  strokeWidth,\n  className,\n  borderRadius,\n  shapeRendering,\n}: MiniMapNodeProps) => {\n  const { background, backgroundColor } = style || {};\n  const fill = String(color || background || backgroundColor);\n\n  return (\n    <rect\n      className={cc(['react-flow__minimap-node', className])}\n      x={x}\n      y={y}\n      rx={borderRadius}\n      ry={borderRadius}\n      width={width}\n      height={height}\n      fill={fill}\n      stroke={strokeColor}\n      strokeWidth={strokeWidth}\n      shapeRendering={shapeRendering}\n    />\n  );\n};\n\nMiniMapNode.displayName = 'MiniMapNode';\n\nexport default MiniMapNode;\n","// Would be nice to work on this file in the future, and\n// use the library instead of having this kind of duplication\n\nimport React from 'react';\nimport { HTMLAttributes, useCallback, useRef } from 'react';\nimport cc from 'classcat';\nimport {\n  Node,\n  Rect,\n  Box,\n  useStoreState,\n  getRectOfNodes,\n  useZoomPanHelper,\n} from 'react-flow-renderer';\nimport MiniMapNode from './MiniMapNode';\nimport {\n  createUseGesture,\n  UserHandlers,\n  wheelAction,\n  dragAction,\n} from '@use-gesture/react';\n\ntype StringFunc = (node: Node) => string;\n\nexport interface MiniMapProps extends HTMLAttributes<SVGSVGElement> {\n  nodeColor?: string | StringFunc;\n  nodeStrokeColor?: string | StringFunc;\n  nodeClassName?: string | StringFunc;\n  nodeBorderRadius?: number;\n  nodeStrokeWidth?: number;\n  maskColor?: string;\n}\n\nconst defaultWidth = 300;\nconst defaultHeight = 220;\n\nconst getBoundsOfBoxes = (box1: Box, box2: Box): Box => ({\n  x: Math.min(box1.x, box2.x),\n  y: Math.min(box1.y, box2.y),\n  x2: Math.max(box1.x2, box2.x2),\n  y2: Math.max(box1.y2, box2.y2),\n});\n\nconst rectToBox = ({ x, y, width, height }: Rect): Box => ({\n  x,\n  y,\n  x2: x + width,\n  y2: y + height,\n});\n\nconst boxToRect = ({ x, y, x2, y2 }: Box): Rect => ({\n  x,\n  y,\n  width: x2 - x,\n  height: y2 - y,\n});\n\nconst getBoundsofRects = (rect1: Rect, rect2: Rect): Rect =>\n  boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\n\nconst useGesture = createUseGesture([dragAction, wheelAction]);\n\nconst MiniMap = ({\n  style,\n  className,\n  nodeStrokeColor = '#555',\n  nodeColor = '#fff',\n  nodeClassName = '',\n  nodeBorderRadius = 5,\n  nodeStrokeWidth = 2,\n  maskColor = 'rgb(240, 242, 243, 0.5)',\n}: MiniMapProps) => {\n  const containerWidth = useStoreState((s) => s.width);\n  const containerHeight = useStoreState((s) => s.height);\n  const [tX, tY, tScale] = useStoreState((s) => s.transform);\n  const nodes = useStoreState((s) => s.nodes);\n\n  const mapClasses = cc(['react-flow__minimap', className]);\n  const elementWidth = Number(style?.width || defaultWidth);\n  const elementHeight = Number(style?.height || defaultHeight);\n  const nodeColorFunc =\n    nodeColor instanceof Function ? nodeColor : () => nodeColor;\n  const nodeStrokeColorFunc =\n    nodeStrokeColor instanceof Function\n      ? nodeStrokeColor\n      : () => nodeStrokeColor;\n  const nodeClassNameFunc =\n    nodeClassName instanceof Function ? nodeClassName : () => nodeClassName;\n  const hasNodes = nodes && nodes.length;\n  const bb = getRectOfNodes(nodes);\n  const viewBB: Rect = {\n    x: -tX / tScale,\n    y: -tY / tScale,\n    width: containerWidth / tScale,\n    height: containerHeight / tScale,\n  };\n  const boundingRect = hasNodes ? getBoundsofRects(bb, viewBB) : viewBB;\n  const scaledWidth = boundingRect.width / elementWidth;\n  const scaledHeight = boundingRect.height / elementHeight;\n  const viewScale = Math.max(scaledWidth, scaledHeight);\n  const viewWidth = viewScale * elementWidth;\n  const viewHeight = viewScale * elementHeight;\n  const offset = 5 * viewScale;\n  const x = boundingRect.x - (viewWidth - boundingRect.width) / 2 - offset;\n  const y = boundingRect.y - (viewHeight - boundingRect.height) / 2 - offset;\n  const width = viewWidth + offset * 2;\n  const height = viewHeight + offset * 2;\n  const shapeRendering =\n    typeof window === 'undefined' ? 'crispEdges' : 'geometricPrecision';\n\n  const minZoom = useStoreState((s) => s.minZoom);\n  const maxZoom = useStoreState((s) => s.maxZoom);\n\n  const rectRef = useRef<SVGRectElement>(null);\n\n  const { transform } = useZoomPanHelper();\n\n  const onDrag = useCallback<UserHandlers['onDrag']>(\n    ({ delta: [x, y] }) => {\n      transform({\n        x: tX + -x * tScale * scaledWidth,\n        y: tY + -y * tScale * scaledHeight,\n        zoom: tScale,\n      });\n    },\n    [scaledHeight, scaledWidth, tScale, tX, tY, transform]\n  );\n\n  const onWheel = useCallback<UserHandlers['onWheel']>(\n    ({ event: { clientX, clientY, deltaY }, active }) => {\n      if (!active) return;\n      const sign = Math.sign(deltaY);\n\n      const { x, y } = rectRef.current?.getBoundingClientRect() || {\n        x: clientX,\n        y: clientY,\n      };\n      const pX = clientX - x;\n      const pY = clientY - y;\n\n      const multiplier = sign === -1 ? 1.2 : sign === 1 ? 1 / 1.2 : 1;\n      const zoom = tScale * multiplier;\n      if (zoom > maxZoom || zoom < minZoom) return;\n      transform({\n        x: tX + sign * pX * zoom,\n        y: tY + sign * pY * zoom,\n        zoom,\n      });\n    },\n    [tScale, maxZoom, minZoom, transform, tX, tY]\n  );\n\n  const bind = useGesture({\n    onWheel,\n    onDrag,\n  });\n\n  return (\n    <svg\n      viewBox={`${x} ${y} ${width} ${height}`}\n      style={style}\n      className={mapClasses}\n    >\n      {nodes\n        .filter((node) => !node.isHidden)\n        .map((node) => (\n          <MiniMapNode\n            key={node.id}\n            x={node.__rf.position.x}\n            y={node.__rf.position.y}\n            width={node.__rf.width}\n            height={node.__rf.height}\n            style={node.style}\n            className={nodeClassNameFunc(node)}\n            color={nodeColorFunc(node)}\n            borderRadius={nodeBorderRadius}\n            strokeColor={nodeStrokeColorFunc(node)}\n            strokeWidth={nodeStrokeWidth}\n            shapeRendering={shapeRendering}\n          />\n        ))}\n      <rect\n        ref={rectRef}\n        className=\"react-flow__minimap-mask\"\n        x={viewBB.x}\n        y={viewBB.y}\n        width={viewBB.width}\n        height={viewBB.height}\n        fill={maskColor}\n        fillRule=\"evenodd\"\n        style={{\n          touchAction: 'none',\n        }}\n        {...bind()}\n      />\n    </svg>\n  );\n};\n\nMiniMap.displayName = 'MiniMap';\n\nexport default MiniMap;\n","import MiniMap from './MiniMap';\nimport styled from 'styled-components';\n\nimport { baseUnit } from '../../utils/constants/units';\n\nconst StyledMiniMap = styled(MiniMap)`\n  position: absolute;\n  width: 280px;\n  height: 205px;\n  right: ${baseUnit}px;\n  top: ${baseUnit}px;\n  border-radius: 15px;\n  border: 1px solid #001529;\n  opacity: 1;\n  -webkit-box-shadow: 4px 6px 11px -3px rgba(0, 0, 0, 0.84);\n  box-shadow: 4px 6px 11px -3px rgba(0, 0, 0, 0.84);\n`;\n\nexport default StyledMiniMap;\n","import { Button, Input, Select, Switch, TreeSelect } from 'antd';\nimport Sider from 'antd/lib/layout/Sider';\nimport MenuDivider from 'antd/lib/menu/MenuDivider';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nimport Text from 'antd/lib/typography/Text';\nimport Title from 'antd/lib/typography/Title';\nimport styled, { css } from 'styled-components';\nimport { Colors } from '../../utils/constants/colors';\nimport { baseUnit } from '../../utils/constants/units';\n\nexport const NavigationSider = styled(Sider)`\n  overflow: auto;\n  height: 100vh;\n  position: fixed;\n  left: 0;\n`;\n\nexport const AppTitle = styled(Title)`\n  color: #fff !important;\n  padding-left: 24px;\n  margin-top: 24px;\n  margin-bottom: 0;\n`;\n\nexport const StyledSubMenu = styled(SubMenu)`\n  font-size: 16px;\n\n  .ant-menu-inline.ant-menu-sub {\n    background-color: hsl(209, 100%, 11%);\n  }\n\n  .ant-menu-submenu {\n    background-color: #001529;\n  }\n`;\n\nconst navigationDropdownStyles = css`\n  width: 100%;\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n\n  .ant-select-arrow {\n    margin-right: ${baseUnit * 2}px;\n    cursor: pointer;\n    color: #001529;\n  }\n`;\n\nexport const DropdownInput = styled(Select)`\n  ${navigationDropdownStyles}\n`;\n\nexport const BaselineInputWrapper = styled.div`\n  ${navigationDropdownStyles}\n`;\n\nexport const TreeComponentDropdown = styled(TreeSelect)`\n  ${navigationDropdownStyles}\n`;\n\nexport const SubtreeSwitchWrapper = styled.div`\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const FilterSwitch = styled(Switch)`\n  &[aria-checked='false'] {\n    background-color: rgba(0, 0, 0);\n  }\n`;\n\nexport const StyledDropDownSelect = {\n  maxHeight: 550,\n  maxWidth: 302,\n  minWidth: 'unset',\n  width: 302,\n  overflow: 'auto',\n};\n\nexport const StyledMenuDivider = styled(MenuDivider)`\n  margin: 0 ${baseUnit / 2}px !important;\n`;\n\nexport const SearchNodeExplanationText = styled(Text)`\n  display: block;\n  color: white;\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n  line-height: normal;\n`;\n\nexport const SubtreeModeText = styled(Text)`\n  color: white;\n`;\n\nexport const TimesUsedInputGroup = styled(Input.Group)`\n  padding: 0 ${baseUnit * 2}px ${baseUnit * 2}px;\n  .ant-input {\n    width: 65%;\n  }\n`;\n\nexport const TimesUsedButton = styled(Button)`\n  width: 35%;\n`;\n\nexport const ImportantKeyword = styled.span`\n  color: ${Colors.leaf};\n`;\n","import { Button } from 'antd';\nimport styled, { css } from 'styled-components';\nimport { baseUnit } from '../../../../utils/constants/units';\n\nconst navigationButtonsWrapperStyles = css`\n  display: flex;\n  flex-direction: column;\n  column-gap: 5px;\n`;\n\nexport const PrimaryActionsWrapper = styled.div`\n  ${navigationButtonsWrapperStyles};\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n  flex-direction: row;\n  row-gap: 10px;\n  width: 100%;\n`;\n\nexport const GitHubActionsWrapper = styled.div`\n  ${navigationButtonsWrapperStyles};\n  padding: ${baseUnit}px ${baseUnit * 4}px;\n`;\n\nexport const RecompileActionsWrapper = styled.div`\n  ${navigationButtonsWrapperStyles};\n  padding: ${baseUnit}px ${baseUnit * 2}px;\n  flex-direction: column;\n  gap: 10px;\n  width: 100%;\n`;\n\nexport const ActionButton = styled(Button)`\n  width: 180px;\n  margin-bottom: 10px;\n`;\n","import React from 'react';\nimport { ApartmentOutlined, ReloadOutlined } from '@ant-design/icons';\nimport { Input } from 'antd';\nimport {\n  ActionButton,\n  RecompileActionsWrapper,\n} from '../ActionButtons/ActionButtons.sc';\nimport { useState } from 'react';\nimport { makeConfiguration, recompile } from '../../../../api';\nimport { ButtonLabels } from '../../../../utils/constants/constants';\n\nexport const NavExperimentalActions = () => {\n  const [customRootComponents, setCustomRootComponents] = useState('App');\n\n  const triggerRecompile = () => {\n    recompile()\n      .then(location.reload())\n      .catch((error) => console.log('An error occurred ', error));\n  };\n\n  const triggerCustomConfiguration = (newRoots) => {\n    makeConfiguration(newRoots).then(triggerRecompile());\n  };\n\n  function handleChange(e) {\n    setCustomRootComponents(e.target.value);\n  }\n\n  return (\n    <RecompileActionsWrapper>\n      <Input.Group compact>\n        <Input\n          name=\"newCustomRoots\"\n          value={customRootComponents}\n          onChange={handleChange}\n        />\n      </Input.Group>\n\n      <br />\n      <br />\n\n      <ActionButton\n        type=\"primary\"\n        shape=\"round\"\n        size=\"middle\"\n        icon={<ApartmentOutlined />}\n        onClick={() => triggerCustomConfiguration(customRootComponents)}\n      >\n        {'Set custom roots'}\n      </ActionButton>\n\n      <ActionButton\n        type=\"primary\"\n        shape=\"round\"\n        size=\"middle\"\n        icon={<ReloadOutlined />}\n        onClick={() => triggerCustomConfiguration('App')}\n      >\n        {ButtonLabels.recompile}\n      </ActionButton>\n    </RecompileActionsWrapper>\n  );\n};\n\nexport default NavExperimentalActions;\n","// Focus navigation search bar on keypress for both Mac and Windows\n\nexport const focusSearchDropdown = () => {\n  window.addEventListener('keydown', function (e) {\n    if ((e.ctrlKey && e.keyCode === 70) || (e.metaKey && e.keyCode === 70)) {\n      if (\n        document.getElementById('search-component-dropdown') !==\n        document.activeElement\n      ) {\n        e.preventDefault();\n        document.getElementById('search-component-dropdown').focus();\n      } else {\n        return true;\n      }\n    }\n  });\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useStoreState, useZoomPanHelper } from 'react-flow-renderer';\nimport HighlightedComponentsContext from '../../../../contexts/HighlightedComponentsContext';\nimport {\n  StyledDropDownSelect,\n  TreeComponentDropdown,\n  SearchNodeExplanationText,\n  ImportantKeyword,\n} from '../../NavigationPanel.sc';\n// import { InitialNodesContext } from '../../../../App';\nimport { focusSearchDropdown } from '../../../../utils/functions/focusSearchDropdown';\n\nconst NavSearchComponent = () => {\n  const { setCenter } = useZoomPanHelper();\n\n  // Preserving the initial nodes in memory.\n  // const initialNodesContext = useContext(InitialNodesContext);\n\n  const { highlightedComponents, setHighlightedComponents } = useContext(\n    HighlightedComponentsContext\n  );\n\n  // Get the nodes from the state.\n  const nodes = useStoreState((store) => store.nodes);\n\n  // Selected node in searchbar.\n  const [searchField, setSearchField] = useState();\n\n  // Setting the nodes that appear in the searchbar.\n  const [searchOptions, setSearchOptions] = useState([]);\n\n  // Focus navigation search bar on keypress for both Mac and Windows\n  focusSearchDropdown();\n\n  // Bring selected node in the center of the screen.\n  const focusNode = (id) => {\n    const index = nodes.findIndex((node) => node.id == id);\n    const node = nodes[index];\n    const x = node.__rf.position.x + node.__rf.width / 2;\n    const y = node.__rf.position.y + node.__rf.height / 2;\n    const zoom = 1;\n\n    // functionality from useZoomPanHelper()\n    setCenter(x, y, zoom);\n  };\n\n  // Sets the in searchbar selected node. Finds the name of the component,\n  // highlights its subtree and focuses its root.\n  const onChange = (value) => {\n    setSearchField(value);\n    const arr = value.split(':');\n    const componentName = arr[arr.length - 1];\n    const index = highlightedComponents.findIndex(\n      (component) => component.id === value\n    );\n    const array = [...highlightedComponents];\n    array.splice(index, 1);\n    setHighlightedComponents([\n      {\n        id: value,\n        componentName: componentName,\n        locked: true,\n        search: false,\n      },\n    ]);\n    focusNode(value);\n  };\n\n  // Node names are in form of Parent:Children.\n  const getParentId = (id) => {\n    const idSplit = id.split(':');\n    if (idSplit.length == 1) {\n      return null;\n    }\n    idSplit.pop();\n    return idSplit.join(':');\n  };\n\n  // outDegree is 0 if the node has no descendants. Look at Graph.ts.\n  const isLeaf = (node) => {\n    return node.data.outDegree == 0;\n  };\n\n  // Returns a list of node objects, used in the TreeComponentDropdown.\n  const generateTreeNodes = () => {\n    if (nodes.length > 0) {\n      setSearchOptions(\n        nodes.map((node) => {\n          return {\n            id: node.id,\n            pId: getParentId(node.id),\n            title: node.data.label,\n            value: node.id,\n            isLeaf: isLeaf(node),\n          };\n        })\n      );\n    }\n  };\n\n  useEffect(() => {\n    setSearchField(null);\n  }, [nodes]);\n\n  useEffect(() => {\n    generateTreeNodes();\n  }, [nodes]);\n\n  return (\n    <>\n      <SearchNodeExplanationText>\n        Selecting a node in the dropdown will{' '}\n        <ImportantKeyword>center this node</ImportantKeyword> in your screen.\n      </SearchNodeExplanationText>\n\n      <TreeComponentDropdown\n        showSearch\n        value={searchField}\n        id=\"search-component-dropdown\"\n        dropdownStyle={StyledDropDownSelect}\n        placeholder=\"Select Node to focus\"\n        onChange={onChange}\n        treeDataSimpleMode\n        treeDefaultExpandAll={true}\n        treeData={searchOptions}\n      />\n    </>\n  );\n};\n\nexport default NavSearchComponent;\n","import { Select, Input } from 'antd';\nimport React, { useContext } from 'react';\nimport ComponentBackgroundContext from '../../../../contexts/ComponentBackgroundContext';\nimport {\n  BackgroundLabels,\n  DropDownLabels,\n} from '../../../../utils/constants/constants';\nimport {\n  BaselineInputWrapper,\n  DropdownInput,\n  StyledDropDownSelect,\n} from '../../NavigationPanel.sc';\n\nconst NavNodeVisualizationOptions = () => {\n  // Getting-Setting the 3 node visualization options through context.\n  const { componentBackground, setComponentBackground } = useContext(\n    ComponentBackgroundContext\n  );\n\n  // Change the lines of code threshold for the color scale visualization option.\n  const changeLinesOfCodeThreshold = (e) => {\n    if (e.target.value < 1) {\n      setComponentBackground({\n        ...componentBackground,\n        locReference: 1,\n      });\n    } else {\n      setComponentBackground({\n        ...componentBackground,\n        locReference: e.target.value,\n      });\n    }\n  };\n\n  return (\n    <>\n      <DropdownInput\n        defaultValue={\n          !componentBackground.mode\n            ? BackgroundLabels.size\n            : componentBackground.mode\n        }\n        onChange={(value) =>\n          setComponentBackground({\n            ...componentBackground,\n            mode: value,\n          })\n        }\n        dropdownStyle={StyledDropDownSelect}\n      >\n        <Select.Option value={BackgroundLabels.default}>\n          {DropDownLabels.default}\n        </Select.Option>\n\n        <Select.Option value={BackgroundLabels.size}>\n          {DropDownLabels.size}\n        </Select.Option>\n\n        <Select.Option value={BackgroundLabels.loc}>\n          {DropDownLabels.color}\n        </Select.Option>\n      </DropdownInput>\n\n      {componentBackground.mode === BackgroundLabels.loc && (\n        <BaselineInputWrapper>\n          <Input\n            addonBefore={'Baseline'}\n            placeholder={'LOC Reference'}\n            defaultValue={componentBackground.locReference}\n            onChange={changeLinesOfCodeThreshold}\n            type=\"number\"\n            min=\"1\"\n          />\n        </BaselineInputWrapper>\n      )}\n    </>\n  );\n};\n\nexport default NavNodeVisualizationOptions;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useStoreState, useZoomPanHelper } from 'react-flow-renderer';\nimport PropTypes from 'prop-types';\nimport {\n  StyledDropDownSelect,\n  SubtreeSwitchWrapper,\n  TreeComponentDropdown,\n  SearchNodeExplanationText,\n  SubtreeModeText,\n  TimesUsedInputGroup,\n  TimesUsedButton,\n  ImportantKeyword,\n  FilterSwitch,\n} from '../../NavigationPanel.sc';\nimport { InitialNodesContext } from '../../../../App';\nimport { Input } from 'antd';\nimport { focusSearchDropdown } from '../../../../utils/functions/focusSearchDropdown';\nimport { RedoOutlined } from '@ant-design/icons';\nimport {\n  ActionButton,\n  RecompileActionsWrapper,\n} from '../ActionButtons/ActionButtons.sc';\nimport { recompile } from '../../../../api';\nimport { ButtonLabels } from '../../../../utils/constants/constants';\n\nconst NavFilterComponent = ({\n  isFilterMode,\n  setIsFilterMode,\n  setComponentLabelFilter,\n  setComponentNumberFilter,\n  setComponentNameFilter,\n}) => {\n  const { fitView } = useZoomPanHelper();\n\n  // When toggling the switch, set the LabelFilter and the searchfield\n  // to be the root of the initial nodes, so that we rerender the tree.\n  const removeFilters = () => {\n    setComponentLabelFilter(initialNodesContext[0].data.label);\n    setSearchField(initialNodesContext[0].data.label);\n\n    setTimeout(() => fitView({ duration: 500 }), 0);\n  };\n\n  // Toggling the switch\n  const onFilterSwitchToggle = async () => {\n    await setIsFilterMode(!isFilterMode);\n\n    removeFilters();\n  };\n\n  // Preserving the initial nodes in memory.\n  const initialNodesContext = useContext(InitialNodesContext);\n\n  // Get the nodes from the state.\n  const nodes = useStoreState((store) => store.nodes);\n\n  // Selected node in searchbar.\n  const [searchField, setSearchField] = useState();\n\n  // Setting the nodes that appear in the searchbar.\n  const [searchOptions, setSearchOptions] = useState([]);\n\n  // State for the number input.\n  const [numberForFilter, setNumberForFilter] = useState(undefined);\n\n  // State for the component name for filtering.\n  const [nameForFilter, setNameForFilter] = useState('');\n\n  function handleNumberInputChange(e) {\n    setNumberForFilter(e.target.value);\n  }\n\n  function handleNameInputChange(e) {\n    setNameForFilter(e.target.value);\n  }\n\n  // Focus navigation search bar on keypress for both Mac and Windows\n  focusSearchDropdown();\n\n  const onChangeSubtreeRootNode = (id) => {\n    const index = initialNodesContext.findIndex((node) => node.id == id);\n    const node = initialNodesContext[index];\n    const label = node.data.label;\n\n    setSearchField(label);\n    setComponentLabelFilter(label);\n  };\n\n  // Node names are in form of Parent:Children.\n  const getParentId = (id) => {\n    const idSplit = id.split(':');\n    if (idSplit.length == 1) {\n      return null;\n    }\n    idSplit.pop();\n    return idSplit.join(':');\n  };\n\n  // outDegree is 0 if the node has no descendants. Look at Graph.ts.\n  const isLeaf = (node) => {\n    return node.data.outDegree == 0;\n  };\n\n  // Returns a list of node objects, used in the TreeComponentDropdown.\n  const generateTreeNodes = () => {\n    if (initialNodesContext.length > 0) {\n      setSearchOptions(\n        initialNodesContext.map((node) => {\n          return {\n            id: node.id,\n            pId: getParentId(node.id),\n            title: node.data.label,\n            value: node.id,\n            isLeaf: isLeaf(node),\n          };\n        })\n      );\n    }\n  };\n\n  useEffect(() => {\n    generateTreeNodes();\n  }, [nodes]);\n\n  const triggerRecompile = () => {\n    recompile()\n      .then(location.reload())\n      .catch((error) => console.log('An error occurred ', error));\n  };\n\n  return (\n    <>\n      <SubtreeSwitchWrapper>\n        <SubtreeModeText>\n          {!isFilterMode ? 'Enable Filter Mode to Continue' : 'Filter Mode On'}\n        </SubtreeModeText>\n        <FilterSwitch defaultChecked={false} onChange={onFilterSwitchToggle} />\n      </SubtreeSwitchWrapper>\n\n      {isFilterMode && (\n        <SearchNodeExplanationText>\n          Selecting a node will{' '}\n          <ImportantKeyword>render a subtree</ImportantKeyword> with this node\n          as the root.\n        </SearchNodeExplanationText>\n      )}\n\n      {isFilterMode && (\n        <>\n          <TreeComponentDropdown\n            showSearch\n            id=\"search-component-dropdown\"\n            value={searchField}\n            dropdownStyle={StyledDropDownSelect}\n            placeholder=\"Define Subtree Root\"\n            onChange={onChangeSubtreeRootNode}\n            treeDataSimpleMode\n            treeDefaultExpandAll={true}\n            treeData={searchOptions}\n          />\n\n          <SearchNodeExplanationText>\n            Hide components used more times than:\n          </SearchNodeExplanationText>\n\n          <TimesUsedInputGroup compact>\n            <Input type=\"number\" onChange={handleNumberInputChange} />\n            <TimesUsedButton\n              onClick={() => {\n                numberForFilter && setComponentNumberFilter(numberForFilter);\n              }}\n              type=\"primary\"\n            >\n              Apply Filter\n            </TimesUsedButton>\n          </TimesUsedInputGroup>\n\n          {/* Input field for the 'filter component by name' */}\n          <SearchNodeExplanationText>\n            Hide components by the specified name:\n          </SearchNodeExplanationText>\n\n          <TimesUsedInputGroup compact>\n            <Input onChange={handleNameInputChange} />\n            <TimesUsedButton\n              onClick={() => {\n                setComponentNameFilter(nameForFilter);\n              }}\n              type=\"primary\"\n            >\n              Apply Filter\n            </TimesUsedButton>\n          </TimesUsedInputGroup>\n          <RecompileActionsWrapper>\n            <ActionButton\n              type=\"primary\"\n              shape=\"round\"\n              size=\"middle\"\n              icon={<RedoOutlined />}\n              onClick={triggerRecompile}\n            >\n              {ButtonLabels.filterReset}\n            </ActionButton>\n          </RecompileActionsWrapper>\n        </>\n      )}\n    </>\n  );\n};\n\nNavFilterComponent.propTypes = {\n  nodesAndEdges: PropTypes.any,\n  isFilterMode: PropTypes.bool,\n  setIsFilterMode: PropTypes.func,\n  setComponentLabelFilter: PropTypes.func,\n  setComponentNumberFilter: PropTypes.func,\n  setComponentNameFilter: PropTypes.func,\n};\n\nexport default NavFilterComponent;\n","import { Menu } from 'antd';\nimport React, { useEffect } from 'react';\nimport { navigationWidth } from '../../utils/constants/units';\nimport {\n  AppTitle,\n  NavigationSider,\n  StyledMenuDivider,\n  StyledSubMenu,\n} from './NavigationPanel.sc';\nimport PropTypes from 'prop-types';\nimport {\n  BgColorsOutlined,\n  FileSearchOutlined,\n  ExperimentOutlined,\n  FilterOutlined,\n} from '@ant-design/icons';\nimport NavExperimentalActions from './private/Experimental/NavExperimentalActions';\nimport NavSearchComponent from './private/SubMenuSections/NavSearchComponent';\nimport NavNodeVisualizationOptions from './private/SubMenuSections/NavNodeVisualizationOptions';\nimport {\n  defaultOpenKeys,\n  NavigationLabels,\n} from '../../utils/constants/constants';\nimport { useZoomPanHelper } from 'react-flow-renderer';\nimport NavFilterComponent from './private/SubMenuSections/NavFilterComponent';\n\nconst NavigationPanel = ({\n  isNavCollapsed,\n  setComponentLabelFilter,\n  setComponentNumberFilter,\n  setComponentNameFilter,\n  isFilterMode,\n  setIsFilterMode,\n}) => {\n  const reactFlowInstance = useZoomPanHelper();\n\n  useEffect(() => {\n    setTimeout(() => {\n      reactFlowInstance.fitView({ duration: 500 });\n    }, 0);\n  }, [isNavCollapsed]);\n\n  return (\n    <>\n      <NavigationSider\n        collapsed={isNavCollapsed}\n        collapsedWidth={0}\n        width={navigationWidth}\n      >\n        <AppTitle level={1}>{NavigationLabels.title}</AppTitle>\n\n        <Menu theme=\"dark\" mode=\"inline\" defaultOpenKeys={defaultOpenKeys}>\n          <StyledSubMenu\n            key={NavigationLabels.search.key}\n            title={NavigationLabels.search.title}\n            icon={<FileSearchOutlined />}\n          >\n            <NavSearchComponent />\n          </StyledSubMenu>\n\n          <StyledMenuDivider />\n\n          <StyledSubMenu\n            key={'salam'}\n            title={'Filters'}\n            icon={<FilterOutlined />}\n          >\n            <NavFilterComponent\n              setComponentLabelFilter={setComponentLabelFilter}\n              setComponentNumberFilter={setComponentNumberFilter}\n              setComponentNameFilter={setComponentNameFilter}\n              isFilterMode={isFilterMode}\n              setIsFilterMode={setIsFilterMode}\n            />\n          </StyledSubMenu>\n\n          <StyledMenuDivider />\n\n          <StyledSubMenu\n            key={NavigationLabels.node.key}\n            title={NavigationLabels.node.title}\n            icon={<BgColorsOutlined />}\n          >\n            <NavNodeVisualizationOptions />\n          </StyledSubMenu>\n\n          <StyledMenuDivider />\n\n          <StyledSubMenu\n            key={'experimental-actions'}\n            title={'Custom Root & Reset'}\n            icon={<ExperimentOutlined />}\n          >\n            <NavExperimentalActions />\n          </StyledSubMenu>\n        </Menu>\n      </NavigationSider>\n    </>\n  );\n};\n\nNavigationPanel.propTypes = {\n  isNavCollapsed: PropTypes.any,\n  setComponentLabelFilter: PropTypes.func,\n  setComponentNumberFilter: PropTypes.func,\n  setComponentNameFilter: PropTypes.func,\n  isFilterMode: PropTypes.bool,\n  setIsFilterMode: PropTypes.func,\n};\n\nexport default NavigationPanel;\n","import { Button, Layout } from 'antd';\nimport styled from 'styled-components';\n\nimport { baseUnit, navigationWidth } from '../../utils/constants/units';\n\nexport const MainContentWrapper = styled(Layout)`\n  margin-left: ${({ isNavCollapsed }) =>\n    isNavCollapsed === false ? `${navigationWidth}px` : '0'};\n  padding: 1rem;\n  height: 100vh;\n  background-color: rgb(240 242 245 / 33%);\n`;\n\nexport const NavigationTriggerButton = styled(Button)`\n  position: absolute;\n  bottom: ${baseUnit * 2}px;\n  left: ${({ isNavCollapsed }) =>\n    isNavCollapsed === true\n      ? `${baseUnit * 2}px`\n      : `${navigationWidth + baseUnit * 2}px`};\n  z-index: 999;\n`;\n\nexport const MinimapTriggerButton = styled(Button)`\n  position: absolute;\n  top: ${({ isMinimapVisible }) =>\n    isMinimapVisible === true ? `${baseUnit * 19.2}px` : `${baseUnit * 2}px`};\n  right: ${baseUnit * 2}px;\n  z-index: 999;\n`;\n\nexport const OpenHelpButton = styled(Button)`\n  position: absolute;\n  right: ${baseUnit * 2}px;\n  display: ${({ isHelpVisible }) => isHelpVisible && `none`};\n  bottom: ${baseUnit * 2}px;\n  z-index: 999;\n`;\n","import { LeftCircleOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport ColorHash from 'color-hash';\n\nimport { Drawer as ComponentCodeDrawer, Layout } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useState, useContext } from 'react';\nimport { ReactFlowProvider } from 'react-flow-renderer';\nimport useStickyState from '../../hooks/useStickyState';\nimport ComponentCode from '../ComponentCode/ComponentCode';\nimport HelpPanel from '../HelpPanel/HelpPanel';\nimport StyledMiniMap from '../Minimap/Minimap.sc';\nimport NavigationPanel from '../NavigationPanel/NavigationPanel';\nimport {\n  MainContentWrapper,\n  MinimapTriggerButton,\n  NavigationTriggerButton,\n  OpenHelpButton,\n} from './DefaultLayout.sc';\nimport HighlightedComponentsContext from '../../contexts/HighlightedComponentsContext';\nimport { ButtonLabels } from '../../utils/constants/constants';\n\nconst DefaultLayout = ({\n  children,\n  nodeDetail,\n  isFilterMode,\n  setIsFilterMode,\n  setNodeDetail,\n  setComponentLabelFilter,\n  setComponentNumberFilter,\n  setComponentNameFilter,\n  isVerticalTreeLayoutAsDefault,\n  setVerticalTreeLayoutAsDefault,\n}) => {\n  // Set hidden help on start up to false in the local storage.\n  const [isHelpHiddenOnStartUp, setIsHelpHiddenOnStartUp] = useStickyState(\n    false,\n    'react-bratus:hide-help'\n  );\n\n  // When user clicks the checkbox to hide or display help on startup.\n  const [isHelpVisible, setIsHelpVisible] = useState(\n    !isHelpHiddenOnStartUp ? true : false\n  );\n\n  // State to collapse the navigation sider.\n  const [isNavCollapsed, setIsNavCollapsed] = useState(false);\n\n  // State to hide/ show the minimap.\n  const [isMinimapVisible, setisMinimapVisible] = useState(false);\n\n  // Highlight the same nodes on minimap when hovering over the nodes of the tree.\n  const { highlightedComponents } = useContext(HighlightedComponentsContext);\n  const isMinimapNodeHighlighted = (node) => {\n    return highlightedComponents.some((component) =>\n      node.id.match(\n        `${component.componentName}:+.+|${component.componentName}$`\n      )\n    );\n  };\n\n  // Color nodes on the minimap differently when highlighted or not.\n  const defineMinimapNodeColor = (node) => {\n    if (isMinimapNodeHighlighted(node)) {\n      return new ColorHash({\n        lightness: 0.4,\n        hue: { min: 0, max: 366 },\n      }).hex(node.data.label);\n    } else {\n      return new ColorHash({\n        lightness: 0.7,\n        hue: { min: 0, max: 366 },\n      }).hex(node.data.label);\n    }\n  };\n\n  return (\n    <Layout style={{ backgroundColor: 'white' }}>\n      <ReactFlowProvider>\n        <NavigationPanel\n          setIsHelpVisible={setIsHelpVisible}\n          setIsNavCollapsed={setIsNavCollapsed}\n          isFilterMode={isFilterMode}\n          setIsFilterMode={setIsFilterMode}\n          isNavCollapsed={isNavCollapsed}\n          setComponentLabelFilter={setComponentLabelFilter}\n          setComponentNumberFilter={setComponentNumberFilter}\n          setComponentNameFilter={setComponentNameFilter}\n        />\n\n        <NavigationTriggerButton\n          isNavCollapsed={isNavCollapsed}\n          icon={<LeftCircleOutlined rotate={isNavCollapsed && 180} />}\n          type=\"primary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={() => {\n            setIsNavCollapsed(!isNavCollapsed);\n          }}\n        >\n          {isNavCollapsed ? (\n            <span>{ButtonLabels.nav.show}</span>\n          ) : (\n            <span>{ButtonLabels.nav.hide}</span>\n          )}\n        </NavigationTriggerButton>\n\n        <MainContentWrapper isNavCollapsed={isNavCollapsed}>\n          {children}\n        </MainContentWrapper>\n\n        <ComponentCodeDrawer\n          width={800}\n          visible={nodeDetail.visible}\n          closable={true}\n          keyboard\n          onClose={() => setNodeDetail({ visible: false, node: null })}\n          title={nodeDetail.node ? nodeDetail.node.data.label : ''}\n        >\n          <ComponentCode nodeDetail={nodeDetail} />\n        </ComponentCodeDrawer>\n\n        <MinimapTriggerButton\n          isMinimapVisible={isMinimapVisible}\n          icon={<LeftCircleOutlined rotate={isMinimapVisible && 180} />}\n          type=\"primary\"\n          shape=\"round\"\n          size=\"middle\"\n          onClick={() => {\n            setisMinimapVisible(!isMinimapVisible);\n          }}\n        >\n          {isMinimapVisible ? (\n            <span>{ButtonLabels.map.hide}</span>\n          ) : (\n            <span>{ButtonLabels.map.show}</span>\n          )}\n        </MinimapTriggerButton>\n        {isMinimapVisible && (\n          <StyledMiniMap nodeColor={defineMinimapNodeColor} />\n        )}\n      </ReactFlowProvider>\n\n      <ReactFlowProvider>\n        <OpenHelpButton\n          type=\"primary\"\n          shape=\"round\"\n          size=\"middle\"\n          isHelpVisible={isHelpVisible}\n          icon={<QuestionCircleOutlined />}\n          onClick={() => setIsHelpVisible(true)}\n        >\n          {ButtonLabels.help}\n        </OpenHelpButton>\n\n        <HelpPanel\n          isVerticalTreeLayoutAsDefault={isVerticalTreeLayoutAsDefault}\n          setVerticalTreeLayoutAsDefault={setVerticalTreeLayoutAsDefault}\n          isHelpVisible={isHelpVisible}\n          setIsHelpVisible={setIsHelpVisible}\n          isHelpHiddenOnStartUp={isHelpHiddenOnStartUp}\n          setIsHelpHiddenOnStartUp={setIsHelpHiddenOnStartUp}\n        />\n      </ReactFlowProvider>\n    </Layout>\n  );\n};\n\nDefaultLayout.propTypes = {\n  isVerticalTreeLayoutAsDefault: PropTypes.any,\n  setVerticalTreeLayoutAsDefault: PropTypes.any,\n  nodeDetail: PropTypes.any,\n  setNodeDetail: PropTypes.func,\n  setComponentLabelFilter: PropTypes.func,\n  setComponentNumberFilter: PropTypes.func,\n  setComponentNameFilter: PropTypes.func,\n  isFilterMode: PropTypes.bool,\n  setIsFilterMode: PropTypes.func,\n};\nexport default DefaultLayout;\n","import 'antd/dist/antd.css';\nimport { Alert, Spin } from 'antd';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { getParsedData } from './api';\nimport ComponentTree from './components/ComponentTree/ComponentTree';\nimport DefaultLayout from './components/DefaultLayoutPage/DefaultLayout';\nimport { getEdges, getNodes } from './utils/functions/nodes-and-edges';\nimport { getLayoutedGraphElements } from './utils/functions/graphUtils';\nimport { GraphLabels } from './utils/constants/constants';\nimport ComponentBackgroundContext from './contexts/ComponentBackgroundContext';\nimport useStickyState from './hooks/useStickyState';\nimport { triggerBrowserWarning } from './utils/functions/browser-notification';\n\n// Preserving the initial nodes to display them in the dropdowns even after filtering.\nexport const InitialNodesContext = React.createContext([]);\nexport const DraggableContent = React.createContext(false);\n\nconst App = () => {\n  const [isDragging, setIsDragging] = useState(false);\n\n  const [nodesAndEdges, setNodesAndEdges] = useState(null);\n\n  // State for Drawer holding the code panel of the selected node..\n  const [nodeDetail, setNodeDetail] = useState({ visible: false, node: null });\n\n  // Storing initial nodes to assign them to InitialNodesContext\n  const [initialNodes, setInitialNodes] = useState([]);\n\n  // Node visualization options (size, color, green). See NavNodeVisualizationOptions.jsx\n  const { componentBackground } = useContext(ComponentBackgroundContext);\n\n  // Dropdown value that filters by component label (name) on click.\n  const [componentLabelFilter, setComponentLabelFilter] = useState(null);\n\n  // Input value that filers components by the number of 'timesUsed'\n  const [componentNumberFilter, setComponentNumberFilter] = useState(null);\n\n  // Input value that filers components by the number of 'timesUsed'\n  const [componentNameFilter, setComponentNameFilter] = useState(null);\n\n  // Inform the application about the tree direction at all times.\n  const [treeLayoutDirection, setTreeLayoutDirection] = useState(undefined);\n\n  // Enabling & disabling subtree mode.\n  const [isFilterMode, setIsFilterMode] = useState(false);\n\n  // Set vertical as default through the help panel preferences section.\n  const [isVerticalTreeLayoutAsDefault, setVerticalTreeLayoutAsDefault] =\n    useStickyState(false, 'bratus:prefer-vertical-layout');\n\n  // Don't show browser warning again\n  const [isBrowserWarningHidden, setIsBrowserWarningHidden] = useStickyState(\n    false,\n    'bratus:hidden-browser-warning'\n  );\n\n  const treeLayoutOnCompile =\n    isVerticalTreeLayoutAsDefault === true\n      ? GraphLabels.leftToRight\n      : GraphLabels.topToBottom;\n\n  useEffect(() => {\n    getParsedData()\n      // data comes as a set of nodes and edges from the server.\n      .then((data) => {\n        const nodes = getNodes(data, setNodeDetail, setInitialNodes);\n        const edges = getEdges(data);\n        let tree = [];\n\n        triggerBrowserWarning(\n          setIsBrowserWarningHidden,\n          isBrowserWarningHidden\n        );\n\n        setNodesAndEdges(\n          getLayoutedGraphElements(\n            tree.concat(nodes, edges),\n            treeLayoutOnCompile,\n            setTreeLayoutDirection,\n            componentBackground\n          )\n        );\n      })\n      .catch(console.log);\n  }, []);\n\n  return (\n    <InitialNodesContext.Provider value={initialNodes}>\n      <DefaultLayout\n        nodeDetail={nodeDetail}\n        isFilterMode={isFilterMode}\n        setIsFilterMode={setIsFilterMode}\n        setComponentLabelFilter={setComponentLabelFilter}\n        setComponentNumberFilter={setComponentNumberFilter}\n        setComponentNameFilter={setComponentNameFilter}\n        setNodeDetail={setNodeDetail}\n        isVerticalTreeLayoutAsDefault={isVerticalTreeLayoutAsDefault}\n        setVerticalTreeLayoutAsDefault={setVerticalTreeLayoutAsDefault}\n      >\n        {nodesAndEdges ? (\n          <DraggableContent.Provider value={isDragging}>\n            <ComponentTree\n              componentLabelFilter={componentLabelFilter}\n              componentNumberFilter={componentNumberFilter}\n              componentNameFilter={componentNameFilter}\n              treeLayoutDirection={treeLayoutDirection}\n              isFilterMode={isFilterMode}\n              setIsDragging={setIsDragging}\n              setIsFilterMode={setIsFilterMode}\n              nodesAndEdges={nodesAndEdges}\n              setTreeLayoutDirection={setTreeLayoutDirection}\n            />\n          </DraggableContent.Provider>\n        ) : (\n          <Spin spinning={true}>\n            <Alert\n              message=\"Nothing to show\"\n              description=\"Could not find any components to display\"\n              type=\"warning\"\n            />\n          </Spin>\n        )}\n      </DefaultLayout>\n    </InitialNodesContext.Provider>\n  );\n};\n\nexport default App;\n","import { Colors } from '../constants/colors';\n\n// Get the nodes from data and set their information.\nexport const getNodes = (data, setNodeDetail, setInitialNodes) => {\n  const nodes = data.nodes.map((node) => {\n    return {\n      ...node,\n      data: {\n        ...node.data,\n        onShowNodeDetail: (node) =>\n          setNodeDetail({ visible: true, node: node }),\n      },\n    };\n  });\n\n  // Setting the initial nodes as soon as they arrive from the parsed data\n  setInitialNodes(nodes);\n\n  return nodes;\n};\n\n// Get the edges from data & style them.\nexport const getEdges = (data) => {\n  const edges = data.edges.map((edge) => {\n    return {\n      ...edge,\n      labelBgPadding: [8, 4],\n      labelBgBorderRadius: 4,\n      labelBgStyle: {\n        fill: '#001529',\n        fillOpacity: 0.7,\n      },\n      labelStyle: {\n        fill: '#fff',\n      },\n      style: {\n        // Edge color & thickness\n        stroke: edge.conditional\n          ? `${Colors.conditionalEdges}`\n          : `${Colors.defaultAndRouteEdges}`,\n        strokeWidth: '2px',\n      },\n    };\n  });\n\n  return edges;\n};\n","import React from 'react';\nimport { Button, notification } from 'antd';\n\nexport const triggerBrowserWarning = (\n  setIsBrowserWarningHidden,\n  isBrowserWarningHidden\n) => {\n  const key = `open${Date.now()}`;\n  const btn = (\n    <Button\n      type=\"primary\"\n      size=\"small\"\n      onClick={() => {\n        notification.close(key);\n        setIsBrowserWarningHidden(true);\n      }}\n    >\n      Don&apos;t show this again\n    </Button>\n  );\n  const title = <b>Browser Warning</b>;\n\n  // No reason to display warning if we are already using Chrome\n  const isChromeAgent = navigator.userAgent.indexOf('Chrome') > -1;\n\n  const notificationTriggerCondition =\n    !isChromeAgent && !isBrowserWarningHidden;\n\n  notificationTriggerCondition &&\n    notification['warning']({\n      message: title,\n      description:\n        'Dear Users, for your best experience, we recommend you using Chrome.',\n      btn,\n      key,\n      duration: 10,\n      onClose: close,\n    });\n};\n","import React from 'react';\nimport ComponentBackgroundContext from '../contexts/ComponentBackgroundContext';\nimport useStickyState from '../hooks/useStickyState';\nimport { BackgroundLabels } from '../utils/constants/constants';\n\nconst ComponentBackgroundProvider = ({ children }) => {\n  const [componentBackground, setComponentBackground] = useStickyState(\n    {\n      mode: BackgroundLabels.default,\n      locReference: 300,\n    },\n    'componentBackground'\n  );\n\n  return (\n    <ComponentBackgroundContext.Provider\n      value={{ componentBackground, setComponentBackground }}\n    >\n      {children}\n    </ComponentBackgroundContext.Provider>\n  );\n};\n\nexport default ComponentBackgroundProvider;\n","import React, { useState } from 'react';\n\nimport HighlightedComponentsContext from '../contexts/HighlightedComponentsContext';\n\nconst HighlightedComponentsProvider = ({ children }) => {\n  const [highlightedComponents, setHighlightedComponents] = useState([]);\n\n  return (\n    <HighlightedComponentsContext.Provider\n      value={{ highlightedComponents, setHighlightedComponents }}\n    >\n      {children}\n    </HighlightedComponentsContext.Provider>\n  );\n};\n\nexport default HighlightedComponentsProvider;\n","import React from 'react';\nimport ComponentBackgroundProvider from './ComponentBackgroundProvider';\nimport HighlightedComponentsProvider from './HighlightedComponentsProvider';\n\nconst Providers = ({ children }: any) => {\n  return (\n    <HighlightedComponentsProvider>\n      <ComponentBackgroundProvider>{children}</ComponentBackgroundProvider>\n    </HighlightedComponentsProvider>\n  );\n};\n\nexport default Providers;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Providers from './providers/Providers';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}